
TempDataLogger.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a0  00800100  00006b76  00006c2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006b76  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002df  008003a0  008003a0  00006eca  2**0
                  ALLOC
  3 .eeprom       0000001f  00810000  00810000  00006eca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 000007e0  00000000  00000000  00006ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000162e  00000000  00000000  000076c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d7f6  00000000  00000000  00008cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003236  00000000  00000000  000164ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000ac8c  00000000  00000000  00019723  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c40  00000000  00000000  000243b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000400c  00000000  00000000  00024ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000775a  00000000  00000000  00028ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d50  00000000  00000000  00030756  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
       0:	a8 c0       	rjmp	.+336    	; 0x152 <__ctors_end>
       2:	00 00       	nop

	return Endpoint_IsConfigured();
}

void Endpoint_ClearEndpoints(void)
{
       4:	c4 c0       	rjmp	.+392    	; 0x18e <__bad_interrupt>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       6:	00 00       	nop
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
       8:	c2 c0       	rjmp	.+388    	; 0x18e <__bad_interrupt>
	while ((CurrByte = pgm_read_byte(FlashStringPtr)) != 0x00)
	{
		Serial_TxByte(CurrByte);
		FlashStringPtr++;
	}
}
       a:	00 00       	nop
       c:	c0 c0       	rjmp	.+384    	; 0x18e <__bad_interrupt>
       e:	00 00       	nop
      10:	be c0       	rjmp	.+380    	; 0x18e <__bad_interrupt>
      12:	00 00       	nop
      14:	bc c0       	rjmp	.+376    	; 0x18e <__bad_interrupt>
      16:	00 00       	nop
      18:	ba c0       	rjmp	.+372    	; 0x18e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b8 c0       	rjmp	.+368    	; 0x18e <__bad_interrupt>
      1e:	00 00       	nop
      20:	b6 c0       	rjmp	.+364    	; 0x18e <__bad_interrupt>
      22:	00 00       	nop
      24:	b4 c0       	rjmp	.+360    	; 0x18e <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 0b 2a 	jmp	0x5416	; 0x5416 <__vector_10>
      2c:	0c 94 d1 29 	jmp	0x53a2	; 0x53a2 <__vector_11>
      30:	ae c0       	rjmp	.+348    	; 0x18e <__bad_interrupt>
      32:	00 00       	nop
      34:	ac c0       	rjmp	.+344    	; 0x18e <__bad_interrupt>
      36:	00 00       	nop
      38:	aa c0       	rjmp	.+340    	; 0x18e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a8 c0       	rjmp	.+336    	; 0x18e <__bad_interrupt>
      3e:	00 00       	nop
      40:	a6 c0       	rjmp	.+332    	; 0x18e <__bad_interrupt>
      42:	00 00       	nop
      44:	93 c5       	rjmp	.+2854   	; 0xb6c <__vector_17>
      46:	00 00       	nop
      48:	a2 c0       	rjmp	.+324    	; 0x18e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a0 c0       	rjmp	.+320    	; 0x18e <__bad_interrupt>
      4e:	00 00       	nop
      50:	9e c0       	rjmp	.+316    	; 0x18e <__bad_interrupt>
      52:	00 00       	nop
      54:	9c c0       	rjmp	.+312    	; 0x18e <__bad_interrupt>
      56:	00 00       	nop
      58:	9a c0       	rjmp	.+308    	; 0x18e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	98 c0       	rjmp	.+304    	; 0x18e <__bad_interrupt>
      5e:	00 00       	nop
      60:	96 c0       	rjmp	.+300    	; 0x18e <__bad_interrupt>
      62:	00 00       	nop
      64:	94 c0       	rjmp	.+296    	; 0x18e <__bad_interrupt>
      66:	00 00       	nop
      68:	92 c0       	rjmp	.+292    	; 0x18e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	90 c0       	rjmp	.+288    	; 0x18e <__bad_interrupt>
      6e:	00 00       	nop
      70:	8e c0       	rjmp	.+284    	; 0x18e <__bad_interrupt>
      72:	00 00       	nop
      74:	8c c0       	rjmp	.+280    	; 0x18e <__bad_interrupt>
      76:	00 00       	nop
      78:	8a c0       	rjmp	.+276    	; 0x18e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	88 c0       	rjmp	.+272    	; 0x18e <__bad_interrupt>
      7e:	00 00       	nop
      80:	86 c0       	rjmp	.+268    	; 0x18e <__bad_interrupt>
      82:	00 00       	nop
      84:	84 c0       	rjmp	.+264    	; 0x18e <__bad_interrupt>
      86:	00 00       	nop
      88:	82 c0       	rjmp	.+260    	; 0x18e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	80 c0       	rjmp	.+256    	; 0x18e <__bad_interrupt>
      8e:	00 00       	nop
      90:	7e c0       	rjmp	.+252    	; 0x18e <__bad_interrupt>
      92:	00 00       	nop
      94:	7c c0       	rjmp	.+248    	; 0x18e <__bad_interrupt>
      96:	00 00       	nop

00000098 <GenericReport>:
      98:	06 9c ff 09 01 a1 01 09 02 75 08 95 2b 15 80 25     .........u..+..%
      a8:	7f 81 02 09 03 75 08 95 2b 15 00 25 ff 91 02 c0     .....u..+..%....

000000b8 <DeviceDescriptor>:
      b8:	12 01 10 01 00 00 00 08 eb 03 63 20 01 00 01 02     ..........c ....
      c8:	dc 01                                               ..

000000ca <ConfigurationDescriptor>:
      ca:	09 02 39 00 02 01 00 c0 32 09 04 00 00 02 08 06     ..9.....2.......
      da:	50 00 07 05 83 02 40 00 01 07 05 04 02 40 00 01     P.....@......@..
      ea:	09 04 01 00 01 03 00 00 00 09 21 11 01 00 01 22     ..........!...."
      fa:	20 00 07 05 81 03 20 00 01                           ..... ..

00000103 <LanguageString>:
     103:	04 03 09 04                                         ....

00000107 <ManufacturerString>:
     107:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     117:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000121 <ProductString>:
     121:	2e 03 54 00 65 00 6d 00 70 00 65 00 72 00 61 00     ..T.e.m.p.e.r.a.
     131:	74 00 75 00 72 00 65 00 20 00 44 00 61 00 74 00     t.u.r.e. .D.a.t.
     141:	61 00 6c 00 6f 00 67 00 67 00 65 00 72 00 00 00     a.l.o.g.g.e.r...
     151:	00                                                  .

00000152 <__ctors_end>:
     152:	11 24       	eor	r1, r1
     154:	1f be       	out	0x3f, r1	; 63
     156:	cf ef       	ldi	r28, 0xFF	; 255
     158:	d0 e2       	ldi	r29, 0x20	; 32
     15a:	de bf       	out	0x3e, r29	; 62
     15c:	cd bf       	out	0x3d, r28	; 61

0000015e <__do_copy_data>:
     15e:	13 e0       	ldi	r17, 0x03	; 3
     160:	a0 e0       	ldi	r26, 0x00	; 0
     162:	b1 e0       	ldi	r27, 0x01	; 1
     164:	e6 e7       	ldi	r30, 0x76	; 118
     166:	fb e6       	ldi	r31, 0x6B	; 107
     168:	00 e0       	ldi	r16, 0x00	; 0
     16a:	0b bf       	out	0x3b, r16	; 59
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x14>
     16e:	07 90       	elpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	a0 3a       	cpi	r26, 0xA0	; 160
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0x10>

00000178 <__do_clear_bss>:
     178:	16 e0       	ldi	r17, 0x06	; 6
     17a:	a0 ea       	ldi	r26, 0xA0	; 160
     17c:	b3 e0       	ldi	r27, 0x03	; 3
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	af 37       	cpi	r26, 0x7F	; 127
     184:	b1 07       	cpc	r27, r17
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	d8 d4       	rcall	.+2480   	; 0xb3a <main>
     18a:	0c 94 b9 35 	jmp	0x6b72	; 0x6b72 <_exit>

0000018e <__bad_interrupt>:
     18e:	38 cf       	rjmp	.-400    	; 0x0 <__vectors>

00000190 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     190:	cf 93       	push	r28
     192:	df 93       	push	r29
	Device_Report_t* ReportParams = (Device_Report_t*)ReportData;
     194:	e9 01       	movw	r28, r18

	DS1307_SetDate(ReportParams->Day,  ReportParams->Month,  ReportParams->Year);
     196:	88 81       	ld	r24, Y
     198:	69 81       	ldd	r22, Y+1	; 0x01
     19a:	4a 81       	ldd	r20, Y+2	; 0x02
     19c:	0e 94 51 12 	call	0x24a2	; 0x24a2 <DS1307_SetDate>
	DS1307_SetTime(ReportParams->Hour, ReportParams->Minute, ReportParams->Second);
     1a0:	8b 81       	ldd	r24, Y+3	; 0x03
     1a2:	6c 81       	ldd	r22, Y+4	; 0x04
     1a4:	4d 81       	ldd	r20, Y+5	; 0x05
     1a6:	0e 94 d5 11 	call	0x23aa	; 0x23aa <DS1307_SetTime>

	/* If the logging interval has changed from its current value, write it to EEPROM */
	if (LoggingInterval500MS_SRAM != ReportParams->LogInterval500MS)
     1aa:	6e 81       	ldd	r22, Y+6	; 0x06
     1ac:	7f 81       	ldd	r23, Y+7	; 0x07
     1ae:	80 91 e0 03 	lds	r24, 0x03E0
     1b2:	90 91 e1 03 	lds	r25, 0x03E1
     1b6:	86 17       	cp	r24, r22
     1b8:	97 07       	cpc	r25, r23
     1ba:	41 f0       	breq	.+16     	; 0x1cc <CALLBACK_HID_Device_ProcessHIDReport+0x3c>
	{
		LoggingInterval500MS_SRAM = ReportParams->LogInterval500MS;
     1bc:	70 93 e1 03 	sts	0x03E1, r23
     1c0:	60 93 e0 03 	sts	0x03E0, r22
		eeprom_update_word(&LoggingInterval500MS_EEPROM, LoggingInterval500MS_SRAM);
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <__eeupd_word_usb1287>
	}

	if (Sensor1Correction_SRAM != ReportParams->Sensor1Correction)
     1cc:	68 85       	ldd	r22, Y+8	; 0x08
     1ce:	80 91 6f 06 	lds	r24, 0x066F
     1d2:	99 27       	eor	r25, r25
     1d4:	87 fd       	sbrc	r24, 7
     1d6:	90 95       	com	r25
     1d8:	26 2f       	mov	r18, r22
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	82 17       	cp	r24, r18
     1de:	93 07       	cpc	r25, r19
     1e0:	31 f0       	breq	.+12     	; 0x1ee <CALLBACK_HID_Device_ProcessHIDReport+0x5e>
	{
		Sensor1Correction_SRAM = ReportParams->Sensor1Correction;
     1e2:	60 93 6f 06 	sts	0x066F, r22
		eeprom_update_byte(&Sensor1Correction_EEPROM, Sensor1Correction_SRAM);
     1e6:	8a e1       	ldi	r24, 0x1A	; 26
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	0e 94 03 35 	call	0x6a06	; 0x6a06 <__eeupd_byte_usb1287>
	}

	if (Sensor2Correction_SRAM != ReportParams->Sensor2Correction)
     1ee:	69 85       	ldd	r22, Y+9	; 0x09
     1f0:	80 91 36 06 	lds	r24, 0x0636
     1f4:	99 27       	eor	r25, r25
     1f6:	87 fd       	sbrc	r24, 7
     1f8:	90 95       	com	r25
     1fa:	26 2f       	mov	r18, r22
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	82 17       	cp	r24, r18
     200:	93 07       	cpc	r25, r19
     202:	31 f0       	breq	.+12     	; 0x210 <CALLBACK_HID_Device_ProcessHIDReport+0x80>
	{
		Sensor2Correction_SRAM = ReportParams->Sensor2Correction;
     204:	60 93 36 06 	sts	0x0636, r22
		eeprom_update_byte(&Sensor2Correction_EEPROM, Sensor2Correction_SRAM);
     208:	8b e1       	ldi	r24, 0x1B	; 27
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 03 35 	call	0x6a06	; 0x6a06 <__eeupd_byte_usb1287>
	}

	if (Sensor3Correction_SRAM != ReportParams->Sensor3Correction)
     210:	6a 85       	ldd	r22, Y+10	; 0x0a
     212:	80 91 28 06 	lds	r24, 0x0628
     216:	99 27       	eor	r25, r25
     218:	87 fd       	sbrc	r24, 7
     21a:	90 95       	com	r25
     21c:	26 2f       	mov	r18, r22
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	82 17       	cp	r24, r18
     222:	93 07       	cpc	r25, r19
     224:	31 f0       	breq	.+12     	; 0x232 <CALLBACK_HID_Device_ProcessHIDReport+0xa2>
	{
		Sensor3Correction_SRAM = ReportParams->Sensor3Correction;
     226:	60 93 28 06 	sts	0x0628, r22
		eeprom_update_byte(&Sensor3Correction_EEPROM, Sensor3Correction_SRAM);
     22a:	8c e1       	ldi	r24, 0x1C	; 28
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	0e 94 03 35 	call	0x6a06	; 0x6a06 <__eeupd_byte_usb1287>
	}

	if (DaysLeft_SRAM  != ReportParams->DaysLeft)
     232:	69 a5       	ldd	r22, Y+41	; 0x29
     234:	7a a5       	ldd	r23, Y+42	; 0x2a
     236:	80 91 67 06 	lds	r24, 0x0667
     23a:	90 91 68 06 	lds	r25, 0x0668
     23e:	86 17       	cp	r24, r22
     240:	97 07       	cpc	r25, r23
     242:	41 f0       	breq	.+16     	; 0x254 <CALLBACK_HID_Device_ProcessHIDReport+0xc4>
	{
		DaysLeft_SRAM  = ReportParams->DaysLeft;
     244:	70 93 68 06 	sts	0x0668, r23
     248:	60 93 67 06 	sts	0x0667, r22
		eeprom_update_word(&DaysLeft_EEPROM, DaysLeft_SRAM);
     24c:	8d e1       	ldi	r24, 0x1D	; 29
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <__eeupd_word_usb1287>
	}


    lcd_clear();
     254:	0e 94 a7 24 	call	0x494e	; 0x494e <lcd_clear>

    memcpy (Sensor1Name_SRAM, ReportParams->Sensor1Name, 8);
     258:	a5 ee       	ldi	r26, 0xE5	; 229
     25a:	b3 e0       	ldi	r27, 0x03	; 3
     25c:	fe 01       	movw	r30, r28
     25e:	3d 96       	adiw	r30, 0x0d	; 13
     260:	88 e0       	ldi	r24, 0x08	; 8
     262:	01 90       	ld	r0, Z+
     264:	0d 92       	st	X+, r0
     266:	81 50       	subi	r24, 0x01	; 1
     268:	e1 f7       	brne	.-8      	; 0x262 <CALLBACK_HID_Device_ProcessHIDReport+0xd2>
    eeprom_update_block(&Sensor1Name_SRAM, &Sensor1Name_EEPROM, 8);
     26a:	85 ee       	ldi	r24, 0xE5	; 229
     26c:	93 e0       	ldi	r25, 0x03	; 3
     26e:	62 e0       	ldi	r22, 0x02	; 2
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	48 e0       	ldi	r20, 0x08	; 8
     274:	50 e0       	ldi	r21, 0x00	; 0
     276:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__eeupd_block_usb1287>
    lcd_print_str(Sensor1Name_SRAM);
     27a:	85 ee       	ldi	r24, 0xE5	; 229
     27c:	93 e0       	ldi	r25, 0x03	; 3
     27e:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>

    if (LCD_MODUL==4)
    {
        memcpy (Sensor2Name_SRAM, ReportParams->Sensor2Name, 8);
     282:	af e1       	ldi	r26, 0x1F	; 31
     284:	b6 e0       	ldi	r27, 0x06	; 6
     286:	fe 01       	movw	r30, r28
     288:	75 96       	adiw	r30, 0x15	; 21
     28a:	88 e0       	ldi	r24, 0x08	; 8
     28c:	01 90       	ld	r0, Z+
     28e:	0d 92       	st	X+, r0
     290:	81 50       	subi	r24, 0x01	; 1
     292:	e1 f7       	brne	.-8      	; 0x28c <CALLBACK_HID_Device_ProcessHIDReport+0xfc>
        eeprom_update_block(&Sensor2Name_SRAM, &Sensor2Name_EEPROM, 8);
     294:	8f e1       	ldi	r24, 0x1F	; 31
     296:	96 e0       	ldi	r25, 0x06	; 6
     298:	6a e0       	ldi	r22, 0x0A	; 10
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	48 e0       	ldi	r20, 0x08	; 8
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__eeupd_block_usb1287>
        lcd_pos(2,1);
     2a4:	82 e0       	ldi	r24, 0x02	; 2
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	61 e0       	ldi	r22, 0x01	; 1
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
        lcd_print_str(Sensor2Name_SRAM);
     2b0:	8f e1       	ldi	r24, 0x1F	; 31
     2b2:	96 e0       	ldi	r25, 0x06	; 6
     2b4:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>

        memcpy (Sensor3Name_SRAM, ReportParams->Sensor3Name, 8);
     2b8:	ad e2       	ldi	r26, 0x2D	; 45
     2ba:	b6 e0       	ldi	r27, 0x06	; 6
     2bc:	fe 01       	movw	r30, r28
     2be:	7d 96       	adiw	r30, 0x1d	; 29
     2c0:	88 e0       	ldi	r24, 0x08	; 8
     2c2:	01 90       	ld	r0, Z+
     2c4:	0d 92       	st	X+, r0
     2c6:	81 50       	subi	r24, 0x01	; 1
     2c8:	e1 f7       	brne	.-8      	; 0x2c2 <CALLBACK_HID_Device_ProcessHIDReport+0x132>
        eeprom_update_block(&Sensor3Name_SRAM, &Sensor3Name_EEPROM, 8);
     2ca:	8d e2       	ldi	r24, 0x2D	; 45
     2cc:	96 e0       	ldi	r25, 0x06	; 6
     2ce:	62 e1       	ldi	r22, 0x12	; 18
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	48 e0       	ldi	r20, 0x08	; 8
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <__eeupd_block_usb1287>
        lcd_pos(3,1);
     2da:	83 e0       	ldi	r24, 0x03	; 3
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	61 e0       	ldi	r22, 0x01	; 1
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
        lcd_print_str(Sensor3Name_SRAM);
     2e6:	8d e2       	ldi	r24, 0x2D	; 45
     2e8:	96 e0       	ldi	r25, 0x06	; 6
     2ea:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>
    }

    lcd_pos(LCD_MODUL, 1);
     2ee:	84 e0       	ldi	r24, 0x04	; 4
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	61 e0       	ldi	r22, 0x01	; 1
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
    lcd_print_str("Config new...");
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	91 e0       	ldi	r25, 0x01	; 1
     2fe:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>
}
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	08 95       	ret

00000308 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     308:	ef 92       	push	r14
     30a:	ff 92       	push	r15
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	df 93       	push	r29
     312:	cf 93       	push	r28
     314:	00 d0       	rcall	.+0      	; 0x316 <CALLBACK_HID_Device_CreateHIDReport+0xe>
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	78 01       	movw	r14, r16
	Device_Report_t* ReportParams = (Device_Report_t*)ReportData;
     31c:	89 01       	movw	r16, r18
	int8_t Temperature=0;
     31e:	19 82       	std	Y+1, r1	; 0x01
    uint8_t Humidity=0;
     320:	1a 82       	std	Y+2, r1	; 0x02

	DS1307_GetDate(&ReportParams->Day,  &ReportParams->Month,  &ReportParams->Year);
     322:	b9 01       	movw	r22, r18
     324:	6f 5f       	subi	r22, 0xFF	; 255
     326:	7f 4f       	sbci	r23, 0xFF	; 255
     328:	a9 01       	movw	r20, r18
     32a:	4e 5f       	subi	r20, 0xFE	; 254
     32c:	5f 4f       	sbci	r21, 0xFF	; 255
     32e:	c9 01       	movw	r24, r18
     330:	0e 94 38 11 	call	0x2270	; 0x2270 <DS1307_GetDate>
	DS1307_GetTime(&ReportParams->Hour, &ReportParams->Minute, &ReportParams->Second);
     334:	b8 01       	movw	r22, r16
     336:	6c 5f       	subi	r22, 0xFC	; 252
     338:	7f 4f       	sbci	r23, 0xFF	; 255
     33a:	a8 01       	movw	r20, r16
     33c:	4b 5f       	subi	r20, 0xFB	; 251
     33e:	5f 4f       	sbci	r21, 0xFF	; 255
     340:	c8 01       	movw	r24, r16
     342:	03 96       	adiw	r24, 0x03	; 3
     344:	0e 94 9a 10 	call	0x2134	; 0x2134 <DS1307_GetTime>

	ReportParams->LogInterval500MS = LoggingInterval500MS_SRAM;
     348:	80 91 e0 03 	lds	r24, 0x03E0
     34c:	90 91 e1 03 	lds	r25, 0x03E1
     350:	f8 01       	movw	r30, r16
     352:	97 83       	std	Z+7, r25	; 0x07
     354:	86 83       	std	Z+6, r24	; 0x06

	//GetCorrectionValues();

	ReportParams->Sensor1Correction = Sensor1Correction_SRAM;
     356:	80 91 6f 06 	lds	r24, 0x066F
     35a:	80 87       	std	Z+8, r24	; 0x08
	ReportParams->Sensor2Correction = Sensor2Correction_SRAM;
     35c:	80 91 36 06 	lds	r24, 0x0636
     360:	81 87       	std	Z+9, r24	; 0x09
	ReportParams->Sensor3Correction = Sensor3Correction_SRAM;
     362:	80 91 28 06 	lds	r24, 0x0628
     366:	82 87       	std	Z+10, r24	; 0x0a

    //Temperature = Temperature_GetTemperature();   // if use of local NTC
    HYT321_GetData(&Humidity, &Temperature);
     368:	ce 01       	movw	r24, r28
     36a:	02 96       	adiw	r24, 0x02	; 2
     36c:	be 01       	movw	r22, r28
     36e:	6f 5f       	subi	r22, 0xFF	; 255
     370:	7f 4f       	sbci	r23, 0xFF	; 255
     372:	0e 94 47 28 	call	0x508e	; 0x508e <HYT321_GetData>

	ReportParams->Sensor1Temperature = Temperature+Sensor1Correction_SRAM;
     376:	80 91 6f 06 	lds	r24, 0x066F
     37a:	99 81       	ldd	r25, Y+1	; 0x01
     37c:	89 0f       	add	r24, r25
     37e:	f8 01       	movw	r30, r16
     380:	83 87       	std	Z+11, r24	; 0x0b
	ReportParams->Sensor1Humidity = Humidity;
     382:	8a 81       	ldd	r24, Y+2	; 0x02
     384:	84 87       	std	Z+12, r24	; 0x0c

	ReportParams->FreeMemory = FreeMemory;
     386:	80 91 29 06 	lds	r24, 0x0629
     38a:	90 91 2a 06 	lds	r25, 0x062A
     38e:	a0 91 2b 06 	lds	r26, 0x062B
     392:	b0 91 2c 06 	lds	r27, 0x062C
     396:	85 a3       	std	Z+37, r24	; 0x25
     398:	96 a3       	std	Z+38, r25	; 0x26
     39a:	a7 a3       	std	Z+39, r26	; 0x27
     39c:	b0 a7       	std	Z+40, r27	; 0x28

    memcpy (ReportParams->Sensor1Name, Sensor1Name_SRAM, 8);
     39e:	d8 01       	movw	r26, r16
     3a0:	1d 96       	adiw	r26, 0x0d	; 13
     3a2:	e5 ee       	ldi	r30, 0xE5	; 229
     3a4:	f3 e0       	ldi	r31, 0x03	; 3
     3a6:	88 e0       	ldi	r24, 0x08	; 8
     3a8:	01 90       	ld	r0, Z+
     3aa:	0d 92       	st	X+, r0
     3ac:	81 50       	subi	r24, 0x01	; 1
     3ae:	e1 f7       	brne	.-8      	; 0x3a8 <CALLBACK_HID_Device_CreateHIDReport+0xa0>
    memcpy (ReportParams->Sensor2Name, Sensor2Name_SRAM, 8);
     3b0:	d8 01       	movw	r26, r16
     3b2:	55 96       	adiw	r26, 0x15	; 21
     3b4:	ef e1       	ldi	r30, 0x1F	; 31
     3b6:	f6 e0       	ldi	r31, 0x06	; 6
     3b8:	88 e0       	ldi	r24, 0x08	; 8
     3ba:	01 90       	ld	r0, Z+
     3bc:	0d 92       	st	X+, r0
     3be:	81 50       	subi	r24, 0x01	; 1
     3c0:	e1 f7       	brne	.-8      	; 0x3ba <CALLBACK_HID_Device_CreateHIDReport+0xb2>
    memcpy (ReportParams->Sensor3Name, Sensor3Name_SRAM, 8);
     3c2:	d8 01       	movw	r26, r16
     3c4:	5d 96       	adiw	r26, 0x1d	; 29
     3c6:	ed e2       	ldi	r30, 0x2D	; 45
     3c8:	f6 e0       	ldi	r31, 0x06	; 6
     3ca:	88 e0       	ldi	r24, 0x08	; 8
     3cc:	01 90       	ld	r0, Z+
     3ce:	0d 92       	st	X+, r0
     3d0:	81 50       	subi	r24, 0x01	; 1
     3d2:	e1 f7       	brne	.-8      	; 0x3cc <CALLBACK_HID_Device_CreateHIDReport+0xc4>

	*ReportSize = sizeof(Device_Report_t);
     3d4:	8b e2       	ldi	r24, 0x2B	; 43
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	f7 01       	movw	r30, r14
     3da:	91 83       	std	Z+1, r25	; 0x01
     3dc:	80 83       	st	Z, r24
	return true;
}
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
     3e4:	cf 91       	pop	r28
     3e6:	df 91       	pop	r29
     3e8:	1f 91       	pop	r17
     3ea:	0f 91       	pop	r16
     3ec:	ff 90       	pop	r15
     3ee:	ef 90       	pop	r14
     3f0:	08 95       	ret

000003f2 <CALLBACK_MS_Device_SCSICommandReceived>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     3f2:	2b b1       	in	r18, 0x0b	; 11
     3f4:	2f 70       	andi	r18, 0x0F	; 15
     3f6:	20 62       	ori	r18, 0x20	; 32
     3f8:	2b b9       	out	0x0b, r18	; 11
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     3fa:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <SCSI_DecodeSCSICommand>
     3fe:	9b b1       	in	r25, 0x0b	; 11
     400:	9f 70       	andi	r25, 0x0F	; 15
     402:	90 66       	ori	r25, 0x60	; 96
     404:	9b b9       	out	0x0b, r25	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_READY);

	return CommandSuccess;
}
     406:	08 95       	ret

00000408 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	93 e0       	ldi	r25, 0x03	; 3
     40c:	0e 94 57 31 	call	0x62ae	; 0x62ae <MS_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
     410:	87 e3       	ldi	r24, 0x37	; 55
     412:	93 e0       	ldi	r25, 0x03	; 3
     414:	0c 94 fb 2e 	jmp	0x5df6	; 0x5df6 <HID_Device_ProcessControlRequest>

00000418 <EVENT_USB_Device_Suspend>:

}

void EVENT_USB_Device_Suspend(void)
{
    USB_ResetInterface();
     418:	0c 94 6e 29 	jmp	0x52dc	; 0x52dc <USB_ResetInterface>
}
     41c:	08 95       	ret

0000041e <EVENT_USB_Device_ConfigurationChanged>:
	OpenLogFile();
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     41e:	0f 93       	push	r16
     420:	1f 93       	push	r17
	bool ConfigSuccess = true;

	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	93 e0       	ldi	r25, 0x03	; 3
     426:	0e 94 1b 31 	call	0x6236	; 0x6236 <MS_Device_ConfigureEndpoints>
     42a:	08 2f       	mov	r16, r24
	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
     42c:	87 e3       	ldi	r24, 0x37	; 55
     42e:	93 e0       	ldi	r25, 0x03	; 3
     430:	0e 94 c3 2e 	call	0x5d86	; 0x5d86 <HID_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     434:	10 e0       	ldi	r17, 0x00	; 0
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	08 23       	and	r16, r24
     43a:	19 23       	and	r17, r25
     43c:	00 ff       	sbrs	r16, 0
     43e:	02 c0       	rjmp	.+4      	; 0x444 <EVENT_USB_Device_ConfigurationChanged+0x26>
     440:	90 e6       	ldi	r25, 0x60	; 96
     442:	01 c0       	rjmp	.+2      	; 0x446 <EVENT_USB_Device_ConfigurationChanged+0x28>
     444:	90 e9       	ldi	r25, 0x90	; 144
     446:	8b b1       	in	r24, 0x0b	; 11
     448:	8f 70       	andi	r24, 0x0F	; 15
     44a:	98 2b       	or	r25, r24
     44c:	9b b9       	out	0x0b, r25	; 11

}
     44e:	1f 91       	pop	r17
     450:	0f 91       	pop	r16
     452:	08 95       	ret

00000454 <GetCorrectionValues>:
}

void GetCorrectionValues (void)
{
	/*	Fetch sensor names from EEPROM if not to USB connected*/
	eeprom_read_block(&Sensor1Name_SRAM,&Sensor1Name_EEPROM,8);
     454:	85 ee       	ldi	r24, 0xE5	; 229
     456:	93 e0       	ldi	r25, 0x03	; 3
     458:	62 e0       	ldi	r22, 0x02	; 2
     45a:	70 e0       	ldi	r23, 0x00	; 0
     45c:	48 e0       	ldi	r20, 0x08	; 8
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__eerd_block_usb1287>
	if (Sensor1Name_SRAM[0] == 0xFF) sprintf(Sensor1Name_SRAM, DEFAULT_SENSOR1_NAME);
     464:	80 91 e5 03 	lds	r24, 0x03E5
     468:	8f 3f       	cpi	r24, 0xFF	; 255
     46a:	31 f4       	brne	.+12     	; 0x478 <GetCorrectionValues+0x24>
     46c:	85 ee       	ldi	r24, 0xE5	; 229
     46e:	93 e0       	ldi	r25, 0x03	; 3
     470:	6e e0       	ldi	r22, 0x0E	; 14
     472:	71 e0       	ldi	r23, 0x01	; 1
     474:	0e 94 9f 32 	call	0x653e	; 0x653e <strcpy>

	eeprom_read_block(&Sensor2Name_SRAM,&Sensor2Name_EEPROM,8);
     478:	8f e1       	ldi	r24, 0x1F	; 31
     47a:	96 e0       	ldi	r25, 0x06	; 6
     47c:	6a e0       	ldi	r22, 0x0A	; 10
     47e:	70 e0       	ldi	r23, 0x00	; 0
     480:	48 e0       	ldi	r20, 0x08	; 8
     482:	50 e0       	ldi	r21, 0x00	; 0
     484:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__eerd_block_usb1287>
	if (Sensor2Name_SRAM[0] == 0xFF) sprintf(Sensor2Name_SRAM, DEFAULT_SENSOR2_NAME);
     488:	80 91 1f 06 	lds	r24, 0x061F
     48c:	8f 3f       	cpi	r24, 0xFF	; 255
     48e:	31 f4       	brne	.+12     	; 0x49c <GetCorrectionValues+0x48>
     490:	8f e1       	ldi	r24, 0x1F	; 31
     492:	96 e0       	ldi	r25, 0x06	; 6
     494:	67 e1       	ldi	r22, 0x17	; 23
     496:	71 e0       	ldi	r23, 0x01	; 1
     498:	0e 94 9f 32 	call	0x653e	; 0x653e <strcpy>

	eeprom_read_block(&Sensor3Name_SRAM,&Sensor3Name_EEPROM,8);
     49c:	8d e2       	ldi	r24, 0x2D	; 45
     49e:	96 e0       	ldi	r25, 0x06	; 6
     4a0:	62 e1       	ldi	r22, 0x12	; 18
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	48 e0       	ldi	r20, 0x08	; 8
     4a6:	50 e0       	ldi	r21, 0x00	; 0
     4a8:	0e 94 d7 34 	call	0x69ae	; 0x69ae <__eerd_block_usb1287>
	if (Sensor3Name_SRAM[0] == 0xFF) sprintf(Sensor3Name_SRAM, DEFAULT_SENSOR3_NAME);
     4ac:	80 91 2d 06 	lds	r24, 0x062D
     4b0:	8f 3f       	cpi	r24, 0xFF	; 255
     4b2:	31 f4       	brne	.+12     	; 0x4c0 <GetCorrectionValues+0x6c>
     4b4:	8d e2       	ldi	r24, 0x2D	; 45
     4b6:	96 e0       	ldi	r25, 0x06	; 6
     4b8:	60 e2       	ldi	r22, 0x20	; 32
     4ba:	71 e0       	ldi	r23, 0x01	; 1
     4bc:	0e 94 9f 32 	call	0x653e	; 0x653e <strcpy>

	/* Fetch correction values from EEPROM */
	Sensor1Correction_SRAM = eeprom_read_byte(&Sensor1Correction_EEPROM);
     4c0:	8a e1       	ldi	r24, 0x1A	; 26
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 e7 34 	call	0x69ce	; 0x69ce <__eerd_byte_usb1287>
     4c8:	80 93 6f 06 	sts	0x066F, r24
	Sensor2Correction_SRAM = eeprom_read_byte(&Sensor2Correction_EEPROM);
     4cc:	8b e1       	ldi	r24, 0x1B	; 27
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 e7 34 	call	0x69ce	; 0x69ce <__eerd_byte_usb1287>
     4d4:	80 93 36 06 	sts	0x0636, r24
	Sensor3Correction_SRAM = eeprom_read_byte(&Sensor3Correction_EEPROM);
     4d8:	8c e1       	ldi	r24, 0x1C	; 28
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 e7 34 	call	0x69ce	; 0x69ce <__eerd_byte_usb1287>
     4e0:	80 93 28 06 	sts	0x0628, r24
	if (Sensor1Correction_SRAM == 0xFF) Sensor1Correction_SRAM = 0;
	if (Sensor2Correction_SRAM == 0xFF) Sensor2Correction_SRAM = 0;
	if (Sensor3Correction_SRAM == 0xFF) Sensor3Correction_SRAM = 0;

	/* Fetch days left from EEPROM */
	DaysLeft_SRAM = eeprom_read_word(&DaysLeft_EEPROM);
     4e4:	8d e1       	ldi	r24, 0x1D	; 29
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 ef 34 	call	0x69de	; 0x69de <__eerd_word_usb1287>
     4ec:	90 93 68 06 	sts	0x0668, r25
     4f0:	80 93 67 06 	sts	0x0667, r24
	if (DaysLeft_SRAM == 0xFFFF) DaysLeft_SRAM = 50;
     4f4:	8f 5f       	subi	r24, 0xFF	; 255
     4f6:	9f 4f       	sbci	r25, 0xFF	; 255
     4f8:	31 f4       	brne	.+12     	; 0x506 <GetCorrectionValues+0xb2>
     4fa:	82 e3       	ldi	r24, 0x32	; 50
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	90 93 68 06 	sts	0x0668, r25
     502:	80 93 67 06 	sts	0x0667, r24
     506:	08 95       	ret

00000508 <SetupHardware>:

}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
     508:	af 92       	push	r10
     50a:	bf 92       	push	r11
     50c:	cf 92       	push	r12
     50e:	df 92       	push	r13
     510:	ef 92       	push	r14
     512:	ff 92       	push	r15
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	df 93       	push	r29
     51a:	cf 93       	push	r28
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	62 97       	sbiw	r28, 0x12	; 18
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     52c:	84 b7       	in	r24, 0x34	; 52
     52e:	87 7f       	andi	r24, 0xF7	; 247
     530:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     532:	88 e1       	ldi	r24, 0x18	; 24
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	f8 94       	cli
     538:	80 93 60 00 	sts	0x0060, r24
     53c:	10 92 60 00 	sts	0x0060, r1
     540:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	20 e8       	ldi	r18, 0x80	; 128
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	20 93 61 00 	sts	0x0061, r18
     550:	80 93 61 00 	sts	0x0061, r24
     554:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     556:	8a b1       	in	r24, 0x0a	; 10
     558:	80 6f       	ori	r24, 0xF0	; 240
     55a:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     55c:	8b b1       	in	r24, 0x0b	; 11
     55e:	8f 70       	andi	r24, 0x0F	; 15
     560:	8b b9       	out	0x0b, r24	; 11
			 *  \param[in] SPIOptions  SPI Options, a mask consisting of one of each of the SPI_SPEED_*,
			 *                         SPI_SCK_*, SPI_SAMPLE_*, SPI_ORDER_* and SPI_MODE_* masks.
			 */
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				DDRB  |=  ((1 << 1) | (1 << 2));
     562:	84 b1       	in	r24, 0x04	; 4
     564:	86 60       	ori	r24, 0x06	; 6
     566:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~((1 << 0) | (1 << 3));
     568:	84 b1       	in	r24, 0x04	; 4
     56a:	86 7f       	andi	r24, 0xF6	; 246
     56c:	84 b9       	out	0x04, r24	; 4
				PORTB |=  ((1 << 0) | (1 << 3));
     56e:	85 b1       	in	r24, 0x05	; 5
     570:	89 60       	ori	r24, 0x09	; 9
     572:	85 b9       	out	0x05, r24	; 5

				SPCR   = ((1 << SPE) | SPIOptions);
     574:	8c e5       	ldi	r24, 0x5C	; 92
     576:	8c bd       	out	0x2c, r24	; 44

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     578:	8d b5       	in	r24, 0x2d	; 45
     57a:	81 60       	ori	r24, 0x01	; 1
     57c:	8d bd       	out	0x2d, r24	; 45
			/** Initialises the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The AVR's SPI driver MUST be initialized before any of the dataflash commands are used.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     57e:	8d b1       	in	r24, 0x0d	; 13
     580:	83 60       	ori	r24, 0x03	; 3
     582:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     584:	8e b1       	in	r24, 0x0e	; 14
     586:	83 60       	ori	r24, 0x03	; 3
     588:	8e b9       	out	0x0e, r24	; 14
			 *  before any other TWI operations.
			 */
			static inline void TWI_Init(void) ATTR_ALWAYS_INLINE;
			static inline void TWI_Init(void)
			{
				TWCR |=  (1 << TWEN);
     58a:	80 91 bc 00 	lds	r24, 0x00BC
     58e:	84 60       	ori	r24, 0x04	; 4
     590:	80 93 bc 00 	sts	0x00BC, r24
	//Temperature_Init();     // if use of local NTC on AT90USBKey
	Dataflash_Init();
	//Serial_Init(9600, 0);   // initialize uart

	TWI_Init();
	lcd_init();
     594:	0e 94 bc 24 	call	0x4978	; 0x4978 <lcd_init>
	GetCorrectionValues();
     598:	5d df       	rcall	.-326    	; 0x454 <GetCorrectionValues>

	MAX_Port_DDR &= MAX_DataInput;      //connection of max/min switch
     59a:	25 98       	cbi	0x04, 5	; 4
	MAX_Port_Write |= (1<<MAXSWITCH);
     59c:	2d 9a       	sbi	0x05, 5	; 5

    POWER_ENABLE_Port_Write &= ~(1<<POWER_ENABLE);      //disable Wiznet module
     59e:	2c 98       	cbi	0x05, 4	; 5
    POWER_ENABLE_Port_DDR |= POWER_ENABLE_DataOutput;
     5a0:	24 9a       	sbi	0x04, 4	; 4

	DDRE |= 0x80;                       //disable UVCON - Q1 at AT90USBKey Board
     5a2:	6f 9a       	sbi	0x0d, 7	; 13
	PORTE &= 0x7F;
     5a4:	77 98       	cbi	0x0e, 7	; 14

	LOCAL_Port_DDR &= LOCAL_DataInput;  //determine if connect to usb
     5a6:	3f 98       	cbi	0x07, 7	; 7
    if ((LOCAL_Port_Read & (1<<LOCAL))) USB_Init();  // init USB only if connected to pc
     5a8:	37 9b       	sbis	0x06, 7	; 6
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <SetupHardware+0xa8>
     5ac:	0e 94 bb 29 	call	0x5376	; 0x5376 <USB_Init>

	/* Fetch logging interval from EEPROM */
	LoggingInterval500MS_SRAM = eeprom_read_word(&LoggingInterval500MS_EEPROM);
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 ef 34 	call	0x69de	; 0x69de <__eerd_word_usb1287>
     5b8:	90 93 e1 03 	sts	0x03E1, r25
     5bc:	80 93 e0 03 	sts	0x03E0, r24

	/* Check if the logging interval is invalid (0xFF) indicating that the EEPROM is blank */
	if (LoggingInterval500MS_SRAM == 0xFF) LoggingInterval500MS_SRAM = DEFAULT_LOG_INTERVAL;
     5c0:	8f 3f       	cpi	r24, 0xFF	; 255
     5c2:	91 05       	cpc	r25, r1
     5c4:	31 f4       	brne	.+12     	; 0x5d2 <SetupHardware+0xca>
     5c6:	84 e1       	ldi	r24, 0x14	; 20
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	90 93 e1 03 	sts	0x03E1, r25
     5ce:	80 93 e0 03 	sts	0x03E0, r24


	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
     5d2:	0e 94 0e 0c 	call	0x181c	; 0x181c <DataflashManager_ResetDataflashProtections>

	/* Only if not connected to pc usb interface */
	if (!(LOCAL_Port_Read & (1<<LOCAL)))
     5d6:	37 99       	sbic	0x06, 7	; 6
     5d8:	df c0       	rjmp	.+446    	; 0x798 <SetupHardware+0x290>
	{
		char LineBuffer[16];
		int8_t Temperature=0;
     5da:	19 82       	std	Y+1, r1	; 0x01
        uint8_t Humidity=0;
     5dc:	1a 82       	std	Y+2, r1	; 0x02

       	lcd_print_str("Datalogger V1.1");
     5de:	89 e2       	ldi	r24, 0x29	; 41
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>
		lcd_pos (2,1);
     5e6:	82 e0       	ldi	r24, 0x02	; 2
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	61 e0       	ldi	r22, 0x01	; 1
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
		lcd_print_str("Kai Riedel, 2013");
     5f2:	89 e3       	ldi	r24, 0x39	; 57
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>

        if (LCD_MODUL==4)
        {
            lcd_pos(3,1);
     5fa:	83 e0       	ldi	r24, 0x03	; 3
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	61 e0       	ldi	r22, 0x01	; 1
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
            sprintf (LineBuffer, "Days: %d", DaysLeft_SRAM);
     606:	00 d0       	rcall	.+0      	; 0x608 <SetupHardware+0x100>
     608:	00 d0       	rcall	.+0      	; 0x60a <SetupHardware+0x102>
     60a:	00 d0       	rcall	.+0      	; 0x60c <SetupHardware+0x104>
     60c:	ed b7       	in	r30, 0x3d	; 61
     60e:	fe b7       	in	r31, 0x3e	; 62
     610:	31 96       	adiw	r30, 0x01	; 1
     612:	8e 01       	movw	r16, r28
     614:	0d 5f       	subi	r16, 0xFD	; 253
     616:	1f 4f       	sbci	r17, 0xFF	; 255
     618:	ad b7       	in	r26, 0x3d	; 61
     61a:	be b7       	in	r27, 0x3e	; 62
     61c:	12 96       	adiw	r26, 0x02	; 2
     61e:	1c 93       	st	X, r17
     620:	0e 93       	st	-X, r16
     622:	11 97       	sbiw	r26, 0x01	; 1
     624:	8a e4       	ldi	r24, 0x4A	; 74
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	93 83       	std	Z+3, r25	; 0x03
     62a:	82 83       	std	Z+2, r24	; 0x02
     62c:	80 91 67 06 	lds	r24, 0x0667
     630:	90 91 68 06 	lds	r25, 0x0668
     634:	95 83       	std	Z+5, r25	; 0x05
     636:	84 83       	std	Z+4, r24	; 0x04
     638:	0e 94 ae 32 	call	0x655c	; 0x655c <sprintf>
            lcd_print_str(LineBuffer);
     63c:	8d b7       	in	r24, 0x3d	; 61
     63e:	9e b7       	in	r25, 0x3e	; 62
     640:	06 96       	adiw	r24, 0x06	; 6
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
     646:	9e bf       	out	0x3e, r25	; 62
     648:	0f be       	out	0x3f, r0	; 63
     64a:	8d bf       	out	0x3d, r24	; 61
     64c:	c8 01       	movw	r24, r16
     64e:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>

            lcd_pos(4,1);
     652:	84 e0       	ldi	r24, 0x04	; 4
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	61 e0       	ldi	r22, 0x01	; 1
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
            sprintf (LineBuffer, "Interval: %ds", LoggingInterval500MS_SRAM/2);
     65e:	00 d0       	rcall	.+0      	; 0x660 <SetupHardware+0x158>
     660:	00 d0       	rcall	.+0      	; 0x662 <SetupHardware+0x15a>
     662:	00 d0       	rcall	.+0      	; 0x664 <SetupHardware+0x15c>
     664:	ed b7       	in	r30, 0x3d	; 61
     666:	fe b7       	in	r31, 0x3e	; 62
     668:	31 96       	adiw	r30, 0x01	; 1
     66a:	ad b7       	in	r26, 0x3d	; 61
     66c:	be b7       	in	r27, 0x3e	; 62
     66e:	12 96       	adiw	r26, 0x02	; 2
     670:	1c 93       	st	X, r17
     672:	0e 93       	st	-X, r16
     674:	11 97       	sbiw	r26, 0x01	; 1
     676:	83 e5       	ldi	r24, 0x53	; 83
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	93 83       	std	Z+3, r25	; 0x03
     67c:	82 83       	std	Z+2, r24	; 0x02
     67e:	80 91 e0 03 	lds	r24, 0x03E0
     682:	90 91 e1 03 	lds	r25, 0x03E1
     686:	96 95       	lsr	r25
     688:	87 95       	ror	r24
     68a:	95 83       	std	Z+5, r25	; 0x05
     68c:	84 83       	std	Z+4, r24	; 0x04
     68e:	0e 94 ae 32 	call	0x655c	; 0x655c <sprintf>
            lcd_print_str(LineBuffer);
     692:	8d b7       	in	r24, 0x3d	; 61
     694:	9e b7       	in	r25, 0x3e	; 62
     696:	06 96       	adiw	r24, 0x06	; 6
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	9e bf       	out	0x3e, r25	; 62
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	8d bf       	out	0x3d, r24	; 61
     6a2:	c8 01       	movw	r24, r16
     6a4:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>
     6a8:	88 e9       	ldi	r24, 0x98	; 152
     6aa:	9a e3       	ldi	r25, 0x3A	; 58
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6ac:	28 ec       	ldi	r18, 0xC8	; 200
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	f9 01       	movw	r30, r18
     6b2:	31 97       	sbiw	r30, 0x01	; 1
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <SetupHardware+0x1aa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6b8:	d9 f7       	brne	.-10     	; 0x6b0 <SetupHardware+0x1a8>
        }

		_delay_ms(1500);

		lcd_clear();
     6ba:	0e 94 a7 24 	call	0x494e	; 0x494e <lcd_clear>
		lcd_print_str(Sensor1Name_SRAM);
     6be:	85 ee       	ldi	r24, 0xE5	; 229
     6c0:	93 e0       	ldi	r25, 0x03	; 3
     6c2:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>

		//Temperature = Temperature_GetTemperature()+Sensor1Correction_SRAM; // if use of local NTC

		HYT321_GetData(&Humidity, &Temperature);
     6c6:	ce 01       	movw	r24, r28
     6c8:	02 96       	adiw	r24, 0x02	; 2
     6ca:	be 01       	movw	r22, r28
     6cc:	6f 5f       	subi	r22, 0xFF	; 255
     6ce:	7f 4f       	sbci	r23, 0xFF	; 255
     6d0:	0e 94 47 28 	call	0x508e	; 0x508e <HYT321_GetData>
            lcd_print_value (Humidity, "% ", '/', 1, 13, 2, 0);
        }

        if (LCD_MODUL==4)
        {
            lcd_print_value (Temperature+Sensor1Correction_SRAM, "#C", '+', 1, 10, 2, 0);
     6d4:	60 91 6f 06 	lds	r22, 0x066F
     6d8:	77 27       	eor	r23, r23
     6da:	67 fd       	sbrc	r22, 7
     6dc:	70 95       	com	r23
     6de:	29 81       	ldd	r18, Y+1	; 0x01
     6e0:	33 27       	eor	r19, r19
     6e2:	27 fd       	sbrc	r18, 7
     6e4:	30 95       	com	r19
     6e6:	62 0f       	add	r22, r18
     6e8:	73 1f       	adc	r23, r19
     6ea:	88 27       	eor	r24, r24
     6ec:	77 fd       	sbrc	r23, 7
     6ee:	80 95       	com	r24
     6f0:	98 2f       	mov	r25, r24
     6f2:	41 e6       	ldi	r20, 0x61	; 97
     6f4:	51 e0       	ldi	r21, 0x01	; 1
     6f6:	2b e2       	ldi	r18, 0x2B	; 43
     6f8:	01 e0       	ldi	r16, 0x01	; 1
     6fa:	10 e0       	ldi	r17, 0x00	; 0
     6fc:	fa e0       	ldi	r31, 0x0A	; 10
     6fe:	ef 2e       	mov	r14, r31
     700:	f1 2c       	mov	r15, r1
     702:	e2 e0       	ldi	r30, 0x02	; 2
     704:	ce 2e       	mov	r12, r30
     706:	d1 2c       	mov	r13, r1
     708:	aa 24       	eor	r10, r10
     70a:	bb 24       	eor	r11, r11
     70c:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <lcd_print_value>
            lcd_print_value (Humidity, "% ", '/', 1, 15, 2, 0);
     710:	6a 81       	ldd	r22, Y+2	; 0x02
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	44 e6       	ldi	r20, 0x64	; 100
     71a:	51 e0       	ldi	r21, 0x01	; 1
     71c:	2f e2       	ldi	r18, 0x2F	; 47
     71e:	3f e0       	ldi	r19, 0x0F	; 15
     720:	e3 2e       	mov	r14, r19
     722:	f1 2c       	mov	r15, r1
     724:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <lcd_print_value>

            lcd_pos(2,1);
     728:	82 e0       	ldi	r24, 0x02	; 2
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	61 e0       	ldi	r22, 0x01	; 1
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
            lcd_print_str(Sensor2Name_SRAM);
     734:	8f e1       	ldi	r24, 0x1F	; 31
     736:	96 e0       	ldi	r25, 0x06	; 6
     738:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>
            lcd_pos(2,10);
     73c:	82 e0       	ldi	r24, 0x02	; 2
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	6a e0       	ldi	r22, 0x0A	; 10
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
            lcd_print_str("---#C  ");
     748:	87 e6       	ldi	r24, 0x67	; 103
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>

            lcd_pos(3,1);
     750:	83 e0       	ldi	r24, 0x03	; 3
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
            lcd_print_str(Sensor3Name_SRAM);
     75c:	8d e2       	ldi	r24, 0x2D	; 45
     75e:	96 e0       	ldi	r25, 0x06	; 6
     760:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>
            lcd_pos(3,10);
     764:	83 e0       	ldi	r24, 0x03	; 3
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	6a e0       	ldi	r22, 0x0A	; 10
     76a:	70 e0       	ldi	r23, 0x00	; 0
     76c:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
            lcd_print_str("---#C  ");
     770:	87 e6       	ldi	r24, 0x67	; 103
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>
        }

		RFM12_Init();			// init RFM12 radio modul
     778:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <RFM12_Init>

		Enable_receiver();		// enable radio receiver
     77c:	0e 94 36 28 	call	0x506c	; 0x506c <Enable_receiver>

		/* 500ms logging interval timer configuration */
        OCR1A   = (((F_CPU / 1024) / 2) - 1);
     780:	81 e4       	ldi	r24, 0x41	; 65
     782:	9f e0       	ldi	r25, 0x0F	; 15
     784:	90 93 89 00 	sts	0x0089, r25
     788:	80 93 88 00 	sts	0x0088, r24
        TCCR1B  = (1 << WGM12) | (1 << CS12) | (1 << CS10);
     78c:	8d e0       	ldi	r24, 0x0D	; 13
     78e:	80 93 81 00 	sts	0x0081, r24
        TIMSK1  = (1 << OCIE1A); // enable Timer 1 interrupt
     792:	82 e0       	ldi	r24, 0x02	; 2
     794:	80 93 6f 00 	sts	0x006F, r24
	}
}
     798:	62 96       	adiw	r28, 0x12	; 18
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	de bf       	out	0x3e, r29	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	cd bf       	out	0x3d, r28	; 61
     7a4:	cf 91       	pop	r28
     7a6:	df 91       	pop	r29
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	ff 90       	pop	r15
     7ae:	ef 90       	pop	r14
     7b0:	df 90       	pop	r13
     7b2:	cf 90       	pop	r12
     7b4:	bf 90       	pop	r11
     7b6:	af 90       	pop	r10
     7b8:	08 95       	ret

000007ba <CloseLogFile>:
	}
}

/** Closes the open data log file on the Dataflash's FAT formatted partition */
void CloseLogFile(void)
{
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
	/* Sync any data waiting to be written, unmount the storage device */
	f_sync(&TempLogFile);
     7be:	0c ea       	ldi	r16, 0xAC	; 172
     7c0:	13 e0       	ldi	r17, 0x03	; 3
     7c2:	c8 01       	movw	r24, r16
     7c4:	0e 94 8c 22 	call	0x4518	; 0x4518 <f_sync>
	f_close(&TempLogFile);
     7c8:	c8 01       	movw	r24, r16
     7ca:	0e 94 db 22 	call	0x45b6	; 0x45b6 <f_close>

}
     7ce:	1f 91       	pop	r17
     7d0:	0f 91       	pop	r16
     7d2:	08 95       	ret

000007d4 <EVENT_USB_Device_Connect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     7d4:	8b b1       	in	r24, 0x0b	; 11
     7d6:	8f 70       	andi	r24, 0x0F	; 15
     7d8:	80 6a       	ori	r24, 0xA0	; 160
     7da:	8b b9       	out	0x0b, r24	; 11
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	/* Close the log file so that the host has exclusive filesystem access */
	CloseLogFile();
     7dc:	ee df       	rcall	.-36     	; 0x7ba <CloseLogFile>

	lcd_clear();
     7de:	0e 94 a7 24 	call	0x494e	; 0x494e <lcd_clear>
	lcd_print_str("Connected to PC");
     7e2:	8f e6       	ldi	r24, 0x6F	; 111
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	0c 94 6d 24 	jmp	0x48da	; 0x48da <lcd_print_str>

000007ea <OpenLogFile>:
}


/** Opens the log file on the Dataflash's FAT formatted partition according to the current date */
void OpenLogFile(void)
{
     7ea:	0f 93       	push	r16
     7ec:	1f 93       	push	r17
     7ee:	df 93       	push	r29
     7f0:	cf 93       	push	r28
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
     7f6:	2f 97       	sbiw	r28, 0x0f	; 15
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	f8 94       	cli
     7fc:	de bf       	out	0x3e, r29	; 62
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	cd bf       	out	0x3d, r28	; 61
	char LogFileName[12];

	/* Get the current date for the filename as "X_DDMMYY.txt", X --> Sensor number */
	uint8_t Day, Month, Year;
	DS1307_GetDate(&Day, &Month, &Year);
     802:	ce 01       	movw	r24, r28
     804:	01 96       	adiw	r24, 0x01	; 1
     806:	be 01       	movw	r22, r28
     808:	6e 5f       	subi	r22, 0xFE	; 254
     80a:	7f 4f       	sbci	r23, 0xFF	; 255
     80c:	ae 01       	movw	r20, r28
     80e:	4d 5f       	subi	r20, 0xFD	; 253
     810:	5f 4f       	sbci	r21, 0xFF	; 255
     812:	0e 94 38 11 	call	0x2270	; 0x2270 <DS1307_GetDate>
	oldday=Day;
     816:	29 81       	ldd	r18, Y+1	; 0x01
     818:	20 93 e4 03 	sts	0x03E4, r18
	sprintf(LogFileName, "%02d%02d%02d.txt", Day, Month, Year);
     81c:	8d b7       	in	r24, 0x3d	; 61
     81e:	9e b7       	in	r25, 0x3e	; 62
     820:	0a 97       	sbiw	r24, 0x0a	; 10
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	f8 94       	cli
     826:	9e bf       	out	0x3e, r25	; 62
     828:	0f be       	out	0x3f, r0	; 63
     82a:	8d bf       	out	0x3d, r24	; 61
     82c:	ed b7       	in	r30, 0x3d	; 61
     82e:	fe b7       	in	r31, 0x3e	; 62
     830:	31 96       	adiw	r30, 0x01	; 1
     832:	8e 01       	movw	r16, r28
     834:	0c 5f       	subi	r16, 0xFC	; 252
     836:	1f 4f       	sbci	r17, 0xFF	; 255
     838:	ad b7       	in	r26, 0x3d	; 61
     83a:	be b7       	in	r27, 0x3e	; 62
     83c:	12 96       	adiw	r26, 0x02	; 2
     83e:	1c 93       	st	X, r17
     840:	0e 93       	st	-X, r16
     842:	11 97       	sbiw	r26, 0x01	; 1
     844:	8f e7       	ldi	r24, 0x7F	; 127
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	93 83       	std	Z+3, r25	; 0x03
     84a:	82 83       	std	Z+2, r24	; 0x02
     84c:	24 83       	std	Z+4, r18	; 0x04
     84e:	15 82       	std	Z+5, r1	; 0x05
     850:	8a 81       	ldd	r24, Y+2	; 0x02
     852:	86 83       	std	Z+6, r24	; 0x06
     854:	17 82       	std	Z+7, r1	; 0x07
     856:	8b 81       	ldd	r24, Y+3	; 0x03
     858:	80 87       	std	Z+8, r24	; 0x08
     85a:	11 86       	std	Z+9, r1	; 0x09
     85c:	0e 94 ae 32 	call	0x655c	; 0x655c <sprintf>

	f_mount(0, &DiskFATState);
     860:	8d b7       	in	r24, 0x3d	; 61
     862:	9e b7       	in	r25, 0x3e	; 62
     864:	0a 96       	adiw	r24, 0x0a	; 10
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	f8 94       	cli
     86a:	9e bf       	out	0x3e, r25	; 62
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	8d bf       	out	0x3d, r24	; 61
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	61 ef       	ldi	r22, 0xF1	; 241
     874:	73 e0       	ldi	r23, 0x03	; 3
     876:	0e 94 db 13 	call	0x27b6	; 0x27b6 <f_mount>
	f_open(&TempLogFile, LogFileName, FA_OPEN_ALWAYS | FA_WRITE);
     87a:	8c ea       	ldi	r24, 0xAC	; 172
     87c:	93 e0       	ldi	r25, 0x03	; 3
     87e:	b8 01       	movw	r22, r16
     880:	42 e1       	ldi	r20, 0x12	; 18
     882:	0e 94 e6 22 	call	0x45cc	; 0x45cc <f_open>
	f_lseek(&TempLogFile, TempLogFile.fsize);
     886:	40 91 b6 03 	lds	r20, 0x03B6
     88a:	50 91 b7 03 	lds	r21, 0x03B7
     88e:	60 91 b8 03 	lds	r22, 0x03B8
     892:	70 91 b9 03 	lds	r23, 0x03B9
     896:	8c ea       	ldi	r24, 0xAC	; 172
     898:	93 e0       	ldi	r25, 0x03	; 3
     89a:	0e 94 27 1b 	call	0x364e	; 0x364e <f_lseek>

	if (!(LOCAL_Port_Read & (1<<LOCAL)))
     89e:	37 99       	sbic	0x06, 7	; 6
     8a0:	21 c0       	rjmp	.+66     	; 0x8e4 <OpenLogFile+0xfa>
	{
		LogfileCreateSuccess = true;

		if (DaysLeft_SRAM > 0)
     8a2:	80 91 67 06 	lds	r24, 0x0667
     8a6:	90 91 68 06 	lds	r25, 0x0668
     8aa:	89 2b       	or	r24, r25
     8ac:	21 f0       	breq	.+8      	; 0x8b6 <OpenLogFile+0xcc>
		{
			LogfileCreateSuccess = true;
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	80 93 70 06 	sts	0x0670, r24
     8b4:	1f c0       	rjmp	.+62     	; 0x8f4 <OpenLogFile+0x10a>
		}
		else
		{
			LogfileCreateSuccess = false;
     8b6:	10 92 70 06 	sts	0x0670, r1
			CloseLogFile();
     8ba:	7f df       	rcall	.-258    	; 0x7ba <CloseLogFile>
			lcd_pos(4,1);
     8bc:	84 e0       	ldi	r24, 0x04	; 4
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
			lcd_print_str("Memory full...      ");
     8c8:	80 e9       	ldi	r24, 0x90	; 144
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>
     8d0:	80 e2       	ldi	r24, 0x20	; 32
     8d2:	9e e4       	ldi	r25, 0x4E	; 78
     8d4:	28 ec       	ldi	r18, 0xC8	; 200
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	f9 01       	movw	r30, r18
     8da:	31 97       	sbiw	r30, 0x01	; 1
     8dc:	f1 f7       	brne	.-4      	; 0x8da <OpenLogFile+0xf0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8e0:	d9 f7       	brne	.-10     	; 0x8d8 <OpenLogFile+0xee>
     8e2:	08 c0       	rjmp	.+16     	; 0x8f4 <OpenLogFile+0x10a>
			_delay_ms(2000);
		}
	}
	else
	{
		f_getfree (0, (DWORD*)&FreeMemory,(FATFS**)&DiskFATState);
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	69 e2       	ldi	r22, 0x29	; 41
     8ea:	76 e0       	ldi	r23, 0x06	; 6
     8ec:	41 ef       	ldi	r20, 0xF1	; 241
     8ee:	53 e0       	ldi	r21, 0x03	; 3
     8f0:	0e 94 75 1f 	call	0x3eea	; 0x3eea <f_getfree>
	}
}
     8f4:	2f 96       	adiw	r28, 0x0f	; 15
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	f8 94       	cli
     8fa:	de bf       	out	0x3e, r29	; 62
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	cd bf       	out	0x3d, r28	; 61
     900:	cf 91       	pop	r28
     902:	df 91       	pop	r29
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	08 95       	ret

0000090a <EVENT_USB_Device_Disconnect>:
     90a:	8b b1       	in	r24, 0x0b	; 11
     90c:	8f 70       	andi	r24, 0x0F	; 15
     90e:	80 61       	ori	r24, 0x10	; 16
     910:	8b b9       	out	0x0b, r24	; 11
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);

	/* Mount and open the log file on the Dataflash FAT partition */
	OpenLogFile();
}
     912:	6b cf       	rjmp	.-298    	; 0x7ea <OpenLogFile>

00000914 <RadioReceive>:
	}
}

/** Receive telegram from radio modul*/
void RadioReceive(void)
{
     914:	af 92       	push	r10
     916:	bf 92       	push	r11
     918:	cf 92       	push	r12
     91a:	df 92       	push	r13
     91c:	ef 92       	push	r14
     91e:	ff 92       	push	r15
     920:	0f 93       	push	r16
     922:	1f 93       	push	r17
    cli();                                          // disable all interrupts
     924:	f8 94       	cli
   	DataReceived = (uchar) Spi16(0xb000);           // receiver FIFO read command
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 eb       	ldi	r25, 0xB0	; 176
     92a:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <Spi16>
     92e:	48 2f       	mov	r20, r24
     930:	80 93 ce 03 	sts	0x03CE, r24

	if ((DataReceived == ETX)&rec_started)			// ETX -> end of telegram
     934:	50 91 cd 03 	lds	r21, 0x03CD
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	83 30       	cpi	r24, 0x03	; 3
     93e:	11 f4       	brne	.+4      	; 0x944 <RadioReceive+0x30>
     940:	21 e0       	ldi	r18, 0x01	; 1
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	85 2f       	mov	r24, r21
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	28 23       	and	r18, r24
     94a:	39 23       	and	r19, r25
     94c:	23 2b       	or	r18, r19
     94e:	09 f4       	brne	.+2      	; 0x952 <RadioReceive+0x3e>
     950:	c4 c0       	rjmp	.+392    	; 0xada <RadioReceive+0x1c6>
    {
		bufferposition--;							// array last position (contents checksum)
     952:	80 91 dd 03 	lds	r24, 0x03DD
     956:	81 50       	subi	r24, 0x01	; 1
     958:	80 93 dd 03 	sts	0x03DD, r24
		Checksum -= recbuf[bufferposition];			// correct checksum (the last value in array is the checksum)
     95c:	e8 2f       	mov	r30, r24
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	ee 52       	subi	r30, 0x2E	; 46
     962:	fc 4f       	sbci	r31, 0xFC	; 252
     964:	90 81       	ld	r25, Z
     966:	80 91 dc 03 	lds	r24, 0x03DC
     96a:	89 1b       	sub	r24, r25
     96c:	80 93 dc 03 	sts	0x03DC, r24
		if (Checksum == recbuf[bufferposition]) 	// Checksum OK -> display new value
     970:	89 17       	cp	r24, r25
     972:	09 f0       	breq	.+2      	; 0x976 <RadioReceive+0x62>
     974:	d2 c0       	rjmp	.+420    	; 0xb1a <RadioReceive+0x206>
		{
		   recbuf[bufferposition] = '\0';			// set end of string, delete checksum
     976:	10 82       	st	Z, r1
			if (recbuf[0]=='A')					    // Sensor A
     978:	80 91 d2 03 	lds	r24, 0x03D2
     97c:	81 34       	cpi	r24, 0x41	; 65
     97e:	09 f0       	breq	.+2      	; 0x982 <RadioReceive+0x6e>
     980:	53 c0       	rjmp	.+166    	; 0xa28 <RadioReceive+0x114>
			{
			        Sensor2Value = atoi(&recbuf[1]);		 // convert in integer
     982:	83 ed       	ldi	r24, 0xD3	; 211
     984:	93 e0       	ldi	r25, 0x03	; 3
     986:	0e 94 65 32 	call	0x64ca	; 0x64ca <atoi>
     98a:	98 2f       	mov	r25, r24
			        if (Sensor2Value != 0)
     98c:	88 23       	and	r24, r24
     98e:	29 f0       	breq	.+10     	; 0x99a <RadioReceive+0x86>
                    {
                        Sensor2Value -= 50;                       // check if conversion is ok, correct value with offset
     990:	92 53       	subi	r25, 0x32	; 50
                        Sensor2Value += Sensor2Correction_SRAM;  // correct value if conversion ok
     992:	80 91 36 06 	lds	r24, 0x0636
     996:	89 0f       	add	r24, r25
     998:	02 c0       	rjmp	.+4      	; 0x99e <RadioReceive+0x8a>
                    }
			        else Sensor2Value = Sensor2PreviousValue;   // wrong values received
     99a:	80 91 de 03 	lds	r24, 0x03DE
     99e:	80 93 a2 03 	sts	0x03A2, r24

			        if (recbuf[1] == 'X')                         // display battery warning message
     9a2:	80 91 d3 03 	lds	r24, 0x03D3
     9a6:	88 35       	cpi	r24, 0x58	; 88
     9a8:	59 f4       	brne	.+22     	; 0x9c0 <RadioReceive+0xac>
			        {
			            lcd_pos(2,10);
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	6a e0       	ldi	r22, 0x0A	; 10
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
			            lcd_print_str("BATTERY    ");
     9b6:	85 ea       	ldi	r24, 0xA5	; 165
     9b8:	91 e0       	ldi	r25, 0x01	; 1
     9ba:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>
     9be:	16 c0       	rjmp	.+44     	; 0x9ec <RadioReceive+0xd8>
			        }
               else lcd_print_value (Sensor2Value, "#C     ", '+', 2, 10, 2, 0);
     9c0:	60 91 a2 03 	lds	r22, 0x03A2
     9c4:	77 27       	eor	r23, r23
     9c6:	67 fd       	sbrc	r22, 7
     9c8:	70 95       	com	r23
     9ca:	87 2f       	mov	r24, r23
     9cc:	97 2f       	mov	r25, r23
     9ce:	41 eb       	ldi	r20, 0xB1	; 177
     9d0:	51 e0       	ldi	r21, 0x01	; 1
     9d2:	2b e2       	ldi	r18, 0x2B	; 43
     9d4:	02 e0       	ldi	r16, 0x02	; 2
     9d6:	10 e0       	ldi	r17, 0x00	; 0
     9d8:	fa e0       	ldi	r31, 0x0A	; 10
     9da:	ef 2e       	mov	r14, r31
     9dc:	f1 2c       	mov	r15, r1
     9de:	e2 e0       	ldi	r30, 0x02	; 2
     9e0:	ce 2e       	mov	r12, r30
     9e2:	d1 2c       	mov	r13, r1
     9e4:	aa 24       	eor	r10, r10
     9e6:	bb 24       	eor	r11, r11
     9e8:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <lcd_print_value>

              if (Sensor2Received)
     9ec:	80 91 a3 03 	lds	r24, 0x03A3
     9f0:	90 91 a2 03 	lds	r25, 0x03A2
     9f4:	88 23       	and	r24, r24
     9f6:	69 f0       	breq	.+26     	; 0xa12 <RadioReceive+0xfe>
              {
                  if (Sensor2Value < Sensor2MinValue) Sensor2MinValue = Sensor2Value;
     9f8:	80 91 64 06 	lds	r24, 0x0664
     9fc:	98 17       	cp	r25, r24
     9fe:	14 f4       	brge	.+4      	; 0xa04 <RadioReceive+0xf0>
     a00:	90 93 64 06 	sts	0x0664, r25
                  if (Sensor2Value > Sensor2MaxValue) Sensor2MaxValue = Sensor2Value;
     a04:	80 91 cf 03 	lds	r24, 0x03CF
     a08:	89 17       	cp	r24, r25
     a0a:	54 f4       	brge	.+20     	; 0xa20 <RadioReceive+0x10c>
     a0c:	90 93 cf 03 	sts	0x03CF, r25
     a10:	07 c0       	rjmp	.+14     	; 0xa20 <RadioReceive+0x10c>
              }
              else
              {
                  Sensor2MinValue = Sensor2Value;
     a12:	90 93 64 06 	sts	0x0664, r25
                  Sensor2MaxValue = Sensor2Value;
     a16:	90 93 cf 03 	sts	0x03CF, r25
                  Sensor2Received = true;
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	80 93 a3 03 	sts	0x03A3, r24
              }

             Sensor2Timeout = 0;								 // reset timeout
     a20:	10 92 66 06 	sts	0x0666, r1
     a24:	10 92 65 06 	sts	0x0665, r1
			}
			if (recbuf[0]=='B')					                    // Sensor B
     a28:	80 91 d2 03 	lds	r24, 0x03D2
     a2c:	82 34       	cpi	r24, 0x42	; 66
     a2e:	09 f0       	breq	.+2      	; 0xa32 <RadioReceive+0x11e>
     a30:	74 c0       	rjmp	.+232    	; 0xb1a <RadioReceive+0x206>
			{
			        Sensor3Value = atoi(&recbuf[1]);		 		// convert in integer
     a32:	83 ed       	ldi	r24, 0xD3	; 211
     a34:	93 e0       	ldi	r25, 0x03	; 3
     a36:	0e 94 65 32 	call	0x64ca	; 0x64ca <atoi>
     a3a:	98 2f       	mov	r25, r24
			        if (Sensor3Value != 0)
     a3c:	88 23       	and	r24, r24
     a3e:	29 f0       	breq	.+10     	; 0xa4a <RadioReceive+0x136>
                    {
                        Sensor3Value -= 50;                         // check if conversion is ok, correct value with offset
     a40:	92 53       	subi	r25, 0x32	; 50
                        Sensor3Value += Sensor3Correction_SRAM; 	// correct value if conversion ok
     a42:	80 91 28 06 	lds	r24, 0x0628
     a46:	89 0f       	add	r24, r25
     a48:	02 c0       	rjmp	.+4      	; 0xa4e <RadioReceive+0x13a>
                    }
                    else Sensor3Value = Sensor3PreviousValue;       // // wrong values received
     a4a:	80 91 6e 06 	lds	r24, 0x066E
     a4e:	80 93 a4 03 	sts	0x03A4, r24

                    if (recbuf[1] == 'X')                         // display battery warning message
     a52:	80 91 d3 03 	lds	r24, 0x03D3
     a56:	88 35       	cpi	r24, 0x58	; 88
     a58:	59 f4       	brne	.+22     	; 0xa70 <RadioReceive+0x15c>
			        {
			            lcd_pos(3,10);
     a5a:	83 e0       	ldi	r24, 0x03	; 3
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	6a e0       	ldi	r22, 0x0A	; 10
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
                        lcd_print_str("BATTERY    ");
     a66:	85 ea       	ldi	r24, 0xA5	; 165
     a68:	91 e0       	ldi	r25, 0x01	; 1
     a6a:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>
     a6e:	16 c0       	rjmp	.+44     	; 0xa9c <RadioReceive+0x188>
			        }
              else lcd_print_value (Sensor3Value, "#C     ", '+', 3, 10, 2, 0);
     a70:	60 91 a4 03 	lds	r22, 0x03A4
     a74:	77 27       	eor	r23, r23
     a76:	67 fd       	sbrc	r22, 7
     a78:	70 95       	com	r23
     a7a:	87 2f       	mov	r24, r23
     a7c:	97 2f       	mov	r25, r23
     a7e:	41 eb       	ldi	r20, 0xB1	; 177
     a80:	51 e0       	ldi	r21, 0x01	; 1
     a82:	2b e2       	ldi	r18, 0x2B	; 43
     a84:	03 e0       	ldi	r16, 0x03	; 3
     a86:	10 e0       	ldi	r17, 0x00	; 0
     a88:	3a e0       	ldi	r19, 0x0A	; 10
     a8a:	e3 2e       	mov	r14, r19
     a8c:	f1 2c       	mov	r15, r1
     a8e:	b2 e0       	ldi	r27, 0x02	; 2
     a90:	cb 2e       	mov	r12, r27
     a92:	d1 2c       	mov	r13, r1
     a94:	aa 24       	eor	r10, r10
     a96:	bb 24       	eor	r11, r11
     a98:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <lcd_print_value>
              if (Sensor3Received)
     a9c:	80 91 a5 03 	lds	r24, 0x03A5
     aa0:	90 91 a4 03 	lds	r25, 0x03A4
     aa4:	88 23       	and	r24, r24
     aa6:	69 f0       	breq	.+26     	; 0xac2 <RadioReceive+0x1ae>
              {
                  if (Sensor3Value < Sensor3MinValue) Sensor3MinValue = Sensor3Value;
     aa8:	80 91 f0 03 	lds	r24, 0x03F0
     aac:	98 17       	cp	r25, r24
     aae:	14 f4       	brge	.+4      	; 0xab4 <RadioReceive+0x1a0>
     ab0:	90 93 f0 03 	sts	0x03F0, r25
                  if (Sensor3Value > Sensor3MaxValue) Sensor3MaxValue = Sensor3Value;
     ab4:	80 91 71 06 	lds	r24, 0x0671
     ab8:	89 17       	cp	r24, r25
     aba:	54 f4       	brge	.+20     	; 0xad0 <RadioReceive+0x1bc>
     abc:	90 93 71 06 	sts	0x0671, r25
     ac0:	07 c0       	rjmp	.+14     	; 0xad0 <RadioReceive+0x1bc>
              }
              else
              {
                  Sensor3MinValue = Sensor3Value;
     ac2:	90 93 f0 03 	sts	0x03F0, r25
                  Sensor3MaxValue = Sensor3Value;
     ac6:	90 93 71 06 	sts	0x0671, r25
                  Sensor3Received = true;
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	80 93 a5 03 	sts	0x03A5, r24
              }
              Sensor3Timeout = 0;								 // reset timeout
     ad0:	10 92 63 06 	sts	0x0663, r1
     ad4:	10 92 62 06 	sts	0x0662, r1
     ad8:	20 c0       	rjmp	.+64     	; 0xb1a <RadioReceive+0x206>
		bufferposition = 0;
		//Enable_receiver();
    }
    else
    {
		if (DataReceived == STX) 				// STX -> start of telegram -> save following characters
     ada:	42 30       	cpi	r20, 0x02	; 2
     adc:	31 f4       	brne	.+12     	; 0xaea <RadioReceive+0x1d6>
		 {
			rec_started = 1;
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	80 93 cd 03 	sts	0x03CD, r24
			Checksum = 0;
     ae4:	10 92 dc 03 	sts	0x03DC, r1
     ae8:	1e c0       	rjmp	.+60     	; 0xb26 <RadioReceive+0x212>
		 }
		else if ((rec_started) && (bufferposition < 6)) 	// save telegram content, n -> next array position
     aea:	55 23       	and	r21, r21
     aec:	91 f0       	breq	.+36     	; 0xb12 <RadioReceive+0x1fe>
     aee:	80 91 dd 03 	lds	r24, 0x03DD
     af2:	86 30       	cpi	r24, 0x06	; 6
     af4:	70 f4       	brcc	.+28     	; 0xb12 <RadioReceive+0x1fe>
		{
		recbuf[bufferposition++] = DataReceived;
     af6:	e8 2f       	mov	r30, r24
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	ee 52       	subi	r30, 0x2E	; 46
     afc:	fc 4f       	sbci	r31, 0xFC	; 252
     afe:	40 83       	st	Z, r20
     b00:	8f 5f       	subi	r24, 0xFF	; 255
     b02:	80 93 dd 03 	sts	0x03DD, r24
		Checksum += DataReceived;
     b06:	80 91 dc 03 	lds	r24, 0x03DC
     b0a:	84 0f       	add	r24, r20
     b0c:	80 93 dc 03 	sts	0x03DC, r24
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <RadioReceive+0x212>
		}
		else if (bufferposition>=5)					// over 5 characters received -> reject telegram
     b12:	80 91 dd 03 	lds	r24, 0x03DD
     b16:	85 30       	cpi	r24, 0x05	; 5
     b18:	30 f0       	brcs	.+12     	; 0xb26 <RadioReceive+0x212>
		{
        RestartFifoFill_receiver();
     b1a:	0e 94 3d 28 	call	0x507a	; 0x507a <RestartFifoFill_receiver>
		//Disable_receiver();
		rec_started = 0;
     b1e:	10 92 cd 03 	sts	0x03CD, r1
		bufferposition = 0;
     b22:	10 92 dd 03 	sts	0x03DD, r1
		//Enable_receiver();
 	    }
	}
	sei();                                          // enable all interrupts
     b26:	78 94       	sei
}
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	cf 90       	pop	r12
     b34:	bf 90       	pop	r11
     b36:	af 90       	pop	r10
     b38:	08 95       	ret

00000b3a <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     b3a:	e6 dc       	rcall	.-1588   	; 0x508 <SetupHardware>

	/* Mount and open the log file on the Dataflash FAT partition */
	OpenLogFile();
     b3c:	56 de       	rcall	.-852    	; 0x7ea <OpenLogFile>
     b3e:	8b b1       	in	r24, 0x0b	; 11
     b40:	8f 70       	andi	r24, 0x0F	; 15
     b42:	80 61       	ori	r24, 0x10	; 16
     b44:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);

	sei();                                       // enable all interrupts
     b46:	78 94       	sei
	//volatile uint8_t Dummy = Temperature_GetTemperature();
	//(void)Dummy;

	for (;;)
	{
		if (!(LOCAL_Port_Read & (1<<LOCAL)))    // mode: temperature logging
     b48:	37 99       	sbic	0x06, 7	; 6
     b4a:	05 c0       	rjmp	.+10     	; 0xb56 <main+0x1c>
		{
			RFM12_Port_Write &=~ (1<<NSEL); //NSEL = 0, chip select -> activ
     b4c:	11 98       	cbi	0x02, 1	; 2
			if (RFM12_Port_Read&(1<<SDO)) RadioReceive();
     b4e:	02 9b       	sbis	0x00, 2	; 0
     b50:	fb cf       	rjmp	.-10     	; 0xb48 <main+0xe>
     b52:	e0 de       	rcall	.-576    	; 0x914 <RadioReceive>
     b54:	f9 cf       	rjmp	.-14     	; 0xb48 <main+0xe>
		}
		else
		{
        MS_Device_USBTask(&Disk_MS_Interface);      // USB mode -> connection to pc
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	93 e0       	ldi	r25, 0x03	; 3
     b5a:	0e 94 2b 30 	call	0x6056	; 0x6056 <MS_Device_USBTask>
        HID_Device_USBTask(&Generic_HID_Interface);
     b5e:	87 e3       	ldi	r24, 0x37	; 55
     b60:	93 e0       	ldi	r25, 0x03	; 3
     b62:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <HID_Device_USBTask>
        USB_USBTask();
     b66:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <USB_USBTask>
     b6a:	ee cf       	rjmp	.-36     	; 0xb48 <main+0xe>

00000b6c <__vector_17>:
    }
}*/

/** ISR to handle the 500ms ticks for sampling and data logging */
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
     b6c:	1f 92       	push	r1
     b6e:	0f 92       	push	r0
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	0f 92       	push	r0
     b74:	0b b6       	in	r0, 0x3b	; 59
     b76:	0f 92       	push	r0
     b78:	11 24       	eor	r1, r1
     b7a:	9f 92       	push	r9
     b7c:	af 92       	push	r10
     b7e:	bf 92       	push	r11
     b80:	cf 92       	push	r12
     b82:	df 92       	push	r13
     b84:	ef 92       	push	r14
     b86:	ff 92       	push	r15
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	2f 93       	push	r18
     b8e:	3f 93       	push	r19
     b90:	4f 93       	push	r20
     b92:	5f 93       	push	r21
     b94:	6f 93       	push	r22
     b96:	7f 93       	push	r23
     b98:	8f 93       	push	r24
     b9a:	9f 93       	push	r25
     b9c:	af 93       	push	r26
     b9e:	bf 93       	push	r27
     ba0:	ef 93       	push	r30
     ba2:	ff 93       	push	r31
     ba4:	df 93       	push	r29
     ba6:	cf 93       	push	r28
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	a8 97       	sbiw	r28, 0x28	; 40
     bae:	de bf       	out	0x3e, r29	; 62
     bb0:	cd bf       	out	0x3d, r28	; 61
			}

			static inline uint8_t LEDs_GetLEDs(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t LEDs_GetLEDs(void)
			{
				return (PORTD & LEDS_ALL_LEDS);
     bb2:	9b b0       	in	r9, 0x0b	; 11
	uint8_t LEDMask = LEDs_GetLEDs();
	uint8_t Day,  Month,  Year;
	uint8_t Hour, Minute, Second;
	uint8_t Timer=0;
	char LineBuffer[30];
    int8_t Temperature=0;
     bb4:	1f 82       	std	Y+7, r1	; 0x07
    uint8_t Humidity=0;
     bb6:	18 86       	std	Y+8, r1	; 0x08

	if (!(LOCAL_Port_Read & (1<<LOCAL)))
     bb8:	37 99       	sbic	0x06, 7	; 6
     bba:	09 c2       	rjmp	.+1042   	; 0xfce <__vector_17+0x462>
	{
		DS1307_GetDate(&Day,  &Month,  &Year);
     bbc:	ce 01       	movw	r24, r28
     bbe:	01 96       	adiw	r24, 0x01	; 1
     bc0:	be 01       	movw	r22, r28
     bc2:	6e 5f       	subi	r22, 0xFE	; 254
     bc4:	7f 4f       	sbci	r23, 0xFF	; 255
     bc6:	ae 01       	movw	r20, r28
     bc8:	4d 5f       	subi	r20, 0xFD	; 253
     bca:	5f 4f       	sbci	r21, 0xFF	; 255
     bcc:	0e 94 38 11 	call	0x2270	; 0x2270 <DS1307_GetDate>
		DS1307_GetTime(&Hour, &Minute, &Second);
     bd0:	ce 01       	movw	r24, r28
     bd2:	04 96       	adiw	r24, 0x04	; 4
     bd4:	be 01       	movw	r22, r28
     bd6:	6b 5f       	subi	r22, 0xFB	; 251
     bd8:	7f 4f       	sbci	r23, 0xFF	; 255
     bda:	ae 01       	movw	r20, r28
     bdc:	4a 5f       	subi	r20, 0xFA	; 250
     bde:	5f 4f       	sbci	r21, 0xFF	; 255
     be0:	0e 94 9a 10 	call	0x2134	; 0x2134 <DS1307_GetTime>
            lcd_pos(2,1);
            lcd_print_str(LineBuffer);
        }
        else
        {
            sprintf(LineBuffer, "%02d.%02d.%02d,%02d:%02d:%02d  ", Day, Month, Year, Hour, Minute, Second);
     be4:	8d b7       	in	r24, 0x3d	; 61
     be6:	9e b7       	in	r25, 0x3e	; 62
     be8:	40 97       	sbiw	r24, 0x10	; 16
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	f8 94       	cli
     bee:	9e bf       	out	0x3e, r25	; 62
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	8d bf       	out	0x3d, r24	; 61
     bf4:	ed b7       	in	r30, 0x3d	; 61
     bf6:	fe b7       	in	r31, 0x3e	; 62
     bf8:	31 96       	adiw	r30, 0x01	; 1
     bfa:	8e 01       	movw	r16, r28
     bfc:	05 5f       	subi	r16, 0xF5	; 245
     bfe:	1f 4f       	sbci	r17, 0xFF	; 255
     c00:	ad b7       	in	r26, 0x3d	; 61
     c02:	be b7       	in	r27, 0x3e	; 62
     c04:	12 96       	adiw	r26, 0x02	; 2
     c06:	1c 93       	st	X, r17
     c08:	0e 93       	st	-X, r16
     c0a:	11 97       	sbiw	r26, 0x01	; 1
     c0c:	89 eb       	ldi	r24, 0xB9	; 185
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	93 83       	std	Z+3, r25	; 0x03
     c12:	82 83       	std	Z+2, r24	; 0x02
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	84 83       	std	Z+4, r24	; 0x04
     c18:	15 82       	std	Z+5, r1	; 0x05
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	86 83       	std	Z+6, r24	; 0x06
     c1e:	17 82       	std	Z+7, r1	; 0x07
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	80 87       	std	Z+8, r24	; 0x08
     c24:	11 86       	std	Z+9, r1	; 0x09
     c26:	8c 81       	ldd	r24, Y+4	; 0x04
     c28:	82 87       	std	Z+10, r24	; 0x0a
     c2a:	13 86       	std	Z+11, r1	; 0x0b
     c2c:	8d 81       	ldd	r24, Y+5	; 0x05
     c2e:	84 87       	std	Z+12, r24	; 0x0c
     c30:	15 86       	std	Z+13, r1	; 0x0d
     c32:	8e 81       	ldd	r24, Y+6	; 0x06
     c34:	86 87       	std	Z+14, r24	; 0x0e
     c36:	17 86       	std	Z+15, r1	; 0x0f
     c38:	0e 94 ae 32 	call	0x655c	; 0x655c <sprintf>
            lcd_pos(4,1);
     c3c:	8d b7       	in	r24, 0x3d	; 61
     c3e:	9e b7       	in	r25, 0x3e	; 62
     c40:	40 96       	adiw	r24, 0x10	; 16
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	9e bf       	out	0x3e, r25	; 62
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	8d bf       	out	0x3d, r24	; 61
     c4c:	84 e0       	ldi	r24, 0x04	; 4
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	61 e0       	ldi	r22, 0x01	; 1
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
            lcd_print_str(LineBuffer);
     c58:	c8 01       	movw	r24, r16
     c5a:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>
            lcd_pos(2,1);
     c5e:	82 e0       	ldi	r24, 0x02	; 2
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	61 e0       	ldi	r22, 0x01	; 1
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
            lcd_print_str(Sensor2Name_SRAM);
     c6a:	8f e1       	ldi	r24, 0x1F	; 31
     c6c:	96 e0       	ldi	r25, 0x06	; 6
     c6e:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>
            lcd_pos(3,1);
     c72:	83 e0       	ldi	r24, 0x03	; 3
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	70 e0       	ldi	r23, 0x00	; 0
     c7a:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
            lcd_print_str(Sensor3Name_SRAM);
     c7e:	8d e2       	ldi	r24, 0x2D	; 45
     c80:	96 e0       	ldi	r25, 0x06	; 6
     c82:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>
        }

        lcd_pos(1,1);
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
		lcd_print_str(Sensor1Name_SRAM);
     c92:	85 ee       	ldi	r24, 0xE5	; 229
     c94:	93 e0       	ldi	r25, 0x03	; 3
     c96:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>

		//Temperature = Temperature_GetTemperature()+Sensor1Correction_SRAM;  // if use of local NTC
		HYT321_GetData(&Humidity, &Temperature);
     c9a:	ce 01       	movw	r24, r28
     c9c:	08 96       	adiw	r24, 0x08	; 8
     c9e:	be 01       	movw	r22, r28
     ca0:	69 5f       	subi	r22, 0xF9	; 249
     ca2:	7f 4f       	sbci	r23, 0xFF	; 255
     ca4:	0e 94 47 28 	call	0x508e	; 0x508e <HYT321_GetData>
		Temperature += Sensor1Correction_SRAM;
     ca8:	60 91 6f 06 	lds	r22, 0x066F
     cac:	2f 81       	ldd	r18, Y+7	; 0x07
     cae:	62 0f       	add	r22, r18
     cb0:	6f 83       	std	Y+7, r22	; 0x07
            lcd_print_value (Temperature, "#C  ", '+', 1, 8, 2, 0);
            lcd_print_value (Humidity, "% ", '/', 1, 13, 2, 0);
        }
		else
        {
            lcd_print_value (Temperature, "#C", '+', 1, 10, 2, 0);
     cb2:	77 27       	eor	r23, r23
     cb4:	67 fd       	sbrc	r22, 7
     cb6:	70 95       	com	r23
     cb8:	87 2f       	mov	r24, r23
     cba:	97 2f       	mov	r25, r23
     cbc:	41 e6       	ldi	r20, 0x61	; 97
     cbe:	51 e0       	ldi	r21, 0x01	; 1
     cc0:	2b e2       	ldi	r18, 0x2B	; 43
     cc2:	01 e0       	ldi	r16, 0x01	; 1
     cc4:	10 e0       	ldi	r17, 0x00	; 0
     cc6:	aa e0       	ldi	r26, 0x0A	; 10
     cc8:	ea 2e       	mov	r14, r26
     cca:	f1 2c       	mov	r15, r1
     ccc:	f2 e0       	ldi	r31, 0x02	; 2
     cce:	cf 2e       	mov	r12, r31
     cd0:	d1 2c       	mov	r13, r1
     cd2:	aa 24       	eor	r10, r10
     cd4:	bb 24       	eor	r11, r11
     cd6:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <lcd_print_value>
            lcd_print_value (Humidity, "% ", '/', 1, 15, 2, 0);
     cda:	68 85       	ldd	r22, Y+8	; 0x08
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	44 e6       	ldi	r20, 0x64	; 100
     ce4:	51 e0       	ldi	r21, 0x01	; 1
     ce6:	2f e2       	ldi	r18, 0x2F	; 47
     ce8:	ef e0       	ldi	r30, 0x0F	; 15
     cea:	ee 2e       	mov	r14, r30
     cec:	f1 2c       	mov	r15, r1
     cee:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <lcd_print_value>
            lcd_pos (1, 20);
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	64 e1       	ldi	r22, 0x14	; 20
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
            if (Temperature > Sensor1PreviousValue + 1) lcd_write (0, 1);
     cfe:	8f 81       	ldd	r24, Y+7	; 0x07
     d00:	48 2f       	mov	r20, r24
     d02:	55 27       	eor	r21, r21
     d04:	47 fd       	sbrc	r20, 7
     d06:	50 95       	com	r21
     d08:	80 91 6b 06 	lds	r24, 0x066B
     d0c:	28 2f       	mov	r18, r24
     d0e:	33 27       	eor	r19, r19
     d10:	27 fd       	sbrc	r18, 7
     d12:	30 95       	com	r19
     d14:	c9 01       	movw	r24, r18
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	84 17       	cp	r24, r20
     d1a:	95 07       	cpc	r25, r21
     d1c:	14 f4       	brge	.+4      	; 0xd22 <__vector_17+0x1b6>
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	06 c0       	rjmp	.+12     	; 0xd2e <__vector_17+0x1c2>
            else if (Temperature < Sensor1PreviousValue - 1) lcd_write (1, 1);
     d22:	21 50       	subi	r18, 0x01	; 1
     d24:	30 40       	sbci	r19, 0x00	; 0
     d26:	42 17       	cp	r20, r18
     d28:	53 07       	cpc	r21, r19
     d2a:	2c f4       	brge	.+10     	; 0xd36 <__vector_17+0x1ca>
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	61 e0       	ldi	r22, 0x01	; 1
     d30:	0e 94 07 24 	call	0x480e	; 0x480e <lcd_write>
     d34:	04 c0       	rjmp	.+8      	; 0xd3e <__vector_17+0x1d2>
            else lcd_print_str ("~");
     d36:	89 ed       	ldi	r24, 0xD9	; 217
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>
        }

        if (Sensor1Received)
     d3e:	80 91 a1 03 	lds	r24, 0x03A1
     d42:	9f 81       	ldd	r25, Y+7	; 0x07
     d44:	88 23       	and	r24, r24
     d46:	69 f0       	breq	.+26     	; 0xd62 <__vector_17+0x1f6>
        {
            if (Temperature < Sensor1MinValue) Sensor1MinValue = Temperature;
     d48:	80 91 a0 03 	lds	r24, 0x03A0
     d4c:	98 17       	cp	r25, r24
     d4e:	14 f4       	brge	.+4      	; 0xd54 <__vector_17+0x1e8>
     d50:	90 93 a0 03 	sts	0x03A0, r25
            if (Temperature > Sensor1MaxValue) Sensor1MaxValue = Temperature;
     d54:	80 91 df 03 	lds	r24, 0x03DF
     d58:	89 17       	cp	r24, r25
     d5a:	54 f4       	brge	.+20     	; 0xd70 <__vector_17+0x204>
     d5c:	90 93 df 03 	sts	0x03DF, r25
     d60:	07 c0       	rjmp	.+14     	; 0xd70 <__vector_17+0x204>
        }
        else
        {
           Sensor1MinValue = Temperature;
     d62:	90 93 a0 03 	sts	0x03A0, r25
           Sensor1MaxValue = Temperature;
     d66:	90 93 df 03 	sts	0x03DF, r25
           Sensor1Received = true;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	80 93 a1 03 	sts	0x03A1, r24
        }

        Sensor1PreviousValue = Temperature;
     d70:	8f 81       	ldd	r24, Y+7	; 0x07
     d72:	80 93 6b 06 	sts	0x066B, r24
            }

        }*/

		/* write minimum and maximum values */
        if (!(MAX_Port_Read & (1<<MAXSWITCH)))
     d76:	1d 99       	sbic	0x03, 5	; 3
     d78:	2a c1       	rjmp	.+596    	; 0xfce <__vector_17+0x462>
        {
           lcd_init();                     // clear display because interferences could cause lcd fault
     d7a:	0e 94 bc 24 	call	0x4978	; 0x4978 <lcd_init>
           lcd_print_str(Sensor1Name_SRAM);
     d7e:	85 ee       	ldi	r24, 0xE5	; 229
     d80:	93 e0       	ldi	r25, 0x03	; 3
     d82:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>
           lcd_pos(LCD_MODUL,1);
     d86:	84 e0       	ldi	r24, 0x04	; 4
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	61 e0       	ldi	r22, 0x01	; 1
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
           sprintf (LineBuffer, "D:%3d I:%3d L:%3d", DaysLeft_SRAM, LoggingInterval500MS_SRAM/2,
     d92:	20 91 e0 03 	lds	r18, 0x03E0
     d96:	30 91 e1 03 	lds	r19, 0x03E1
     d9a:	ad b7       	in	r26, 0x3d	; 61
     d9c:	be b7       	in	r27, 0x3e	; 62
     d9e:	1a 97       	sbiw	r26, 0x0a	; 10
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	be bf       	out	0x3e, r27	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	ad bf       	out	0x3d, r26	; 61
     daa:	ed b7       	in	r30, 0x3d	; 61
     dac:	fe b7       	in	r31, 0x3e	; 62
     dae:	31 96       	adiw	r30, 0x01	; 1
     db0:	8e 01       	movw	r16, r28
     db2:	05 5f       	subi	r16, 0xF5	; 245
     db4:	1f 4f       	sbci	r17, 0xFF	; 255
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	1c 93       	st	X, r17
     dba:	0e 93       	st	-X, r16
     dbc:	11 97       	sbiw	r26, 0x01	; 1
     dbe:	8b ed       	ldi	r24, 0xDB	; 219
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	93 83       	std	Z+3, r25	; 0x03
     dc4:	82 83       	std	Z+2, r24	; 0x02
     dc6:	80 91 67 06 	lds	r24, 0x0667
     dca:	90 91 68 06 	lds	r25, 0x0668
     dce:	95 83       	std	Z+5, r25	; 0x05
     dd0:	84 83       	std	Z+4, r24	; 0x04
     dd2:	c9 01       	movw	r24, r18
     dd4:	96 95       	lsr	r25
     dd6:	87 95       	ror	r24
     dd8:	97 83       	std	Z+7, r25	; 0x07
     dda:	86 83       	std	Z+6, r24	; 0x06
     ddc:	80 91 ee 03 	lds	r24, 0x03EE
     de0:	90 91 ef 03 	lds	r25, 0x03EF
     de4:	28 1b       	sub	r18, r24
     de6:	39 0b       	sbc	r19, r25
     de8:	36 95       	lsr	r19
     dea:	27 95       	ror	r18
     dec:	31 87       	std	Z+9, r19	; 0x09
     dee:	20 87       	std	Z+8, r18	; 0x08
     df0:	0e 94 ae 32 	call	0x655c	; 0x655c <sprintf>
                   (LoggingInterval500MS_SRAM-CurrentLoggingTicks)/2);
           lcd_print_str(LineBuffer);
     df4:	8d b7       	in	r24, 0x3d	; 61
     df6:	9e b7       	in	r25, 0x3e	; 62
     df8:	0a 96       	adiw	r24, 0x0a	; 10
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	f8 94       	cli
     dfe:	9e bf       	out	0x3e, r25	; 62
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	8d bf       	out	0x3d, r24	; 61
     e04:	c8 01       	movw	r24, r16
     e06:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>

           if (Sensor1Received)
     e0a:	80 91 a1 03 	lds	r24, 0x03A1
     e0e:	88 23       	and	r24, r24
     e10:	29 f1       	breq	.+74     	; 0xe5c <__vector_17+0x2f0>
           {
            lcd_print_value (Sensor1MinValue, "#C/", '+', 1, 6+LCD_MODUL, 2, 0);
     e12:	60 91 a0 03 	lds	r22, 0x03A0
     e16:	77 27       	eor	r23, r23
     e18:	67 fd       	sbrc	r22, 7
     e1a:	70 95       	com	r23
     e1c:	87 2f       	mov	r24, r23
     e1e:	97 2f       	mov	r25, r23
     e20:	4d ee       	ldi	r20, 0xED	; 237
     e22:	51 e0       	ldi	r21, 0x01	; 1
     e24:	2b e2       	ldi	r18, 0x2B	; 43
     e26:	01 e0       	ldi	r16, 0x01	; 1
     e28:	10 e0       	ldi	r17, 0x00	; 0
     e2a:	ba e0       	ldi	r27, 0x0A	; 10
     e2c:	eb 2e       	mov	r14, r27
     e2e:	f1 2c       	mov	r15, r1
     e30:	a2 e0       	ldi	r26, 0x02	; 2
     e32:	ca 2e       	mov	r12, r26
     e34:	d1 2c       	mov	r13, r1
     e36:	aa 24       	eor	r10, r10
     e38:	bb 24       	eor	r11, r11
     e3a:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <lcd_print_value>
            lcd_print_value (Sensor1MaxValue, "#C", '+', 1, 12+LCD_MODUL, 2, 0);
     e3e:	60 91 df 03 	lds	r22, 0x03DF
     e42:	77 27       	eor	r23, r23
     e44:	67 fd       	sbrc	r22, 7
     e46:	70 95       	com	r23
     e48:	87 2f       	mov	r24, r23
     e4a:	97 2f       	mov	r25, r23
     e4c:	41 e6       	ldi	r20, 0x61	; 97
     e4e:	51 e0       	ldi	r21, 0x01	; 1
     e50:	2b e2       	ldi	r18, 0x2B	; 43
     e52:	f0 e1       	ldi	r31, 0x10	; 16
     e54:	ef 2e       	mov	r14, r31
     e56:	f1 2c       	mov	r15, r1
     e58:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <lcd_print_value>
            }

           if (LCD_MODUL==4)
           {
               lcd_pos(2,1);
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
               lcd_print_str(Sensor2Name_SRAM);
     e68:	8f e1       	ldi	r24, 0x1F	; 31
     e6a:	96 e0       	ldi	r25, 0x06	; 6
     e6c:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>
               lcd_pos(3,1);
     e70:	83 e0       	ldi	r24, 0x03	; 3
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	61 e0       	ldi	r22, 0x01	; 1
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
               lcd_print_str(Sensor3Name_SRAM);
     e7c:	8d e2       	ldi	r24, 0x2D	; 45
     e7e:	96 e0       	ldi	r25, 0x06	; 6
     e80:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>

               if (Sensor2Received)
     e84:	80 91 a3 03 	lds	r24, 0x03A3
     e88:	88 23       	and	r24, r24
     e8a:	29 f1       	breq	.+74     	; 0xed6 <__vector_17+0x36a>
               {
                lcd_print_value (Sensor2MinValue, "#C/", '+',  2, 10, 2, 0);
     e8c:	60 91 64 06 	lds	r22, 0x0664
     e90:	77 27       	eor	r23, r23
     e92:	67 fd       	sbrc	r22, 7
     e94:	70 95       	com	r23
     e96:	87 2f       	mov	r24, r23
     e98:	97 2f       	mov	r25, r23
     e9a:	4d ee       	ldi	r20, 0xED	; 237
     e9c:	51 e0       	ldi	r21, 0x01	; 1
     e9e:	2b e2       	ldi	r18, 0x2B	; 43
     ea0:	02 e0       	ldi	r16, 0x02	; 2
     ea2:	10 e0       	ldi	r17, 0x00	; 0
     ea4:	ea e0       	ldi	r30, 0x0A	; 10
     ea6:	ee 2e       	mov	r14, r30
     ea8:	f1 2c       	mov	r15, r1
     eaa:	32 e0       	ldi	r19, 0x02	; 2
     eac:	c3 2e       	mov	r12, r19
     eae:	d1 2c       	mov	r13, r1
     eb0:	aa 24       	eor	r10, r10
     eb2:	bb 24       	eor	r11, r11
     eb4:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <lcd_print_value>
                lcd_print_value (Sensor2MaxValue, "#C", '+',  2, 16, 2, 0);
     eb8:	60 91 cf 03 	lds	r22, 0x03CF
     ebc:	77 27       	eor	r23, r23
     ebe:	67 fd       	sbrc	r22, 7
     ec0:	70 95       	com	r23
     ec2:	87 2f       	mov	r24, r23
     ec4:	97 2f       	mov	r25, r23
     ec6:	41 e6       	ldi	r20, 0x61	; 97
     ec8:	51 e0       	ldi	r21, 0x01	; 1
     eca:	2b e2       	ldi	r18, 0x2B	; 43
     ecc:	b0 e1       	ldi	r27, 0x10	; 16
     ece:	eb 2e       	mov	r14, r27
     ed0:	f1 2c       	mov	r15, r1
     ed2:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <lcd_print_value>
               }
               if (Sensor3Received)
     ed6:	80 91 a5 03 	lds	r24, 0x03A5
     eda:	88 23       	and	r24, r24
     edc:	29 f1       	breq	.+74     	; 0xf28 <__vector_17+0x3bc>
               {
                lcd_print_value (Sensor3MinValue, "#C/", '+', 3, 10, 2, 0);
     ede:	60 91 f0 03 	lds	r22, 0x03F0
     ee2:	77 27       	eor	r23, r23
     ee4:	67 fd       	sbrc	r22, 7
     ee6:	70 95       	com	r23
     ee8:	87 2f       	mov	r24, r23
     eea:	97 2f       	mov	r25, r23
     eec:	4d ee       	ldi	r20, 0xED	; 237
     eee:	51 e0       	ldi	r21, 0x01	; 1
     ef0:	2b e2       	ldi	r18, 0x2B	; 43
     ef2:	03 e0       	ldi	r16, 0x03	; 3
     ef4:	10 e0       	ldi	r17, 0x00	; 0
     ef6:	aa e0       	ldi	r26, 0x0A	; 10
     ef8:	ea 2e       	mov	r14, r26
     efa:	f1 2c       	mov	r15, r1
     efc:	f2 e0       	ldi	r31, 0x02	; 2
     efe:	cf 2e       	mov	r12, r31
     f00:	d1 2c       	mov	r13, r1
     f02:	aa 24       	eor	r10, r10
     f04:	bb 24       	eor	r11, r11
     f06:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <lcd_print_value>
                lcd_print_value (Sensor3MaxValue, "#C", '+', 3, 16, 2, 0);
     f0a:	60 91 71 06 	lds	r22, 0x0671
     f0e:	77 27       	eor	r23, r23
     f10:	67 fd       	sbrc	r22, 7
     f12:	70 95       	com	r23
     f14:	87 2f       	mov	r24, r23
     f16:	97 2f       	mov	r25, r23
     f18:	41 e6       	ldi	r20, 0x61	; 97
     f1a:	51 e0       	ldi	r21, 0x01	; 1
     f1c:	2b e2       	ldi	r18, 0x2B	; 43
     f1e:	e0 e1       	ldi	r30, 0x10	; 16
     f20:	ee 2e       	mov	r14, r30
     f22:	f1 2c       	mov	r15, r1
     f24:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <lcd_print_value>
     f28:	10 e0       	ldi	r17, 0x00	; 0
     f2a:	48 ec       	ldi	r20, 0xC8	; 200
     f2c:	e4 2e       	mov	r14, r20
     f2e:	f1 2c       	mov	r15, r1
     f30:	1a c0       	rjmp	.+52     	; 0xf66 <__vector_17+0x3fa>
     f32:	88 ee       	ldi	r24, 0xE8	; 232
     f34:	93 e0       	ldi	r25, 0x03	; 3
     f36:	f7 01       	movw	r30, r14
     f38:	31 97       	sbiw	r30, 0x01	; 1
     f3a:	f1 f7       	brne	.-4      	; 0xf38 <__vector_17+0x3cc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f3c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3e:	d9 f7       	brne	.-10     	; 0xf36 <__vector_17+0x3ca>
           }

            while (!(MAX_Port_Read & (1<<MAXSWITCH)))      // wait until key is released
            {
               _delay_ms(100);
               if (Timer++>30)                              // clear min/max store
     f40:	1f 31       	cpi	r17, 0x1F	; 31
     f42:	80 f0       	brcs	.+32     	; 0xf64 <__vector_17+0x3f8>
               {
                  Sensor1Received = false;
     f44:	10 92 a1 03 	sts	0x03A1, r1
                  Sensor2Received = false;
     f48:	10 92 a3 03 	sts	0x03A3, r1
                  Sensor3Received = false;
     f4c:	10 92 a5 03 	sts	0x03A5, r1
                  lcd_pos(LCD_MODUL,1);
     f50:	84 e0       	ldi	r24, 0x04	; 4
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	61 e0       	ldi	r22, 0x01	; 1
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
                  lcd_print_str("Clear Min/Max Store");
     f5c:	81 ef       	ldi	r24, 0xF1	; 241
     f5e:	91 e0       	ldi	r25, 0x01	; 1
     f60:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>
           }

            while (!(MAX_Port_Read & (1<<MAXSWITCH)))      // wait until key is released
            {
               _delay_ms(100);
               if (Timer++>30)                              // clear min/max store
     f64:	1f 5f       	subi	r17, 0xFF	; 255
                lcd_print_value (Sensor3MinValue, "#C/", '+', 3, 10, 2, 0);
                lcd_print_value (Sensor3MaxValue, "#C", '+', 3, 16, 2, 0);
                }
           }

            while (!(MAX_Port_Read & (1<<MAXSWITCH)))      // wait until key is released
     f66:	1d 9b       	sbis	0x03, 5	; 3
     f68:	e4 cf       	rjmp	.-56     	; 0xf32 <__vector_17+0x3c6>
                  lcd_pos(LCD_MODUL,1);
                  lcd_print_str("Clear Min/Max Store");
               }
            }

            lcd_print_value (Sensor1PreviousValue, "#C      ", '+', 1, 10, 2, 0);
     f6a:	60 91 6b 06 	lds	r22, 0x066B
     f6e:	77 27       	eor	r23, r23
     f70:	67 fd       	sbrc	r22, 7
     f72:	70 95       	com	r23
     f74:	87 2f       	mov	r24, r23
     f76:	97 2f       	mov	r25, r23
     f78:	45 e0       	ldi	r20, 0x05	; 5
     f7a:	52 e0       	ldi	r21, 0x02	; 2
     f7c:	2b e2       	ldi	r18, 0x2B	; 43
     f7e:	01 e0       	ldi	r16, 0x01	; 1
     f80:	10 e0       	ldi	r17, 0x00	; 0
     f82:	3a e0       	ldi	r19, 0x0A	; 10
     f84:	e3 2e       	mov	r14, r19
     f86:	f1 2c       	mov	r15, r1
     f88:	b2 e0       	ldi	r27, 0x02	; 2
     f8a:	cb 2e       	mov	r12, r27
     f8c:	d1 2c       	mov	r13, r1
     f8e:	aa 24       	eor	r10, r10
     f90:	bb 24       	eor	r11, r11
     f92:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <lcd_print_value>
            if (LCD_MODUL==4)
            {
                lcd_print_value (Sensor2Value, "#C      ", '+', 2, 10, 2, 0);
     f96:	60 91 a2 03 	lds	r22, 0x03A2
     f9a:	77 27       	eor	r23, r23
     f9c:	67 fd       	sbrc	r22, 7
     f9e:	70 95       	com	r23
     fa0:	87 2f       	mov	r24, r23
     fa2:	97 2f       	mov	r25, r23
     fa4:	45 e0       	ldi	r20, 0x05	; 5
     fa6:	52 e0       	ldi	r21, 0x02	; 2
     fa8:	2b e2       	ldi	r18, 0x2B	; 43
     faa:	02 e0       	ldi	r16, 0x02	; 2
     fac:	10 e0       	ldi	r17, 0x00	; 0
     fae:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <lcd_print_value>
                lcd_print_value (Sensor3Value, "#C      ", '+', 3, 10, 2, 0);
     fb2:	60 91 a4 03 	lds	r22, 0x03A4
     fb6:	77 27       	eor	r23, r23
     fb8:	67 fd       	sbrc	r22, 7
     fba:	70 95       	com	r23
     fbc:	87 2f       	mov	r24, r23
     fbe:	97 2f       	mov	r25, r23
     fc0:	45 e0       	ldi	r20, 0x05	; 5
     fc2:	52 e0       	ldi	r21, 0x02	; 2
     fc4:	2b e2       	ldi	r18, 0x2B	; 43
     fc6:	03 e0       	ldi	r16, 0x03	; 3
     fc8:	10 e0       	ldi	r17, 0x00	; 0
     fca:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <lcd_print_value>
            }
        }
    }

    if(Sensor2Received&Sensor3Received)         // transmit values to webserver only if sensor values received
     fce:	20 91 a5 03 	lds	r18, 0x03A5
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	80 91 a3 03 	lds	r24, 0x03A3
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	28 23       	and	r18, r24
     fdc:	39 23       	and	r19, r25
     fde:	23 2b       	or	r18, r19
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <__vector_17+0x478>
     fe2:	03 c1       	rjmp	.+518    	; 0x11ea <__vector_17+0x67e>
    {

        if(WebEnableCounter++ == WEB_LOGGING_INTERVAL) POWER_ENABLE_Port_Write |= (1<<POWER_ENABLE);      // activate web module LDO
     fe4:	80 91 6c 06 	lds	r24, 0x066C
     fe8:	90 91 6d 06 	lds	r25, 0x066D
     fec:	9c 01       	movw	r18, r24
     fee:	2f 5f       	subi	r18, 0xFF	; 255
     ff0:	3f 4f       	sbci	r19, 0xFF	; 255
     ff2:	30 93 6d 06 	sts	0x066D, r19
     ff6:	20 93 6c 06 	sts	0x066C, r18
     ffa:	82 59       	subi	r24, 0x92	; 146
     ffc:	94 40       	sbci	r25, 0x04	; 4
     ffe:	09 f4       	brne	.+2      	; 0x1002 <__vector_17+0x496>
    1000:	2c 9a       	sbi	0x05, 4	; 5
        if(WebEnableCounter == 30)
    1002:	2e 31       	cpi	r18, 0x1E	; 30
    1004:	31 05       	cpc	r19, r1
    1006:	71 f4       	brne	.+28     	; 0x1024 <__vector_17+0x4b8>
			}

			/** Turns off the USART driver, disabling and returning used hardware to their default configuration. */
			static inline void Serial_ShutDown(void)
			{
				UCSR1B = 0;
    1008:	10 92 c9 00 	sts	0x00C9, r1
				UCSR1A = 0;
    100c:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1C = 0;
    1010:	10 92 ca 00 	sts	0x00CA, r1

				UBRR1  = 0;
    1014:	10 92 cd 00 	sts	0x00CD, r1
    1018:	10 92 cc 00 	sts	0x00CC, r1

				DDRD  &= ~(1 << 3);
    101c:	53 98       	cbi	0x0a, 3	; 10
				PORTD &= ~(1 << 2);
    101e:	5a 98       	cbi	0x0b, 2	; 11
        {
            Serial_ShutDown();                                 // disable uart after 15 seconds
            POWER_ENABLE_Port_Write &= ~(1<<POWER_ENABLE);     // disable web module LDO
    1020:	2c 98       	cbi	0x05, 4	; 5
    1022:	e3 c0       	rjmp	.+454    	; 0x11ea <__vector_17+0x67e>
        }

        if(WebEnableCounter>(WEB_LOGGING_INTERVAL+30))   // transmit values to webserver cosm 15 seconds after activation of module
    1024:	21 5b       	subi	r18, 0xB1	; 177
    1026:	34 40       	sbci	r19, 0x04	; 4
    1028:	08 f4       	brcc	.+2      	; 0x102c <__vector_17+0x4c0>
    102a:	df c0       	rjmp	.+446    	; 0x11ea <__vector_17+0x67e>
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
    102c:	83 e3       	ldi	r24, 0x33	; 51
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	90 93 cd 00 	sts	0x00CD, r25
    1034:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
    1038:	86 e0       	ldi	r24, 0x06	; 6
    103a:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
    103e:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
    1042:	88 e1       	ldi	r24, 0x18	; 24
    1044:	80 93 c9 00 	sts	0x00C9, r24

				DDRD  |= (1 << 3);
    1048:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
    104a:	5a 9a       	sbi	0x0b, 2	; 11
    104c:	88 ee       	ldi	r24, 0xE8	; 232
    104e:	93 e0       	ldi	r25, 0x03	; 3
    1050:	28 ec       	ldi	r18, 0xC8	; 200
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	f9 01       	movw	r30, r18
    1056:	31 97       	sbiw	r30, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <__vector_17+0x4ea>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    105c:	d9 f7       	brne	.-10     	; 0x1054 <__vector_17+0x4e8>

            Serial_TxString("1,");
            sprintf(LineBuffer, "%3d\r\n", Humidity);
            Serial_TxString(LineBuffer);*/

            Serial_TxString("POST /update HTTP/1.1\n");
    105e:	8e e0       	ldi	r24, 0x0E	; 14
    1060:	92 e0       	ldi	r25, 0x02	; 2
    1062:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <Serial_TxString>
            Serial_TxString("Host: api.thingspeak.com\n");
    1066:	85 e2       	ldi	r24, 0x25	; 37
    1068:	92 e0       	ldi	r25, 0x02	; 2
    106a:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <Serial_TxString>
            Serial_TxString("Connection: close\n");
    106e:	8f e3       	ldi	r24, 0x3F	; 63
    1070:	92 e0       	ldi	r25, 0x02	; 2
    1072:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <Serial_TxString>
            Serial_TxString("X-THINGSPEAKAPIKEY: ");
    1076:	82 e5       	ldi	r24, 0x52	; 82
    1078:	92 e0       	ldi	r25, 0x02	; 2
    107a:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <Serial_TxString>
            Serial_TxString(writeAPIKey);
    107e:	87 e6       	ldi	r24, 0x67	; 103
    1080:	92 e0       	ldi	r25, 0x02	; 2
    1082:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <Serial_TxString>
            Serial_TxString("\n");
    1086:	80 e7       	ldi	r24, 0x70	; 112
    1088:	92 e0       	ldi	r25, 0x02	; 2
    108a:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <Serial_TxString>
            Serial_TxString("Content-Type: application/x-www-form-urlencoded\n");
    108e:	82 e7       	ldi	r24, 0x72	; 114
    1090:	92 e0       	ldi	r25, 0x02	; 2
    1092:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <Serial_TxString>
            if (LCD_MODUL==4) Serial_TxString("Content-Length: 43"); //length of send data
    1096:	83 ea       	ldi	r24, 0xA3	; 163
    1098:	92 e0       	ldi	r25, 0x02	; 2
    109a:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <Serial_TxString>
            else Serial_TxString("Content-Length: 21");
            Serial_TxString("\n\n");
    109e:	86 eb       	ldi	r24, 0xB6	; 182
    10a0:	92 e0       	ldi	r25, 0x02	; 2
    10a2:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <Serial_TxString>

            Serial_TxString("field1=");
    10a6:	89 eb       	ldi	r24, 0xB9	; 185
    10a8:	92 e0       	ldi	r25, 0x02	; 2
    10aa:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <Serial_TxString>
            sprintf(LineBuffer, "%3d", Temperature);
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <__vector_17+0x544>
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <__vector_17+0x546>
    10b2:	00 d0       	rcall	.+0      	; 0x10b4 <__vector_17+0x548>
    10b4:	ed b7       	in	r30, 0x3d	; 61
    10b6:	fe b7       	in	r31, 0x3e	; 62
    10b8:	31 96       	adiw	r30, 0x01	; 1
    10ba:	8e 01       	movw	r16, r28
    10bc:	05 5f       	subi	r16, 0xF5	; 245
    10be:	1f 4f       	sbci	r17, 0xFF	; 255
    10c0:	ad b7       	in	r26, 0x3d	; 61
    10c2:	be b7       	in	r27, 0x3e	; 62
    10c4:	12 96       	adiw	r26, 0x02	; 2
    10c6:	1c 93       	st	X, r17
    10c8:	0e 93       	st	-X, r16
    10ca:	11 97       	sbiw	r26, 0x01	; 1
    10cc:	a1 ec       	ldi	r26, 0xC1	; 193
    10ce:	ea 2e       	mov	r14, r26
    10d0:	a2 e0       	ldi	r26, 0x02	; 2
    10d2:	fa 2e       	mov	r15, r26
    10d4:	f3 82       	std	Z+3, r15	; 0x03
    10d6:	e2 82       	std	Z+2, r14	; 0x02
    10d8:	8f 81       	ldd	r24, Y+7	; 0x07
    10da:	99 27       	eor	r25, r25
    10dc:	87 fd       	sbrc	r24, 7
    10de:	90 95       	com	r25
    10e0:	95 83       	std	Z+5, r25	; 0x05
    10e2:	84 83       	std	Z+4, r24	; 0x04
    10e4:	0e 94 ae 32 	call	0x655c	; 0x655c <sprintf>
            Serial_TxString(LineBuffer);
    10e8:	8d b7       	in	r24, 0x3d	; 61
    10ea:	9e b7       	in	r25, 0x3e	; 62
    10ec:	06 96       	adiw	r24, 0x06	; 6
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	9e bf       	out	0x3e, r25	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	8d bf       	out	0x3d, r24	; 61
    10f8:	c8 01       	movw	r24, r16
    10fa:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <Serial_TxString>

            Serial_TxString("&field2=");
    10fe:	85 ec       	ldi	r24, 0xC5	; 197
    1100:	92 e0       	ldi	r25, 0x02	; 2
    1102:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <Serial_TxString>
            sprintf(LineBuffer, "%3d", Humidity);
    1106:	00 d0       	rcall	.+0      	; 0x1108 <__vector_17+0x59c>
    1108:	00 d0       	rcall	.+0      	; 0x110a <__vector_17+0x59e>
    110a:	00 d0       	rcall	.+0      	; 0x110c <__vector_17+0x5a0>
    110c:	ed b7       	in	r30, 0x3d	; 61
    110e:	fe b7       	in	r31, 0x3e	; 62
    1110:	31 96       	adiw	r30, 0x01	; 1
    1112:	ad b7       	in	r26, 0x3d	; 61
    1114:	be b7       	in	r27, 0x3e	; 62
    1116:	12 96       	adiw	r26, 0x02	; 2
    1118:	1c 93       	st	X, r17
    111a:	0e 93       	st	-X, r16
    111c:	11 97       	sbiw	r26, 0x01	; 1
    111e:	f3 82       	std	Z+3, r15	; 0x03
    1120:	e2 82       	std	Z+2, r14	; 0x02
    1122:	88 85       	ldd	r24, Y+8	; 0x08
    1124:	84 83       	std	Z+4, r24	; 0x04
    1126:	15 82       	std	Z+5, r1	; 0x05
    1128:	0e 94 ae 32 	call	0x655c	; 0x655c <sprintf>
            Serial_TxString(LineBuffer);
    112c:	8d b7       	in	r24, 0x3d	; 61
    112e:	9e b7       	in	r25, 0x3e	; 62
    1130:	06 96       	adiw	r24, 0x06	; 6
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	9e bf       	out	0x3e, r25	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	8d bf       	out	0x3d, r24	; 61
    113c:	c8 01       	movw	r24, r16
    113e:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <Serial_TxString>

            if (LCD_MODUL==4)
            {
                Serial_TxString("&field3=");
    1142:	8e ec       	ldi	r24, 0xCE	; 206
    1144:	92 e0       	ldi	r25, 0x02	; 2
    1146:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <Serial_TxString>
                sprintf(LineBuffer, "%3d", Sensor2Value);
    114a:	00 d0       	rcall	.+0      	; 0x114c <__vector_17+0x5e0>
    114c:	00 d0       	rcall	.+0      	; 0x114e <__vector_17+0x5e2>
    114e:	00 d0       	rcall	.+0      	; 0x1150 <__vector_17+0x5e4>
    1150:	ed b7       	in	r30, 0x3d	; 61
    1152:	fe b7       	in	r31, 0x3e	; 62
    1154:	31 96       	adiw	r30, 0x01	; 1
    1156:	ad b7       	in	r26, 0x3d	; 61
    1158:	be b7       	in	r27, 0x3e	; 62
    115a:	12 96       	adiw	r26, 0x02	; 2
    115c:	1c 93       	st	X, r17
    115e:	0e 93       	st	-X, r16
    1160:	11 97       	sbiw	r26, 0x01	; 1
    1162:	f3 82       	std	Z+3, r15	; 0x03
    1164:	e2 82       	std	Z+2, r14	; 0x02
    1166:	80 91 a2 03 	lds	r24, 0x03A2
    116a:	99 27       	eor	r25, r25
    116c:	87 fd       	sbrc	r24, 7
    116e:	90 95       	com	r25
    1170:	95 83       	std	Z+5, r25	; 0x05
    1172:	84 83       	std	Z+4, r24	; 0x04
    1174:	0e 94 ae 32 	call	0x655c	; 0x655c <sprintf>
                Serial_TxString(LineBuffer);
    1178:	8d b7       	in	r24, 0x3d	; 61
    117a:	9e b7       	in	r25, 0x3e	; 62
    117c:	06 96       	adiw	r24, 0x06	; 6
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	9e bf       	out	0x3e, r25	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	8d bf       	out	0x3d, r24	; 61
    1188:	c8 01       	movw	r24, r16
    118a:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <Serial_TxString>

                Serial_TxString("&field4=");
    118e:	87 ed       	ldi	r24, 0xD7	; 215
    1190:	92 e0       	ldi	r25, 0x02	; 2
    1192:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <Serial_TxString>
                sprintf(LineBuffer, "%3d", Sensor3Value);
    1196:	00 d0       	rcall	.+0      	; 0x1198 <__vector_17+0x62c>
    1198:	00 d0       	rcall	.+0      	; 0x119a <__vector_17+0x62e>
    119a:	00 d0       	rcall	.+0      	; 0x119c <__vector_17+0x630>
    119c:	ed b7       	in	r30, 0x3d	; 61
    119e:	fe b7       	in	r31, 0x3e	; 62
    11a0:	31 96       	adiw	r30, 0x01	; 1
    11a2:	ad b7       	in	r26, 0x3d	; 61
    11a4:	be b7       	in	r27, 0x3e	; 62
    11a6:	12 96       	adiw	r26, 0x02	; 2
    11a8:	1c 93       	st	X, r17
    11aa:	0e 93       	st	-X, r16
    11ac:	11 97       	sbiw	r26, 0x01	; 1
    11ae:	f3 82       	std	Z+3, r15	; 0x03
    11b0:	e2 82       	std	Z+2, r14	; 0x02
    11b2:	80 91 a4 03 	lds	r24, 0x03A4
    11b6:	99 27       	eor	r25, r25
    11b8:	87 fd       	sbrc	r24, 7
    11ba:	90 95       	com	r25
    11bc:	95 83       	std	Z+5, r25	; 0x05
    11be:	84 83       	std	Z+4, r24	; 0x04
    11c0:	0e 94 ae 32 	call	0x655c	; 0x655c <sprintf>
                Serial_TxString(LineBuffer);
    11c4:	8d b7       	in	r24, 0x3d	; 61
    11c6:	9e b7       	in	r25, 0x3e	; 62
    11c8:	06 96       	adiw	r24, 0x06	; 6
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	9e bf       	out	0x3e, r25	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	8d bf       	out	0x3d, r24	; 61
    11d4:	c8 01       	movw	r24, r16
    11d6:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <Serial_TxString>
            }

            Serial_TxString("\r\n");
    11da:	80 ee       	ldi	r24, 0xE0	; 224
    11dc:	92 e0       	ldi	r25, 0x02	; 2
    11de:	0e 94 f0 31 	call	0x63e0	; 0x63e0 <Serial_TxString>
           // _delay_ms(1500);

           // Serial_ShutDown();          // disable uart

           // POWER_ENABLE_Port_Write &= ~(1<<POWER_ENABLE);     // disable web module LDO
            WebEnableCounter=0;        // reset weblogging counter
    11e2:	10 92 6d 06 	sts	0x066D, r1
    11e6:	10 92 6c 06 	sts	0x066C, r1
        }
    }

	/* Check to see if the logging interval has expired */
	if (CurrentLoggingTicks++ < LoggingInterval500MS_SRAM)
    11ea:	80 91 ee 03 	lds	r24, 0x03EE
    11ee:	90 91 ef 03 	lds	r25, 0x03EF
    11f2:	20 91 e0 03 	lds	r18, 0x03E0
    11f6:	30 91 e1 03 	lds	r19, 0x03E1
    11fa:	01 96       	adiw	r24, 0x01	; 1
    11fc:	90 93 ef 03 	sts	0x03EF, r25
    1200:	80 93 ee 03 	sts	0x03EE, r24
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	82 17       	cp	r24, r18
    1208:	93 07       	cpc	r25, r19
    120a:	08 f4       	brcc	.+2      	; 0x120e <__vector_17+0x6a2>
    120c:	10 c1       	rjmp	.+544    	; 0x142e <__vector_17+0x8c2>
	  return;

	/* Reset log tick counter to prepare for next logging interval */
	CurrentLoggingTicks = 0;
    120e:	10 92 ef 03 	sts	0x03EF, r1
    1212:	10 92 ee 03 	sts	0x03EE, r1
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
    1216:	8b b1       	in	r24, 0x0b	; 11
    1218:	8f 70       	andi	r24, 0x0F	; 15
    121a:	80 62       	ori	r24, 0x20	; 32
    121c:	8b b9       	out	0x0b, r24	; 11

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

	/* Only log when not connected to a USB host */
	if (!(LOCAL_Port_Read & (1<<LOCAL)))
    121e:	37 99       	sbic	0x06, 7	; 6
    1220:	00 c1       	rjmp	.+512    	; 0x1422 <__vector_17+0x8b6>
	{
		uint16_t BytesWritten;

        if ((Day != oldday) & (LogfileCreateSuccess==true)) 	/* new day -> new logfile */
    1222:	80 91 70 06 	lds	r24, 0x0670
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	40 e0       	ldi	r20, 0x00	; 0
    122c:	50 e0       	ldi	r21, 0x00	; 0
    122e:	99 81       	ldd	r25, Y+1	; 0x01
    1230:	80 91 e4 03 	lds	r24, 0x03E4
    1234:	98 17       	cp	r25, r24
    1236:	11 f0       	breq	.+4      	; 0x123c <__vector_17+0x6d0>
    1238:	41 e0       	ldi	r20, 0x01	; 1
    123a:	50 e0       	ldi	r21, 0x00	; 0
    123c:	24 23       	and	r18, r20
    123e:	35 23       	and	r19, r21
    1240:	23 2b       	or	r18, r19
    1242:	31 f1       	breq	.+76     	; 0x1290 <__vector_17+0x724>
    1244:	8b b1       	in	r24, 0x0b	; 11
    1246:	8f 70       	andi	r24, 0x0F	; 15
    1248:	80 61       	ori	r24, 0x10	; 16
    124a:	8b b9       	out	0x0b, r24	; 11
		{
			LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
			/* Close the log file */
			CloseLogFile();
    124c:	b6 da       	rcall	.-2708   	; 0x7ba <CloseLogFile>
			DaysLeft_SRAM--;			                         // decrement day counter
    124e:	60 91 67 06 	lds	r22, 0x0667
    1252:	70 91 68 06 	lds	r23, 0x0668
    1256:	61 50       	subi	r22, 0x01	; 1
    1258:	70 40       	sbci	r23, 0x00	; 0
    125a:	70 93 68 06 	sts	0x0668, r23
    125e:	60 93 67 06 	sts	0x0667, r22
			eeprom_update_word(&DaysLeft_EEPROM, DaysLeft_SRAM); // update eeprom value
    1262:	8d e1       	ldi	r24, 0x1D	; 29
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <__eeupd_word_usb1287>
    126a:	84 ec       	ldi	r24, 0xC4	; 196
    126c:	99 e0       	ldi	r25, 0x09	; 9
    126e:	28 ec       	ldi	r18, 0xC8	; 200
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	f9 01       	movw	r30, r18
    1274:	31 97       	sbiw	r30, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <__vector_17+0x708>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1278:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    127a:	d9 f7       	brne	.-10     	; 0x1272 <__vector_17+0x706>

			_delay_ms(250);
			/* Mount and open new log file on the Dataflash FAT partition */
			OpenLogFile();
    127c:	b6 da       	rcall	.-2708   	; 0x7ea <OpenLogFile>
    127e:	84 ec       	ldi	r24, 0xC4	; 196
    1280:	99 e0       	ldi	r25, 0x09	; 9
    1282:	28 ec       	ldi	r18, 0xC8	; 200
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	f9 01       	movw	r30, r18
    1288:	31 97       	sbiw	r30, 0x01	; 1
    128a:	f1 f7       	brne	.-4      	; 0x1288 <__vector_17+0x71c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    128c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    128e:	d9 f7       	brne	.-10     	; 0x1286 <__vector_17+0x71a>
			_delay_ms(250);
		}

		if ((LogfileCreateSuccess==true)&(Sensor2Received&Sensor3Received))
    1290:	80 91 a3 03 	lds	r24, 0x03A3
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	20 91 70 06 	lds	r18, 0x0670
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	82 23       	and	r24, r18
    129e:	93 23       	and	r25, r19
    12a0:	20 91 a5 03 	lds	r18, 0x03A5
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	82 23       	and	r24, r18
    12a8:	93 23       	and	r25, r19
    12aa:	89 2b       	or	r24, r25
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <__vector_17+0x744>
    12ae:	4f c0       	rjmp	.+158    	; 0x134e <__vector_17+0x7e2>
		{
			BytesWritten = sprintf(LineBuffer, "%02d:%02d:%02d,%d,%d,%d,%d\r\n", Hour, Minute, Second,
    12b0:	ad b7       	in	r26, 0x3d	; 61
    12b2:	be b7       	in	r27, 0x3e	; 62
    12b4:	52 97       	sbiw	r26, 0x12	; 18
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	be bf       	out	0x3e, r27	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	ad bf       	out	0x3d, r26	; 61
    12c0:	ed b7       	in	r30, 0x3d	; 61
    12c2:	fe b7       	in	r31, 0x3e	; 62
    12c4:	31 96       	adiw	r30, 0x01	; 1
    12c6:	8e 01       	movw	r16, r28
    12c8:	05 5f       	subi	r16, 0xF5	; 245
    12ca:	1f 4f       	sbci	r17, 0xFF	; 255
    12cc:	12 96       	adiw	r26, 0x02	; 2
    12ce:	1c 93       	st	X, r17
    12d0:	0e 93       	st	-X, r16
    12d2:	11 97       	sbiw	r26, 0x01	; 1
    12d4:	83 ee       	ldi	r24, 0xE3	; 227
    12d6:	92 e0       	ldi	r25, 0x02	; 2
    12d8:	93 83       	std	Z+3, r25	; 0x03
    12da:	82 83       	std	Z+2, r24	; 0x02
    12dc:	8c 81       	ldd	r24, Y+4	; 0x04
    12de:	84 83       	std	Z+4, r24	; 0x04
    12e0:	15 82       	std	Z+5, r1	; 0x05
    12e2:	8d 81       	ldd	r24, Y+5	; 0x05
    12e4:	86 83       	std	Z+6, r24	; 0x06
    12e6:	17 82       	std	Z+7, r1	; 0x07
    12e8:	8e 81       	ldd	r24, Y+6	; 0x06
    12ea:	80 87       	std	Z+8, r24	; 0x08
    12ec:	11 86       	std	Z+9, r1	; 0x09
    12ee:	8f 81       	ldd	r24, Y+7	; 0x07
    12f0:	99 27       	eor	r25, r25
    12f2:	87 fd       	sbrc	r24, 7
    12f4:	90 95       	com	r25
    12f6:	93 87       	std	Z+11, r25	; 0x0b
    12f8:	82 87       	std	Z+10, r24	; 0x0a
    12fa:	88 85       	ldd	r24, Y+8	; 0x08
    12fc:	84 87       	std	Z+12, r24	; 0x0c
    12fe:	15 86       	std	Z+13, r1	; 0x0d
    1300:	80 91 a2 03 	lds	r24, 0x03A2
    1304:	99 27       	eor	r25, r25
    1306:	87 fd       	sbrc	r24, 7
    1308:	90 95       	com	r25
    130a:	97 87       	std	Z+15, r25	; 0x0f
    130c:	86 87       	std	Z+14, r24	; 0x0e
    130e:	80 91 a4 03 	lds	r24, 0x03A4
    1312:	99 27       	eor	r25, r25
    1314:	87 fd       	sbrc	r24, 7
    1316:	90 95       	com	r25
    1318:	91 8b       	std	Z+17, r25	; 0x11
    131a:	80 8b       	std	Z+16, r24	; 0x10
    131c:	0e 94 ae 32 	call	0x655c	; 0x655c <sprintf>
    1320:	ac 01       	movw	r20, r24
    1322:	89 87       	std	Y+9, r24	; 0x09
    1324:	5a 87       	std	Y+10, r21	; 0x0a
			Temperature, Humidity, Sensor2Value, Sensor3Value);

			f_write(&TempLogFile, LineBuffer, BytesWritten, &BytesWritten);
    1326:	8d b7       	in	r24, 0x3d	; 61
    1328:	9e b7       	in	r25, 0x3e	; 62
    132a:	42 96       	adiw	r24, 0x12	; 18
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	9e bf       	out	0x3e, r25	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	8d bf       	out	0x3d, r24	; 61
    1336:	8c ea       	ldi	r24, 0xAC	; 172
    1338:	93 e0       	ldi	r25, 0x03	; 3
    133a:	b8 01       	movw	r22, r16
    133c:	9e 01       	movw	r18, r28
    133e:	27 5f       	subi	r18, 0xF7	; 247
    1340:	3f 4f       	sbci	r19, 0xFF	; 255
    1342:	0e 94 71 20 	call	0x40e2	; 0x40e2 <f_write>
			f_sync(&TempLogFile);
    1346:	8c ea       	ldi	r24, 0xAC	; 172
    1348:	93 e0       	ldi	r25, 0x03	; 3
    134a:	0e 94 8c 22 	call	0x4518	; 0x4518 <f_sync>
    134e:	8b b1       	in	r24, 0x0b	; 11
    1350:	8f 70       	andi	r24, 0x0F	; 15
    1352:	8b b9       	out	0x0b, r24	; 11
       	LEDs_SetAllLEDs(LEDS_NO_LEDS);

       	/* write tendency sign to lcd */
       	if (LCD_MODUL==4)
       	{
          lcd_pos (1, 20);
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	64 e1       	ldi	r22, 0x14	; 20
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
  	   	  if (Temperature > Sensor1PreviousValue + 1) lcd_write (0, 1);
    1360:	8f 81       	ldd	r24, Y+7	; 0x07
    1362:	48 2f       	mov	r20, r24
    1364:	55 27       	eor	r21, r21
    1366:	47 fd       	sbrc	r20, 7
    1368:	50 95       	com	r21
    136a:	80 91 6b 06 	lds	r24, 0x066B
    136e:	28 2f       	mov	r18, r24
    1370:	33 27       	eor	r19, r19
    1372:	27 fd       	sbrc	r18, 7
    1374:	30 95       	com	r19
    1376:	c9 01       	movw	r24, r18
    1378:	01 96       	adiw	r24, 0x01	; 1
    137a:	84 17       	cp	r24, r20
    137c:	95 07       	cpc	r25, r21
    137e:	14 f4       	brge	.+4      	; 0x1384 <__vector_17+0x818>
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	06 c0       	rjmp	.+12     	; 0x1390 <__vector_17+0x824>
  		    else if (Temperature < Sensor1PreviousValue - 1) lcd_write (1, 1);
    1384:	21 50       	subi	r18, 0x01	; 1
    1386:	30 40       	sbci	r19, 0x00	; 0
    1388:	42 17       	cp	r20, r18
    138a:	53 07       	cpc	r21, r19
    138c:	2c f4       	brge	.+10     	; 0x1398 <__vector_17+0x82c>
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	61 e0       	ldi	r22, 0x01	; 1
    1392:	0e 94 07 24 	call	0x480e	; 0x480e <lcd_write>
    1396:	04 c0       	rjmp	.+8      	; 0x13a0 <__vector_17+0x834>
          else lcd_print_str ("~");
    1398:	89 ed       	ldi	r24, 0xD9	; 217
    139a:	91 e0       	ldi	r25, 0x01	; 1
    139c:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>
          Sensor1PreviousValue = Temperature;
    13a0:	8f 81       	ldd	r24, Y+7	; 0x07
    13a2:	80 93 6b 06 	sts	0x066B, r24

          lcd_pos(2,20);
    13a6:	82 e0       	ldi	r24, 0x02	; 2
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	64 e1       	ldi	r22, 0x14	; 20
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
          if (Sensor2Value > Sensor2PreviousValue) lcd_write (0, 1);
    13b2:	90 91 a2 03 	lds	r25, 0x03A2
    13b6:	80 91 de 03 	lds	r24, 0x03DE
    13ba:	89 17       	cp	r24, r25
    13bc:	14 f4       	brge	.+4      	; 0x13c2 <__vector_17+0x856>
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	03 c0       	rjmp	.+6      	; 0x13c8 <__vector_17+0x85c>
          else if (Sensor2Value < Sensor2PreviousValue) lcd_write (1, 1);
    13c2:	98 17       	cp	r25, r24
    13c4:	2c f4       	brge	.+10     	; 0x13d0 <__vector_17+0x864>
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	61 e0       	ldi	r22, 0x01	; 1
    13ca:	0e 94 07 24 	call	0x480e	; 0x480e <lcd_write>
    13ce:	04 c0       	rjmp	.+8      	; 0x13d8 <__vector_17+0x86c>
          else lcd_print_str ("~");
    13d0:	89 ed       	ldi	r24, 0xD9	; 217
    13d2:	91 e0       	ldi	r25, 0x01	; 1
    13d4:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>
          Sensor2PreviousValue = Sensor2Value;
    13d8:	80 91 a2 03 	lds	r24, 0x03A2
    13dc:	80 93 de 03 	sts	0x03DE, r24

          lcd_pos(3,20);
    13e0:	83 e0       	ldi	r24, 0x03	; 3
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	64 e1       	ldi	r22, 0x14	; 20
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <lcd_pos>
          if (Sensor3Value > Sensor3PreviousValue) lcd_write (0, 1);
    13ec:	90 91 a4 03 	lds	r25, 0x03A4
    13f0:	80 91 6e 06 	lds	r24, 0x066E
    13f4:	89 17       	cp	r24, r25
    13f6:	14 f4       	brge	.+4      	; 0x13fc <__vector_17+0x890>
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	03 c0       	rjmp	.+6      	; 0x1402 <__vector_17+0x896>
          else if (Sensor3Value < Sensor3PreviousValue) lcd_write (1, 1);
    13fc:	98 17       	cp	r25, r24
    13fe:	2c f4       	brge	.+10     	; 0x140a <__vector_17+0x89e>
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	61 e0       	ldi	r22, 0x01	; 1
    1404:	0e 94 07 24 	call	0x480e	; 0x480e <lcd_write>
    1408:	04 c0       	rjmp	.+8      	; 0x1412 <__vector_17+0x8a6>
          else lcd_print_str ("~");
    140a:	89 ed       	ldi	r24, 0xD9	; 217
    140c:	91 e0       	ldi	r25, 0x01	; 1
    140e:	0e 94 6d 24 	call	0x48da	; 0x48da <lcd_print_str>
          Sensor3PreviousValue = Sensor3Value;
    1412:	80 91 a4 03 	lds	r24, 0x03A4
    1416:	80 93 6e 06 	sts	0x066E, r24
    141a:	8b b1       	in	r24, 0x0b	; 11
    141c:	8f 70       	andi	r24, 0x0F	; 15
    141e:	8b b9       	out	0x0b, r24	; 11
    1420:	06 c0       	rjmp	.+12     	; 0x142e <__vector_17+0x8c2>

          LEDs_SetAllLEDs(LEDS_NO_LEDS);
        }
	}
	else LEDs_SetAllLEDs(LEDMask);
}
    1422:	8b b1       	in	r24, 0x0b	; 11
    1424:	90 ef       	ldi	r25, 0xF0	; 240
    1426:	99 22       	and	r9, r25
    1428:	8f 70       	andi	r24, 0x0F	; 15
    142a:	98 2a       	or	r9, r24
    142c:	9b b8       	out	0x0b, r9	; 11
    142e:	a8 96       	adiw	r28, 0x28	; 40
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	ff 91       	pop	r31
    143a:	ef 91       	pop	r30
    143c:	bf 91       	pop	r27
    143e:	af 91       	pop	r26
    1440:	9f 91       	pop	r25
    1442:	8f 91       	pop	r24
    1444:	7f 91       	pop	r23
    1446:	6f 91       	pop	r22
    1448:	5f 91       	pop	r21
    144a:	4f 91       	pop	r20
    144c:	3f 91       	pop	r19
    144e:	2f 91       	pop	r18
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	ff 90       	pop	r15
    1456:	ef 90       	pop	r14
    1458:	df 90       	pop	r13
    145a:	cf 90       	pop	r12
    145c:	bf 90       	pop	r11
    145e:	af 90       	pop	r10
    1460:	9f 90       	pop	r9
    1462:	0f 90       	pop	r0
    1464:	0b be       	out	0x3b, r0	; 59
    1466:	0f 90       	pop	r0
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	0f 90       	pop	r0
    146c:	1f 90       	pop	r1
    146e:	18 95       	reti

00001470 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    1470:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    1472:	93 30       	cpi	r25, 0x03	; 3
    1474:	b1 f0       	breq	.+44     	; 0x14a2 <CALLBACK_USB_GetDescriptor+0x32>
    1476:	94 30       	cpi	r25, 0x04	; 4
    1478:	28 f4       	brcc	.+10     	; 0x1484 <CALLBACK_USB_GetDescriptor+0x14>
    147a:	91 30       	cpi	r25, 0x01	; 1
    147c:	41 f0       	breq	.+16     	; 0x148e <CALLBACK_USB_GetDescriptor+0x1e>
    147e:	92 30       	cpi	r25, 0x02	; 2
    1480:	79 f5       	brne	.+94     	; 0x14e0 <CALLBACK_USB_GetDescriptor+0x70>
    1482:	0a c0       	rjmp	.+20     	; 0x1498 <CALLBACK_USB_GetDescriptor+0x28>
    1484:	91 32       	cpi	r25, 0x21	; 33
    1486:	11 f1       	breq	.+68     	; 0x14cc <CALLBACK_USB_GetDescriptor+0x5c>
    1488:	92 32       	cpi	r25, 0x22	; 34
    148a:	51 f5       	brne	.+84     	; 0x14e0 <CALLBACK_USB_GetDescriptor+0x70>
    148c:	24 c0       	rjmp	.+72     	; 0x14d6 <CALLBACK_USB_GetDescriptor+0x66>
    148e:	e8 eb       	ldi	r30, 0xB8	; 184
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	22 e1       	ldi	r18, 0x12	; 18
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	28 c0       	rjmp	.+80     	; 0x14e8 <CALLBACK_USB_GetDescriptor+0x78>
    1498:	ea ec       	ldi	r30, 0xCA	; 202
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	29 e3       	ldi	r18, 0x39	; 57
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	23 c0       	rjmp	.+70     	; 0x14e8 <CALLBACK_USB_GetDescriptor+0x78>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	49 f0       	breq	.+18     	; 0x14b8 <CALLBACK_USB_GetDescriptor+0x48>
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	18 f0       	brcs	.+6      	; 0x14b0 <CALLBACK_USB_GetDescriptor+0x40>
    14aa:	82 30       	cpi	r24, 0x02	; 2
    14ac:	c9 f4       	brne	.+50     	; 0x14e0 <CALLBACK_USB_GetDescriptor+0x70>
    14ae:	0a c0       	rjmp	.+20     	; 0x14c4 <CALLBACK_USB_GetDescriptor+0x54>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    14b0:	e3 e0       	ldi	r30, 0x03	; 3
    14b2:	f1 e0       	ldi	r31, 0x01	; 1
    14b4:	84 91       	lpm	r24, Z+
    14b6:	03 c0       	rjmp	.+6      	; 0x14be <CALLBACK_USB_GetDescriptor+0x4e>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    14b8:	e7 e0       	ldi	r30, 0x07	; 7
    14ba:	f1 e0       	ldi	r31, 0x01	; 1
    14bc:	84 91       	lpm	r24, Z+
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	12 c0       	rjmp	.+36     	; 0x14e8 <CALLBACK_USB_GetDescriptor+0x78>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    14c4:	e1 e2       	ldi	r30, 0x21	; 33
    14c6:	f1 e0       	ldi	r31, 0x01	; 1
    14c8:	84 91       	lpm	r24, Z+
    14ca:	f9 cf       	rjmp	.-14     	; 0x14be <CALLBACK_USB_GetDescriptor+0x4e>
    14cc:	e3 ef       	ldi	r30, 0xF3	; 243
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	29 e0       	ldi	r18, 0x09	; 9
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	09 c0       	rjmp	.+18     	; 0x14e8 <CALLBACK_USB_GetDescriptor+0x78>

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
    14d6:	e8 e9       	ldi	r30, 0x98	; 152
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	20 e2       	ldi	r18, 0x20	; 32
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	04 c0       	rjmp	.+8      	; 0x14e8 <CALLBACK_USB_GetDescriptor+0x78>
    14e0:	e0 e0       	ldi	r30, 0x00	; 0
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
    14e8:	ed 93       	st	X+, r30
    14ea:	fc 93       	st	X, r31
	return Size;
}
    14ec:	c9 01       	movw	r24, r18
    14ee:	08 95       	ret

000014f0 <Dataflash_SelectChipFromPage>:
			 *
			 *  \param[in] PageAddress  Address of the page to manipulate, ranging from
			 *                          ((DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS) - 1).
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
    14f0:	9c 01       	movw	r18, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
    14f2:	8e b1       	in	r24, 0x0e	; 14
    14f4:	83 60       	ori	r24, 0x03	; 3
    14f6:	8e b9       	out	0x0e, r24	; 14
			 */
			static inline void Dataflash_SelectChipFromPage(const uint16_t PageAddress)
			{
				Dataflash_DeselectChip();

				if (PageAddress >= (DATAFLASH_PAGES * DATAFLASH_TOTALCHIPS))
    14f8:	80 e4       	ldi	r24, 0x40	; 64
    14fa:	20 30       	cpi	r18, 0x00	; 0
    14fc:	38 07       	cpc	r19, r24
    14fe:	58 f4       	brcc	.+22     	; 0x1516 <Dataflash_SelectChipFromPage+0x26>
				  return;

				if (PageAddress & 0x01)
    1500:	20 ff       	sbrs	r18, 0
    1502:	05 c0       	rjmp	.+10     	; 0x150e <Dataflash_SelectChipFromPage+0x1e>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
    1504:	8e b1       	in	r24, 0x0e	; 14
    1506:	8c 7f       	andi	r24, 0xFC	; 252
    1508:	81 60       	ori	r24, 0x01	; 1
    150a:	8e b9       	out	0x0e, r24	; 14
    150c:	08 95       	ret
    150e:	8e b1       	in	r24, 0x0e	; 14
    1510:	8c 7f       	andi	r24, 0xFC	; 252
    1512:	82 60       	ori	r24, 0x02	; 2
    1514:	8e b9       	out	0x0e, r24	; 14
    1516:	08 95       	ret

00001518 <Dataflash_ToggleSelectedChipCS>:
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
    1518:	8e b1       	in	r24, 0x0e	; 14
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
    151a:	9e b1       	in	r25, 0x0e	; 14
    151c:	93 60       	ori	r25, 0x03	; 3
    151e:	9e b9       	out	0x0e, r25	; 14
			{
				uint8_t SelectedChipMask = Dataflash_GetSelectedChip();

				Dataflash_DeselectChip();
				Dataflash_SelectChip(SelectedChipMask);
			}
    1520:	9e b1       	in	r25, 0x0e	; 14
    1522:	83 70       	andi	r24, 0x03	; 3
    1524:	9c 7f       	andi	r25, 0xFC	; 252
    1526:	89 2b       	or	r24, r25
    1528:	8e b9       	out	0x0e, r24	; 14
    152a:	08 95       	ret

0000152c <Dataflash_WaitWhileBusy>:
			/** Spin-loops while the currently selected dataflash is busy executing a command, such as a main
			 *  memory page program or main memory to buffer transfer.
			 */
			static inline void Dataflash_WaitWhileBusy(void)
			{
				Dataflash_ToggleSelectedChipCS();
    152c:	f5 df       	rcall	.-22     	; 0x1518 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    152e:	87 ed       	ldi	r24, 0xD7	; 215
    1530:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1532:	0d b4       	in	r0, 0x2d	; 45
    1534:	07 fe       	sbrs	r0, 7
    1536:	fd cf       	rjmp	.-6      	; 0x1532 <Dataflash_WaitWhileBusy+0x6>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1538:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    153a:	0d b4       	in	r0, 0x2d	; 45
    153c:	07 fe       	sbrs	r0, 7
    153e:	fd cf       	rjmp	.-6      	; 0x153a <Dataflash_WaitWhileBusy+0xe>
				Dataflash_SendByte(DF_CMD_GETSTATUS);
				while (!(Dataflash_ReceiveByte() & DF_STATUS_READY));
    1540:	0e b4       	in	r0, 0x2e	; 46
    1542:	07 fe       	sbrs	r0, 7
    1544:	f9 cf       	rjmp	.-14     	; 0x1538 <Dataflash_WaitWhileBusy+0xc>
				Dataflash_ToggleSelectedChipCS();
			}
    1546:	e8 cf       	rjmp	.-48     	; 0x1518 <Dataflash_ToggleSelectedChipCS>

00001548 <Dataflash_SendAddressBytes>:
			 *  \param[in] BufferByte   Address within the dataflash's buffer
			 */
			static inline void Dataflash_SendAddressBytes(uint16_t PageAddress,
			                                              const uint16_t BufferByte)
			{
				PageAddress >>= 1;
    1548:	9c 01       	movw	r18, r24
    154a:	36 95       	lsr	r19
    154c:	27 95       	ror	r18

				Dataflash_SendByte(PageAddress >> 5);
    154e:	36 e0       	ldi	r19, 0x06	; 6
    1550:	96 95       	lsr	r25
    1552:	87 95       	ror	r24
    1554:	3a 95       	dec	r19
    1556:	e1 f7       	brne	.-8      	; 0x1550 <Dataflash_SendAddressBytes+0x8>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1558:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    155a:	0d b4       	in	r0, 0x2d	; 45
    155c:	07 fe       	sbrs	r0, 7
    155e:	fd cf       	rjmp	.-6      	; 0x155a <Dataflash_SendAddressBytes+0x12>
				Dataflash_SendByte((PageAddress << 3) | (BufferByte >> 8));
    1560:	82 2f       	mov	r24, r18
    1562:	88 0f       	add	r24, r24
    1564:	88 0f       	add	r24, r24
    1566:	88 0f       	add	r24, r24
    1568:	87 2b       	or	r24, r23
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    156a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    156c:	0d b4       	in	r0, 0x2d	; 45
    156e:	07 fe       	sbrs	r0, 7
    1570:	fd cf       	rjmp	.-6      	; 0x156c <Dataflash_SendAddressBytes+0x24>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1572:	6e bd       	out	0x2e, r22	; 46
				while (!(SPSR & (1 << SPIF)));
    1574:	0d b4       	in	r0, 0x2d	; 45
    1576:	07 fe       	sbrs	r0, 7
    1578:	fd cf       	rjmp	.-6      	; 0x1574 <Dataflash_SendAddressBytes+0x2c>
				Dataflash_SendByte(BufferByte);
			}
    157a:	08 95       	ret

0000157c <DataflashManager_WriteBlocks_RAM>:
 *  \param[in] BufferPtr     Pointer to the data source RAM buffer
 */
void DataflashManager_WriteBlocks_RAM(const uint32_t BlockAddress,
                                      uint16_t TotalBlocks,
                                      const uint8_t* BufferPtr)
{
    157c:	6f 92       	push	r6
    157e:	7f 92       	push	r7
    1580:	8f 92       	push	r8
    1582:	9f 92       	push	r9
    1584:	af 92       	push	r10
    1586:	bf 92       	push	r11
    1588:	cf 92       	push	r12
    158a:	df 92       	push	r13
    158c:	ef 92       	push	r14
    158e:	ff 92       	push	r15
    1590:	0f 93       	push	r16
    1592:	1f 93       	push	r17
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	5a 01       	movw	r10, r20
    159a:	49 01       	movw	r8, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
    159c:	f9 e0       	ldi	r31, 0x09	; 9
    159e:	66 0f       	add	r22, r22
    15a0:	77 1f       	adc	r23, r23
    15a2:	88 1f       	adc	r24, r24
    15a4:	99 1f       	adc	r25, r25
    15a6:	fa 95       	dec	r31
    15a8:	d1 f7       	brne	.-12     	; 0x159e <DataflashManager_WriteBlocks_RAM+0x22>
    15aa:	9b 01       	movw	r18, r22
    15ac:	ac 01       	movw	r20, r24
    15ae:	ea e0       	ldi	r30, 0x0A	; 10
    15b0:	56 95       	lsr	r21
    15b2:	47 95       	ror	r20
    15b4:	37 95       	ror	r19
    15b6:	27 95       	ror	r18
    15b8:	ea 95       	dec	r30
    15ba:	d1 f7       	brne	.-12     	; 0x15b0 <DataflashManager_WriteBlocks_RAM+0x34>
    15bc:	e9 01       	movw	r28, r18
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
    15be:	8b 01       	movw	r16, r22
    15c0:	13 70       	andi	r17, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
    15c2:	c9 01       	movw	r24, r18
    15c4:	95 df       	rcall	.-214    	; 0x14f0 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    15c6:	83 e5       	ldi	r24, 0x53	; 83
    15c8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    15ca:	0d b4       	in	r0, 0x2d	; 45
    15cc:	07 fe       	sbrs	r0, 7
    15ce:	fd cf       	rjmp	.-6      	; 0x15ca <DataflashManager_WriteBlocks_RAM+0x4e>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
    15d0:	ce 01       	movw	r24, r28
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	b8 df       	rcall	.-144    	; 0x1548 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
    15d8:	a9 df       	rcall	.-174    	; 0x152c <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    15da:	84 e8       	ldi	r24, 0x84	; 132
    15dc:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    15de:	0d b4       	in	r0, 0x2d	; 45
    15e0:	07 fe       	sbrs	r0, 7
    15e2:	fd cf       	rjmp	.-6      	; 0x15de <DataflashManager_WriteBlocks_RAM+0x62>
                                      uint16_t TotalBlocks,
                                      const uint8_t* BufferPtr)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
    15e4:	c8 01       	movw	r24, r16
    15e6:	74 e0       	ldi	r23, 0x04	; 4
    15e8:	96 95       	lsr	r25
    15ea:	87 95       	ror	r24
    15ec:	7a 95       	dec	r23
    15ee:	e1 f7       	brne	.-8      	; 0x15e8 <DataflashManager_WriteBlocks_RAM+0x6c>
    15f0:	f8 2e       	mov	r15, r24
	Dataflash_WaitWhileBusy();
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	b8 01       	movw	r22, r16
    15f8:	a7 df       	rcall	.-178    	; 0x1548 <Dataflash_SendAddressBytes>
    15fa:	65 01       	movw	r12, r10
    15fc:	65 e0       	ldi	r22, 0x05	; 5
    15fe:	cc 0c       	add	r12, r12
    1600:	dd 1c       	adc	r13, r13
    1602:	6a 95       	dec	r22
    1604:	e1 f7       	brne	.-8      	; 0x15fe <DataflashManager_WriteBlocks_RAM+0x82>
    1606:	ee 24       	eor	r14, r14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1608:	54 e8       	ldi	r21, 0x84	; 132
    160a:	65 2e       	mov	r6, r21
    160c:	56 c0       	rjmp	.+172    	; 0x16ba <DataflashManager_WriteBlocks_RAM+0x13e>

	while (TotalBlocks)
    160e:	84 01       	movw	r16, r8
    1610:	77 24       	eor	r7, r7

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
    1612:	80 e4       	ldi	r24, 0x40	; 64
    1614:	f8 16       	cp	r15, r24
    1616:	a1 f5       	brne	.+104    	; 0x1680 <DataflashManager_WriteBlocks_RAM+0x104>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
    1618:	89 df       	rcall	.-238    	; 0x152c <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
    161a:	ee 20       	and	r14, r14
    161c:	11 f4       	brne	.+4      	; 0x1622 <DataflashManager_WriteBlocks_RAM+0xa6>
    161e:	83 e8       	ldi	r24, 0x83	; 131
    1620:	01 c0       	rjmp	.+2      	; 0x1624 <DataflashManager_WriteBlocks_RAM+0xa8>
    1622:	86 e8       	ldi	r24, 0x86	; 134
    1624:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1626:	0d b4       	in	r0, 0x2d	; 45
    1628:	07 fe       	sbrs	r0, 7
    162a:	fd cf       	rjmp	.-6      	; 0x1626 <DataflashManager_WriteBlocks_RAM+0xaa>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
    162c:	ce 01       	movw	r24, r28
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	8a df       	rcall	.-236    	; 0x1548 <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
    1634:	21 96       	adiw	r28, 0x01	; 1
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
    1636:	8e b1       	in	r24, 0x0e	; 14

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
    1638:	83 70       	andi	r24, 0x03	; 3
    163a:	81 30       	cpi	r24, 0x01	; 1
    163c:	09 f4       	brne	.+2      	; 0x1640 <DataflashManager_WriteBlocks_RAM+0xc4>
				  UsingSecondBuffer = !(UsingSecondBuffer);
    163e:	e8 26       	eor	r14, r24

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
    1640:	ce 01       	movw	r24, r28
    1642:	56 df       	rcall	.-340    	; 0x14f0 <Dataflash_SelectChipFromPage>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
    1644:	90 e4       	ldi	r25, 0x40	; 64
    1646:	c9 16       	cp	r12, r25
    1648:	d1 04       	cpc	r13, r1
    164a:	78 f4       	brcc	.+30     	; 0x166a <DataflashManager_WriteBlocks_RAM+0xee>
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
    164c:	6f df       	rcall	.-290    	; 0x152c <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
    164e:	ee 20       	and	r14, r14
    1650:	11 f4       	brne	.+4      	; 0x1656 <DataflashManager_WriteBlocks_RAM+0xda>
    1652:	83 e5       	ldi	r24, 0x53	; 83
    1654:	01 c0       	rjmp	.+2      	; 0x1658 <DataflashManager_WriteBlocks_RAM+0xdc>
    1656:	85 e5       	ldi	r24, 0x55	; 85
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1658:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    165a:	0d b4       	in	r0, 0x2d	; 45
    165c:	07 fe       	sbrs	r0, 7
    165e:	fd cf       	rjmp	.-6      	; 0x165a <DataflashManager_WriteBlocks_RAM+0xde>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
    1660:	ce 01       	movw	r24, r28
    1662:	60 e0       	ldi	r22, 0x00	; 0
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	70 df       	rcall	.-288    	; 0x1548 <Dataflash_SendAddressBytes>
					Dataflash_WaitWhileBusy();
    1668:	61 df       	rcall	.-318    	; 0x152c <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_ToggleSelectedChipCS();
    166a:	56 df       	rcall	.-340    	; 0x1518 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    166c:	6e bc       	out	0x2e, r6	; 46
				while (!(SPSR & (1 << SPIF)));
    166e:	0d b4       	in	r0, 0x2d	; 45
    1670:	07 fe       	sbrs	r0, 7
    1672:	fd cf       	rjmp	.-6      	; 0x166e <DataflashManager_WriteBlocks_RAM+0xf2>
				Dataflash_SendByte(DF_CMD_BUFF1WRITE);
				Dataflash_SendAddressBytes(0, 0);
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	65 df       	rcall	.-310    	; 0x1548 <Dataflash_SendAddressBytes>
    167e:	ff 24       	eor	r15, r15
    1680:	f8 01       	movw	r30, r16
    1682:	90 e0       	ldi	r25, 0x00	; 0
			}

			/* Write one 16-byte chunk of data to the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
			  Dataflash_SendByte(*(BufferPtr++));
    1684:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1686:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1688:	0d b4       	in	r0, 0x2d	; 45
    168a:	07 fe       	sbrs	r0, 7
    168c:	fd cf       	rjmp	.-6      	; 0x1688 <DataflashManager_WriteBlocks_RAM+0x10c>
				Dataflash_SendByte(DF_CMD_BUFF1WRITE);
				Dataflash_SendAddressBytes(0, 0);
			}

			/* Write one 16-byte chunk of data to the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
    168e:	9f 5f       	subi	r25, 0xFF	; 255
    1690:	90 31       	cpi	r25, 0x10	; 16
    1692:	c1 f7       	brne	.-16     	; 0x1684 <DataflashManager_WriteBlocks_RAM+0x108>
    1694:	00 5f       	subi	r16, 0xF0	; 240
    1696:	1f 4f       	sbci	r17, 0xFF	; 255
			  Dataflash_SendByte(*(BufferPtr++));

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
    1698:	f3 94       	inc	r15

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
    169a:	73 94       	inc	r7
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
    169c:	80 e2       	ldi	r24, 0x20	; 32
    169e:	78 16       	cp	r7, r24
    16a0:	09 f0       	breq	.+2      	; 0x16a4 <DataflashManager_WriteBlocks_RAM+0x128>
    16a2:	b7 cf       	rjmp	.-146    	; 0x1612 <DataflashManager_WriteBlocks_RAM+0x96>
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	92 e0       	ldi	r25, 0x02	; 2
    16a8:	88 0e       	add	r8, r24
    16aa:	99 1e       	adc	r9, r25
			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
		}

		/* Decrement the blocks remaining counter and reset the sub block counter */
		TotalBlocks--;
    16ac:	08 94       	sec
    16ae:	a1 08       	sbc	r10, r1
    16b0:	b1 08       	sbc	r11, r1
    16b2:	80 ee       	ldi	r24, 0xE0	; 224
    16b4:	9f ef       	ldi	r25, 0xFF	; 255
    16b6:	c8 0e       	add	r12, r24
    16b8:	d9 1e       	adc	r13, r25

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);

	while (TotalBlocks)
    16ba:	a1 14       	cp	r10, r1
    16bc:	b1 04       	cpc	r11, r1
    16be:	09 f0       	breq	.+2      	; 0x16c2 <DataflashManager_WriteBlocks_RAM+0x146>
    16c0:	a6 cf       	rjmp	.-180    	; 0x160e <DataflashManager_WriteBlocks_RAM+0x92>
		/* Decrement the blocks remaining counter and reset the sub block counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
    16c2:	34 df       	rcall	.-408    	; 0x152c <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
    16c4:	ee 20       	and	r14, r14
    16c6:	11 f4       	brne	.+4      	; 0x16cc <DataflashManager_WriteBlocks_RAM+0x150>
    16c8:	83 e8       	ldi	r24, 0x83	; 131
    16ca:	01 c0       	rjmp	.+2      	; 0x16ce <DataflashManager_WriteBlocks_RAM+0x152>
    16cc:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    16ce:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    16d0:	0d b4       	in	r0, 0x2d	; 45
    16d2:	07 fe       	sbrs	r0, 7
    16d4:	fd cf       	rjmp	.-6      	; 0x16d0 <DataflashManager_WriteBlocks_RAM+0x154>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
    16d6:	ce 01       	movw	r24, r28
    16d8:	60 e0       	ldi	r22, 0x00	; 0
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	35 df       	rcall	.-406    	; 0x1548 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
    16de:	26 df       	rcall	.-436    	; 0x152c <Dataflash_WaitWhileBusy>
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
    16e0:	8e b1       	in	r24, 0x0e	; 14
    16e2:	83 60       	ori	r24, 0x03	; 3
    16e4:	8e b9       	out	0x0e, r24	; 14

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	1f 91       	pop	r17
    16ec:	0f 91       	pop	r16
    16ee:	ff 90       	pop	r15
    16f0:	ef 90       	pop	r14
    16f2:	df 90       	pop	r13
    16f4:	cf 90       	pop	r12
    16f6:	bf 90       	pop	r11
    16f8:	af 90       	pop	r10
    16fa:	9f 90       	pop	r9
    16fc:	8f 90       	pop	r8
    16fe:	7f 90       	pop	r7
    1700:	6f 90       	pop	r6
    1702:	08 95       	ret

00001704 <DataflashManager_ReadBlocks_RAM>:
 *  \param[out] BufferPtr    Pointer to the data destination RAM buffer
 */
void DataflashManager_ReadBlocks_RAM(const uint32_t BlockAddress,
                                     uint16_t TotalBlocks,
                                     uint8_t* BufferPtr)
{
    1704:	af 92       	push	r10
    1706:	bf 92       	push	r11
    1708:	cf 92       	push	r12
    170a:	df 92       	push	r13
    170c:	ef 92       	push	r14
    170e:	ff 92       	push	r15
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	6a 01       	movw	r12, r20
    171a:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
    171c:	09 e0       	ldi	r16, 0x09	; 9
    171e:	66 0f       	add	r22, r22
    1720:	77 1f       	adc	r23, r23
    1722:	88 1f       	adc	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	0a 95       	dec	r16
    1728:	d1 f7       	brne	.-12     	; 0x171e <DataflashManager_ReadBlocks_RAM+0x1a>
    172a:	9b 01       	movw	r18, r22
    172c:	ac 01       	movw	r20, r24
    172e:	1a e0       	ldi	r17, 0x0A	; 10
    1730:	56 95       	lsr	r21
    1732:	47 95       	ror	r20
    1734:	37 95       	ror	r19
    1736:	27 95       	ror	r18
    1738:	1a 95       	dec	r17
    173a:	d1 f7       	brne	.-12     	; 0x1730 <DataflashManager_ReadBlocks_RAM+0x2c>
    173c:	89 01       	movw	r16, r18
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
    173e:	eb 01       	movw	r28, r22
    1740:	d3 70       	andi	r29, 0x03	; 3
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
    1742:	c9 01       	movw	r24, r18
    1744:	d5 de       	rcall	.-598    	; 0x14f0 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1746:	82 ed       	ldi	r24, 0xD2	; 210
    1748:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    174a:	0d b4       	in	r0, 0x2d	; 45
    174c:	07 fe       	sbrs	r0, 7
    174e:	fd cf       	rjmp	.-6      	; 0x174a <DataflashManager_ReadBlocks_RAM+0x46>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
    1750:	c8 01       	movw	r24, r16
    1752:	be 01       	movw	r22, r28
    1754:	f9 de       	rcall	.-526    	; 0x1548 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1756:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1758:	0d b4       	in	r0, 0x2d	; 45
    175a:	07 fe       	sbrs	r0, 7
    175c:	fd cf       	rjmp	.-6      	; 0x1758 <DataflashManager_ReadBlocks_RAM+0x54>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    175e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1760:	0d b4       	in	r0, 0x2d	; 45
    1762:	07 fe       	sbrs	r0, 7
    1764:	fd cf       	rjmp	.-6      	; 0x1760 <DataflashManager_ReadBlocks_RAM+0x5c>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1766:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1768:	0d b4       	in	r0, 0x2d	; 45
    176a:	07 fe       	sbrs	r0, 7
    176c:	fd cf       	rjmp	.-6      	; 0x1768 <DataflashManager_ReadBlocks_RAM+0x64>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    176e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1770:	0d b4       	in	r0, 0x2d	; 45
    1772:	07 fe       	sbrs	r0, 7
    1774:	fd cf       	rjmp	.-6      	; 0x1770 <DataflashManager_ReadBlocks_RAM+0x6c>
                                     uint16_t TotalBlocks,
                                     uint8_t* BufferPtr)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
    1776:	b4 e0       	ldi	r27, 0x04	; 4
    1778:	d6 95       	lsr	r29
    177a:	c7 95       	ror	r28
    177c:	ba 95       	dec	r27
    177e:	e1 f7       	brne	.-8      	; 0x1778 <DataflashManager_ReadBlocks_RAM+0x74>
    1780:	6c 2f       	mov	r22, r28
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1782:	a2 ed       	ldi	r26, 0xD2	; 210
    1784:	aa 2e       	mov	r10, r26
    1786:	39 c0       	rjmp	.+114    	; 0x17fa <DataflashManager_ReadBlocks_RAM+0xf6>
    1788:	e7 01       	movw	r28, r14
    178a:	bb 24       	eor	r11, r11

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
    178c:	60 34       	cpi	r22, 0x40	; 64
    178e:	e9 f4       	brne	.+58     	; 0x17ca <DataflashManager_ReadBlocks_RAM+0xc6>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
    1790:	0f 5f       	subi	r16, 0xFF	; 255
    1792:	1f 4f       	sbci	r17, 0xFF	; 255

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
    1794:	c8 01       	movw	r24, r16
    1796:	ac de       	rcall	.-680    	; 0x14f0 <Dataflash_SelectChipFromPage>
    1798:	ae bc       	out	0x2e, r10	; 46
				while (!(SPSR & (1 << SPIF)));
    179a:	0d b4       	in	r0, 0x2d	; 45
    179c:	07 fe       	sbrs	r0, 7
    179e:	fd cf       	rjmp	.-6      	; 0x179a <DataflashManager_ReadBlocks_RAM+0x96>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
    17a0:	c8 01       	movw	r24, r16
    17a2:	60 e0       	ldi	r22, 0x00	; 0
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	d0 de       	rcall	.-608    	; 0x1548 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    17a8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    17aa:	0d b4       	in	r0, 0x2d	; 45
    17ac:	07 fe       	sbrs	r0, 7
    17ae:	fd cf       	rjmp	.-6      	; 0x17aa <DataflashManager_ReadBlocks_RAM+0xa6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    17b0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    17b2:	0d b4       	in	r0, 0x2d	; 45
    17b4:	07 fe       	sbrs	r0, 7
    17b6:	fd cf       	rjmp	.-6      	; 0x17b2 <DataflashManager_ReadBlocks_RAM+0xae>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    17b8:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    17ba:	0d b4       	in	r0, 0x2d	; 45
    17bc:	07 fe       	sbrs	r0, 7
    17be:	fd cf       	rjmp	.-6      	; 0x17ba <DataflashManager_ReadBlocks_RAM+0xb6>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    17c0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    17c2:	0d b4       	in	r0, 0x2d	; 45
    17c4:	07 fe       	sbrs	r0, 7
    17c6:	fd cf       	rjmp	.-6      	; 0x17c2 <DataflashManager_ReadBlocks_RAM+0xbe>
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	fe 01       	movw	r30, r28
    17cc:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    17ce:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    17d0:	0d b4       	in	r0, 0x2d	; 45
    17d2:	07 fe       	sbrs	r0, 7
    17d4:	fd cf       	rjmp	.-6      	; 0x17d0 <DataflashManager_ReadBlocks_RAM+0xcc>
				return SPDR;
    17d6:	8e b5       	in	r24, 0x2e	; 46
				Dataflash_SendByte(0x00);
			}

			/* Read one 16-byte chunk of data from the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
			  *(BufferPtr++) = Dataflash_ReceiveByte();
    17d8:	81 93       	st	Z+, r24
				Dataflash_SendByte(0x00);
				Dataflash_SendByte(0x00);
			}

			/* Read one 16-byte chunk of data from the Dataflash */
			for (uint8_t ByteNum = 0; ByteNum < 16; ByteNum++)
    17da:	9f 5f       	subi	r25, 0xFF	; 255
    17dc:	90 31       	cpi	r25, 0x10	; 16
    17de:	b9 f7       	brne	.-18     	; 0x17ce <DataflashManager_ReadBlocks_RAM+0xca>
    17e0:	60 96       	adiw	r28, 0x10	; 16
			  *(BufferPtr++) = Dataflash_ReceiveByte();

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
    17e2:	6f 5f       	subi	r22, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
    17e4:	b3 94       	inc	r11
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
    17e6:	80 e2       	ldi	r24, 0x20	; 32
    17e8:	b8 16       	cp	r11, r24
    17ea:	81 f6       	brne	.-96     	; 0x178c <DataflashManager_ReadBlocks_RAM+0x88>
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	92 e0       	ldi	r25, 0x02	; 2
    17f0:	e8 0e       	add	r14, r24
    17f2:	f9 1e       	adc	r15, r25
			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
    17f4:	08 94       	sec
    17f6:	c1 08       	sbc	r12, r1
    17f8:	d1 08       	sbc	r13, r1
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	while (TotalBlocks)
    17fa:	c1 14       	cp	r12, r1
    17fc:	d1 04       	cpc	r13, r1
    17fe:	21 f6       	brne	.-120    	; 0x1788 <DataflashManager_ReadBlocks_RAM+0x84>
    1800:	8e b1       	in	r24, 0x0e	; 14
    1802:	83 60       	ori	r24, 0x03	; 3
    1804:	8e b9       	out	0x0e, r24	; 14
		TotalBlocks--;
	}

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	1f 91       	pop	r17
    180c:	0f 91       	pop	r16
    180e:	ff 90       	pop	r15
    1810:	ef 90       	pop	r14
    1812:	df 90       	pop	r13
    1814:	cf 90       	pop	r12
    1816:	bf 90       	pop	r11
    1818:	af 90       	pop	r10
    181a:	08 95       	ret

0000181c <DataflashManager_ResetDataflashProtections>:
    181c:	8e b1       	in	r24, 0x0e	; 14
    181e:	8c 7f       	andi	r24, 0xFC	; 252
    1820:	82 60       	ori	r24, 0x02	; 2
    1822:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1824:	87 ed       	ldi	r24, 0xD7	; 215
    1826:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1828:	0d b4       	in	r0, 0x2d	; 45
    182a:	07 fe       	sbrs	r0, 7
    182c:	fd cf       	rjmp	.-6      	; 0x1828 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    182e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1830:	0d b4       	in	r0, 0x2d	; 45
    1832:	07 fe       	sbrs	r0, 7
    1834:	fd cf       	rjmp	.-6      	; 0x1830 <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
    1836:	0e b4       	in	r0, 0x2e	; 46
    1838:	01 fe       	sbrs	r0, 1
    183a:	15 c0       	rjmp	.+42     	; 0x1866 <DataflashManager_ResetDataflashProtections+0x4a>
	{
		Dataflash_ToggleSelectedChipCS();
    183c:	6d de       	rcall	.-806    	; 0x1518 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    183e:	8d e3       	ldi	r24, 0x3D	; 61
    1840:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1842:	0d b4       	in	r0, 0x2d	; 45
    1844:	07 fe       	sbrs	r0, 7
    1846:	fd cf       	rjmp	.-6      	; 0x1842 <DataflashManager_ResetDataflashProtections+0x26>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1848:	8a e2       	ldi	r24, 0x2A	; 42
    184a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    184c:	0d b4       	in	r0, 0x2d	; 45
    184e:	07 fe       	sbrs	r0, 7
    1850:	fd cf       	rjmp	.-6      	; 0x184c <DataflashManager_ResetDataflashProtections+0x30>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1852:	8f e7       	ldi	r24, 0x7F	; 127
    1854:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1856:	0d b4       	in	r0, 0x2d	; 45
    1858:	07 fe       	sbrs	r0, 7
    185a:	fd cf       	rjmp	.-6      	; 0x1856 <DataflashManager_ResetDataflashProtections+0x3a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    185c:	8a e9       	ldi	r24, 0x9A	; 154
    185e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1860:	0d b4       	in	r0, 0x2d	; 45
    1862:	07 fe       	sbrs	r0, 7
    1864:	fd cf       	rjmp	.-6      	; 0x1860 <DataflashManager_ResetDataflashProtections+0x44>
    1866:	8e b1       	in	r24, 0x0e	; 14
    1868:	8c 7f       	andi	r24, 0xFC	; 252
    186a:	81 60       	ori	r24, 0x01	; 1
    186c:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    186e:	87 ed       	ldi	r24, 0xD7	; 215
    1870:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1872:	0d b4       	in	r0, 0x2d	; 45
    1874:	07 fe       	sbrs	r0, 7
    1876:	fd cf       	rjmp	.-6      	; 0x1872 <DataflashManager_ResetDataflashProtections+0x56>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1878:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    187a:	0d b4       	in	r0, 0x2d	; 45
    187c:	07 fe       	sbrs	r0, 7
    187e:	fd cf       	rjmp	.-6      	; 0x187a <DataflashManager_ResetDataflashProtections+0x5e>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
    1880:	0e b4       	in	r0, 0x2e	; 46
    1882:	01 fe       	sbrs	r0, 1
    1884:	15 c0       	rjmp	.+42     	; 0x18b0 <DataflashManager_ResetDataflashProtections+0x94>
	{
		Dataflash_ToggleSelectedChipCS();
    1886:	48 de       	rcall	.-880    	; 0x1518 <Dataflash_ToggleSelectedChipCS>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1888:	8d e3       	ldi	r24, 0x3D	; 61
    188a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    188c:	0d b4       	in	r0, 0x2d	; 45
    188e:	07 fe       	sbrs	r0, 7
    1890:	fd cf       	rjmp	.-6      	; 0x188c <DataflashManager_ResetDataflashProtections+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1892:	8a e2       	ldi	r24, 0x2A	; 42
    1894:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1896:	0d b4       	in	r0, 0x2d	; 45
    1898:	07 fe       	sbrs	r0, 7
    189a:	fd cf       	rjmp	.-6      	; 0x1896 <DataflashManager_ResetDataflashProtections+0x7a>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    189c:	8f e7       	ldi	r24, 0x7F	; 127
    189e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    18a0:	0d b4       	in	r0, 0x2d	; 45
    18a2:	07 fe       	sbrs	r0, 7
    18a4:	fd cf       	rjmp	.-6      	; 0x18a0 <DataflashManager_ResetDataflashProtections+0x84>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    18a6:	8a e9       	ldi	r24, 0x9A	; 154
    18a8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    18aa:	0d b4       	in	r0, 0x2d	; 45
    18ac:	07 fe       	sbrs	r0, 7
    18ae:	fd cf       	rjmp	.-6      	; 0x18aa <DataflashManager_ResetDataflashProtections+0x8e>
    18b0:	8e b1       	in	r24, 0x0e	; 14
    18b2:	83 60       	ori	r24, 0x03	; 3
    18b4:	8e b9       	out	0x0e, r24	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
    18b6:	08 95       	ret

000018b8 <DataflashManager_CheckDataflashOperation>:
    18b8:	8e b1       	in	r24, 0x0e	; 14
    18ba:	8c 7f       	andi	r24, 0xFC	; 252
    18bc:	82 60       	ori	r24, 0x02	; 2
    18be:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    18c0:	8f e9       	ldi	r24, 0x9F	; 159
    18c2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    18c4:	0d b4       	in	r0, 0x2d	; 45
    18c6:	07 fe       	sbrs	r0, 7
    18c8:	fd cf       	rjmp	.-6      	; 0x18c4 <DataflashManager_CheckDataflashOperation+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    18ca:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    18cc:	0d b4       	in	r0, 0x2d	; 45
    18ce:	07 fe       	sbrs	r0, 7
    18d0:	fd cf       	rjmp	.-6      	; 0x18cc <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
    18d2:	9e b5       	in	r25, 0x2e	; 46
    18d4:	8e b1       	in	r24, 0x0e	; 14
    18d6:	83 60       	ori	r24, 0x03	; 3
    18d8:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
    18da:	9f 31       	cpi	r25, 0x1F	; 31
    18dc:	11 f0       	breq	.+4      	; 0x18e2 <DataflashManager_CheckDataflashOperation+0x2a>
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	08 95       	ret
    18e2:	8e b1       	in	r24, 0x0e	; 14
    18e4:	8c 7f       	andi	r24, 0xFC	; 252
    18e6:	81 60       	ori	r24, 0x01	; 1
    18e8:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    18ea:	8f e9       	ldi	r24, 0x9F	; 159
    18ec:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    18ee:	0d b4       	in	r0, 0x2d	; 45
    18f0:	07 fe       	sbrs	r0, 7
    18f2:	fd cf       	rjmp	.-6      	; 0x18ee <DataflashManager_CheckDataflashOperation+0x36>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    18f4:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    18f6:	0d b4       	in	r0, 0x2d	; 45
    18f8:	07 fe       	sbrs	r0, 7
    18fa:	fd cf       	rjmp	.-6      	; 0x18f6 <DataflashManager_CheckDataflashOperation+0x3e>
				return SPDR;
    18fc:	9e b5       	in	r25, 0x2e	; 46
    18fe:	8e b1       	in	r24, 0x0e	; 14
    1900:	83 60       	ori	r24, 0x03	; 3
    1902:	8e b9       	out	0x0e, r24	; 14
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	9f 31       	cpi	r25, 0x1F	; 31
    1908:	09 f4       	brne	.+2      	; 0x190c <DataflashManager_CheckDataflashOperation+0x54>
    190a:	81 e0       	ldi	r24, 0x01	; 1
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
	  return false;
	#endif

	return true;
}
    190c:	08 95       	ret

0000190e <DataflashManager_ReadBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */
void DataflashManager_ReadBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
    190e:	af 92       	push	r10
    1910:	bf 92       	push	r11
    1912:	cf 92       	push	r12
    1914:	df 92       	push	r13
    1916:	ef 92       	push	r14
    1918:	ff 92       	push	r15
    191a:	0f 93       	push	r16
    191c:	1f 93       	push	r17
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	0f 92       	push	r0
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	5c 01       	movw	r10, r24
    192a:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
    192c:	e9 e0       	ldi	r30, 0x09	; 9
    192e:	44 0f       	add	r20, r20
    1930:	55 1f       	adc	r21, r21
    1932:	66 1f       	adc	r22, r22
    1934:	77 1f       	adc	r23, r23
    1936:	ea 95       	dec	r30
    1938:	d1 f7       	brne	.-12     	; 0x192e <DataflashManager_ReadBlocks+0x20>
    193a:	db 01       	movw	r26, r22
    193c:	ca 01       	movw	r24, r20
    193e:	3a e0       	ldi	r19, 0x0A	; 10
    1940:	b6 95       	lsr	r27
    1942:	a7 95       	ror	r26
    1944:	97 95       	ror	r25
    1946:	87 95       	ror	r24
    1948:	3a 95       	dec	r19
    194a:	d1 f7       	brne	.-12     	; 0x1940 <DataflashManager_ReadBlocks+0x32>
    194c:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
    194e:	2f ef       	ldi	r18, 0xFF	; 255
    1950:	c2 2e       	mov	r12, r18
    1952:	23 e0       	ldi	r18, 0x03	; 3
    1954:	d2 2e       	mov	r13, r18
    1956:	c4 22       	and	r12, r20
    1958:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
    195a:	ca dd       	rcall	.-1132   	; 0x14f0 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    195c:	82 ed       	ldi	r24, 0xD2	; 210
    195e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1960:	0d b4       	in	r0, 0x2d	; 45
    1962:	07 fe       	sbrs	r0, 7
    1964:	fd cf       	rjmp	.-6      	; 0x1960 <DataflashManager_ReadBlocks+0x52>

	/* Send the Dataflash main memory page read command */
	Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
	Dataflash_SendAddressBytes(CurrDFPage, CurrDFPageByte);
    1966:	c8 01       	movw	r24, r16
    1968:	b6 01       	movw	r22, r12
    196a:	ee dd       	rcall	.-1060   	; 0x1548 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    196c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    196e:	0d b4       	in	r0, 0x2d	; 45
    1970:	07 fe       	sbrs	r0, 7
    1972:	fd cf       	rjmp	.-6      	; 0x196e <DataflashManager_ReadBlocks+0x60>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1974:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1976:	0d b4       	in	r0, 0x2d	; 45
    1978:	07 fe       	sbrs	r0, 7
    197a:	fd cf       	rjmp	.-6      	; 0x1976 <DataflashManager_ReadBlocks+0x68>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    197c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    197e:	0d b4       	in	r0, 0x2d	; 45
    1980:	07 fe       	sbrs	r0, 7
    1982:	fd cf       	rjmp	.-6      	; 0x197e <DataflashManager_ReadBlocks+0x70>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1984:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1986:	0d b4       	in	r0, 0x2d	; 45
    1988:	07 fe       	sbrs	r0, 7
    198a:	fd cf       	rjmp	.-6      	; 0x1986 <DataflashManager_ReadBlocks+0x78>
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);
	Dataflash_SendByte(0x00);

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
    198c:	0e 94 3c 29 	call	0x5278	; 0x5278 <Endpoint_WaitUntilReady>
    1990:	88 23       	and	r24, r24
    1992:	09 f0       	breq	.+2      	; 0x1996 <DataflashManager_ReadBlocks+0x88>
    1994:	c6 c0       	rjmp	.+396    	; 0x1b22 <DataflashManager_ReadBlocks+0x214>
                                 const uint32_t BlockAddress,
                                 uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
    1996:	94 e0       	ldi	r25, 0x04	; 4
    1998:	d6 94       	lsr	r13
    199a:	c7 94       	ror	r12
    199c:	9a 95       	dec	r25
    199e:	e1 f7       	brne	.-8      	; 0x1998 <DataflashManager_ReadBlocks+0x8a>
    19a0:	9c 2d       	mov	r25, r12
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    19a2:	82 ed       	ldi	r24, 0xD2	; 210
    19a4:	c8 2e       	mov	r12, r24
    19a6:	ad c0       	rjmp	.+346    	; 0x1b02 <DataflashManager_ReadBlocks+0x1f4>
    19a8:	dd 24       	eor	r13, r13
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    19aa:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
    19ae:	85 fd       	sbrc	r24, 5
    19b0:	0c c0       	rjmp	.+24     	; 0x19ca <DataflashManager_ReadBlocks+0xbc>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19b2:	80 91 e8 00 	lds	r24, 0x00E8
    19b6:	8e 77       	andi	r24, 0x7E	; 126
    19b8:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the endpoint bank to send its contents to the host */
				Endpoint_ClearIN();

				/* Wait until the endpoint is ready for more data */
				if (Endpoint_WaitUntilReady())
    19bc:	99 83       	std	Y+1, r25	; 0x01
    19be:	0e 94 3c 29 	call	0x5278	; 0x5278 <Endpoint_WaitUntilReady>
    19c2:	99 81       	ldd	r25, Y+1	; 0x01
    19c4:	88 23       	and	r24, r24
    19c6:	09 f0       	breq	.+2      	; 0x19ca <DataflashManager_ReadBlocks+0xbc>
    19c8:	ac c0       	rjmp	.+344    	; 0x1b22 <DataflashManager_ReadBlocks+0x214>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
    19ca:	90 34       	cpi	r25, 0x40	; 64
    19cc:	e9 f4       	brne	.+58     	; 0x1a08 <DataflashManager_ReadBlocks+0xfa>
			{
				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
    19ce:	0f 5f       	subi	r16, 0xFF	; 255
    19d0:	1f 4f       	sbci	r17, 0xFF	; 255

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
    19d2:	c8 01       	movw	r24, r16
    19d4:	8d dd       	rcall	.-1254   	; 0x14f0 <Dataflash_SelectChipFromPage>
    19d6:	ce bc       	out	0x2e, r12	; 46
				while (!(SPSR & (1 << SPIF)));
    19d8:	0d b4       	in	r0, 0x2d	; 45
    19da:	07 fe       	sbrs	r0, 7
    19dc:	fd cf       	rjmp	.-6      	; 0x19d8 <DataflashManager_ReadBlocks+0xca>

				/* Send the Dataflash main memory page read command */
				Dataflash_SendByte(DF_CMD_MAINMEMPAGEREAD);
				Dataflash_SendAddressBytes(CurrDFPage, 0);
    19de:	c8 01       	movw	r24, r16
    19e0:	60 e0       	ldi	r22, 0x00	; 0
    19e2:	70 e0       	ldi	r23, 0x00	; 0
    19e4:	b1 dd       	rcall	.-1182   	; 0x1548 <Dataflash_SendAddressBytes>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    19e6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    19e8:	0d b4       	in	r0, 0x2d	; 45
    19ea:	07 fe       	sbrs	r0, 7
    19ec:	fd cf       	rjmp	.-6      	; 0x19e8 <DataflashManager_ReadBlocks+0xda>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    19ee:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    19f0:	0d b4       	in	r0, 0x2d	; 45
    19f2:	07 fe       	sbrs	r0, 7
    19f4:	fd cf       	rjmp	.-6      	; 0x19f0 <DataflashManager_ReadBlocks+0xe2>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    19f6:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    19f8:	0d b4       	in	r0, 0x2d	; 45
    19fa:	07 fe       	sbrs	r0, 7
    19fc:	fd cf       	rjmp	.-6      	; 0x19f8 <DataflashManager_ReadBlocks+0xea>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    19fe:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1a00:	0d b4       	in	r0, 0x2d	; 45
    1a02:	07 fe       	sbrs	r0, 7
    1a04:	fd cf       	rjmp	.-6      	; 0x1a00 <DataflashManager_ReadBlocks+0xf2>
    1a06:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1a08:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1a0a:	0d b4       	in	r0, 0x2d	; 45
    1a0c:	07 fe       	sbrs	r0, 7
    1a0e:	fd cf       	rjmp	.-6      	; 0x1a0a <DataflashManager_ReadBlocks+0xfc>
				return SPDR;
    1a10:	8e b5       	in	r24, 0x2e	; 46
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    1a12:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1a16:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1a18:	0d b4       	in	r0, 0x2d	; 45
    1a1a:	07 fe       	sbrs	r0, 7
    1a1c:	fd cf       	rjmp	.-6      	; 0x1a18 <DataflashManager_ReadBlocks+0x10a>
				return SPDR;
    1a1e:	8e b5       	in	r24, 0x2e	; 46
    1a20:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1a24:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1a26:	0d b4       	in	r0, 0x2d	; 45
    1a28:	07 fe       	sbrs	r0, 7
    1a2a:	fd cf       	rjmp	.-6      	; 0x1a26 <DataflashManager_ReadBlocks+0x118>
				return SPDR;
    1a2c:	8e b5       	in	r24, 0x2e	; 46
    1a2e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1a32:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1a34:	0d b4       	in	r0, 0x2d	; 45
    1a36:	07 fe       	sbrs	r0, 7
    1a38:	fd cf       	rjmp	.-6      	; 0x1a34 <DataflashManager_ReadBlocks+0x126>
				return SPDR;
    1a3a:	8e b5       	in	r24, 0x2e	; 46
    1a3c:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1a40:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1a42:	0d b4       	in	r0, 0x2d	; 45
    1a44:	07 fe       	sbrs	r0, 7
    1a46:	fd cf       	rjmp	.-6      	; 0x1a42 <DataflashManager_ReadBlocks+0x134>
				return SPDR;
    1a48:	8e b5       	in	r24, 0x2e	; 46
    1a4a:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1a4e:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1a50:	0d b4       	in	r0, 0x2d	; 45
    1a52:	07 fe       	sbrs	r0, 7
    1a54:	fd cf       	rjmp	.-6      	; 0x1a50 <DataflashManager_ReadBlocks+0x142>
				return SPDR;
    1a56:	8e b5       	in	r24, 0x2e	; 46
    1a58:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1a5c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1a5e:	0d b4       	in	r0, 0x2d	; 45
    1a60:	07 fe       	sbrs	r0, 7
    1a62:	fd cf       	rjmp	.-6      	; 0x1a5e <DataflashManager_ReadBlocks+0x150>
				return SPDR;
    1a64:	8e b5       	in	r24, 0x2e	; 46
    1a66:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1a6a:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1a6c:	0d b4       	in	r0, 0x2d	; 45
    1a6e:	07 fe       	sbrs	r0, 7
    1a70:	fd cf       	rjmp	.-6      	; 0x1a6c <DataflashManager_ReadBlocks+0x15e>
				return SPDR;
    1a72:	8e b5       	in	r24, 0x2e	; 46
    1a74:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1a78:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1a7a:	0d b4       	in	r0, 0x2d	; 45
    1a7c:	07 fe       	sbrs	r0, 7
    1a7e:	fd cf       	rjmp	.-6      	; 0x1a7a <DataflashManager_ReadBlocks+0x16c>
				return SPDR;
    1a80:	8e b5       	in	r24, 0x2e	; 46
    1a82:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1a86:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1a88:	0d b4       	in	r0, 0x2d	; 45
    1a8a:	07 fe       	sbrs	r0, 7
    1a8c:	fd cf       	rjmp	.-6      	; 0x1a88 <DataflashManager_ReadBlocks+0x17a>
				return SPDR;
    1a8e:	8e b5       	in	r24, 0x2e	; 46
    1a90:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1a94:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1a96:	0d b4       	in	r0, 0x2d	; 45
    1a98:	07 fe       	sbrs	r0, 7
    1a9a:	fd cf       	rjmp	.-6      	; 0x1a96 <DataflashManager_ReadBlocks+0x188>
				return SPDR;
    1a9c:	8e b5       	in	r24, 0x2e	; 46
    1a9e:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1aa2:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1aa4:	0d b4       	in	r0, 0x2d	; 45
    1aa6:	07 fe       	sbrs	r0, 7
    1aa8:	fd cf       	rjmp	.-6      	; 0x1aa4 <DataflashManager_ReadBlocks+0x196>
				return SPDR;
    1aaa:	8e b5       	in	r24, 0x2e	; 46
    1aac:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1ab0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1ab2:	0d b4       	in	r0, 0x2d	; 45
    1ab4:	07 fe       	sbrs	r0, 7
    1ab6:	fd cf       	rjmp	.-6      	; 0x1ab2 <DataflashManager_ReadBlocks+0x1a4>
				return SPDR;
    1ab8:	8e b5       	in	r24, 0x2e	; 46
    1aba:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1abe:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1ac0:	0d b4       	in	r0, 0x2d	; 45
    1ac2:	07 fe       	sbrs	r0, 7
    1ac4:	fd cf       	rjmp	.-6      	; 0x1ac0 <DataflashManager_ReadBlocks+0x1b2>
				return SPDR;
    1ac6:	8e b5       	in	r24, 0x2e	; 46
    1ac8:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1acc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1ace:	0d b4       	in	r0, 0x2d	; 45
    1ad0:	07 fe       	sbrs	r0, 7
    1ad2:	fd cf       	rjmp	.-6      	; 0x1ace <DataflashManager_ReadBlocks+0x1c0>
				return SPDR;
    1ad4:	8e b5       	in	r24, 0x2e	; 46
    1ad6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
    1ada:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
    1adc:	0d b4       	in	r0, 0x2d	; 45
    1ade:	07 fe       	sbrs	r0, 7
    1ae0:	fd cf       	rjmp	.-6      	; 0x1adc <DataflashManager_ReadBlocks+0x1ce>
				return SPDR;
    1ae2:	8e b5       	in	r24, 0x2e	; 46
    1ae4:	80 93 f1 00 	sts	0x00F1, r24

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
    1ae8:	f5 01       	movw	r30, r10
    1aea:	86 a9       	ldd	r24, Z+54	; 0x36
    1aec:	88 23       	and	r24, r24
    1aee:	c9 f4       	brne	.+50     	; 0x1b22 <DataflashManager_ReadBlocks+0x214>
			Endpoint_Write_Byte(Dataflash_ReceiveByte());
			Endpoint_Write_Byte(Dataflash_ReceiveByte());
			Endpoint_Write_Byte(Dataflash_ReceiveByte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
    1af0:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
    1af2:	d3 94       	inc	r13
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
    1af4:	f0 e2       	ldi	r31, 0x20	; 32
    1af6:	df 16       	cp	r13, r31
    1af8:	09 f0       	breq	.+2      	; 0x1afc <DataflashManager_ReadBlocks+0x1ee>
    1afa:	57 cf       	rjmp	.-338    	; 0x19aa <DataflashManager_ReadBlocks+0x9c>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
    1afc:	08 94       	sec
    1afe:	e1 08       	sbc	r14, r1
    1b00:	f1 08       	sbc	r15, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
    1b02:	e1 14       	cp	r14, r1
    1b04:	f1 04       	cpc	r15, r1
    1b06:	09 f0       	breq	.+2      	; 0x1b0a <DataflashManager_ReadBlocks+0x1fc>
    1b08:	4f cf       	rjmp	.-354    	; 0x19a8 <DataflashManager_ReadBlocks+0x9a>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1b0a:	80 91 e8 00 	lds	r24, 0x00E8
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    1b0e:	85 fd       	sbrc	r24, 5
    1b10:	05 c0       	rjmp	.+10     	; 0x1b1c <DataflashManager_ReadBlocks+0x20e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b12:	80 91 e8 00 	lds	r24, 0x00E8
    1b16:	8e 77       	andi	r24, 0x7E	; 126
    1b18:	80 93 e8 00 	sts	0x00E8, r24
    1b1c:	8e b1       	in	r24, 0x0e	; 14
    1b1e:	83 60       	ori	r24, 0x03	; 3
    1b20:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearIN();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
    1b22:	0f 90       	pop	r0
    1b24:	cf 91       	pop	r28
    1b26:	df 91       	pop	r29
    1b28:	1f 91       	pop	r17
    1b2a:	0f 91       	pop	r16
    1b2c:	ff 90       	pop	r15
    1b2e:	ef 90       	pop	r14
    1b30:	df 90       	pop	r13
    1b32:	cf 90       	pop	r12
    1b34:	bf 90       	pop	r11
    1b36:	af 90       	pop	r10
    1b38:	08 95       	ret

00001b3a <DataflashManager_WriteBlocks>:
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
void DataflashManager_WriteBlocks(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
    1b3a:	8f 92       	push	r8
    1b3c:	9f 92       	push	r9
    1b3e:	af 92       	push	r10
    1b40:	bf 92       	push	r11
    1b42:	cf 92       	push	r12
    1b44:	df 92       	push	r13
    1b46:	ef 92       	push	r14
    1b48:	ff 92       	push	r15
    1b4a:	0f 93       	push	r16
    1b4c:	1f 93       	push	r17
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	0f 92       	push	r0
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
    1b58:	5c 01       	movw	r10, r24
    1b5a:	79 01       	movw	r14, r18
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
    1b5c:	09 e0       	ldi	r16, 0x09	; 9
    1b5e:	44 0f       	add	r20, r20
    1b60:	55 1f       	adc	r21, r21
    1b62:	66 1f       	adc	r22, r22
    1b64:	77 1f       	adc	r23, r23
    1b66:	0a 95       	dec	r16
    1b68:	d1 f7       	brne	.-12     	; 0x1b5e <DataflashManager_WriteBlocks+0x24>
    1b6a:	db 01       	movw	r26, r22
    1b6c:	ca 01       	movw	r24, r20
    1b6e:	1a e0       	ldi	r17, 0x0A	; 10
    1b70:	b6 95       	lsr	r27
    1b72:	a7 95       	ror	r26
    1b74:	97 95       	ror	r25
    1b76:	87 95       	ror	r24
    1b78:	1a 95       	dec	r17
    1b7a:	d1 f7       	brne	.-12     	; 0x1b70 <DataflashManager_WriteBlocks+0x36>
    1b7c:	8c 01       	movw	r16, r24
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
    1b7e:	bf ef       	ldi	r27, 0xFF	; 255
    1b80:	cb 2e       	mov	r12, r27
    1b82:	b3 e0       	ldi	r27, 0x03	; 3
    1b84:	db 2e       	mov	r13, r27
    1b86:	c4 22       	and	r12, r20
    1b88:	d5 22       	and	r13, r21
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
	bool     UsingSecondBuffer   = false;

	/* Select the correct starting Dataflash IC for the block requested */
	Dataflash_SelectChipFromPage(CurrDFPage);
    1b8a:	b2 dc       	rcall	.-1692   	; 0x14f0 <Dataflash_SelectChipFromPage>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1b8c:	83 e5       	ldi	r24, 0x53	; 83
    1b8e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1b90:	0d b4       	in	r0, 0x2d	; 45
    1b92:	07 fe       	sbrs	r0, 7
    1b94:	fd cf       	rjmp	.-6      	; 0x1b90 <DataflashManager_WriteBlocks+0x56>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
	/* Copy selected dataflash's current page contents to the Dataflash buffer */
	Dataflash_SendByte(DF_CMD_MAINMEMTOBUFF1);
	Dataflash_SendAddressBytes(CurrDFPage, 0);
    1b96:	c8 01       	movw	r24, r16
    1b98:	60 e0       	ldi	r22, 0x00	; 0
    1b9a:	70 e0       	ldi	r23, 0x00	; 0
    1b9c:	d5 dc       	rcall	.-1622   	; 0x1548 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
    1b9e:	c6 dc       	rcall	.-1652   	; 0x152c <Dataflash_WaitWhileBusy>
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1ba0:	84 e8       	ldi	r24, 0x84	; 132
    1ba2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1ba4:	0d b4       	in	r0, 0x2d	; 45
    1ba6:	07 fe       	sbrs	r0, 7
    1ba8:	fd cf       	rjmp	.-6      	; 0x1ba4 <DataflashManager_WriteBlocks+0x6a>
#endif

	/* Send the Dataflash buffer write command */
	Dataflash_SendByte(DF_CMD_BUFF1WRITE);
	Dataflash_SendAddressBytes(0, CurrDFPageByte);
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	b6 01       	movw	r22, r12
    1bb0:	cb dc       	rcall	.-1642   	; 0x1548 <Dataflash_SendAddressBytes>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
    1bb2:	0e 94 3c 29 	call	0x5278	; 0x5278 <Endpoint_WaitUntilReady>
    1bb6:	88 23       	and	r24, r24
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <DataflashManager_WriteBlocks+0x82>
    1bba:	eb c0       	rjmp	.+470    	; 0x1d92 <DataflashManager_WriteBlocks+0x258>
                                  const uint32_t BlockAddress,
                                  uint16_t TotalBlocks)
{
	uint16_t CurrDFPage          = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) / DATAFLASH_PAGE_SIZE);
	uint16_t CurrDFPageByte      = ((BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE) % DATAFLASH_PAGE_SIZE);
	uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);
    1bbc:	a4 e0       	ldi	r26, 0x04	; 4
    1bbe:	d6 94       	lsr	r13
    1bc0:	c7 94       	ror	r12
    1bc2:	aa 95       	dec	r26
    1bc4:	e1 f7       	brne	.-8      	; 0x1bbe <DataflashManager_WriteBlocks+0x84>
    1bc6:	9c 2d       	mov	r25, r12
    1bc8:	47 01       	movw	r8, r14
    1bca:	f5 e0       	ldi	r31, 0x05	; 5
    1bcc:	88 0c       	add	r8, r8
    1bce:	99 1c       	adc	r9, r9
    1bd0:	fa 95       	dec	r31
    1bd2:	e1 f7       	brne	.-8      	; 0x1bcc <DataflashManager_WriteBlocks+0x92>
    1bd4:	dd 24       	eor	r13, r13
    1bd6:	be c0       	rjmp	.+380    	; 0x1d54 <DataflashManager_WriteBlocks+0x21a>
    1bd8:	cc 24       	eor	r12, r12
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1bda:	80 91 e8 00 	lds	r24, 0x00E8

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently empty */
			if (!(Endpoint_IsReadWriteAllowed()))
    1bde:	85 fd       	sbrc	r24, 5
    1be0:	0c c0       	rjmp	.+24     	; 0x1bfa <DataflashManager_WriteBlocks+0xc0>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1be2:	80 91 e8 00 	lds	r24, 0x00E8
    1be6:	8b 77       	andi	r24, 0x7B	; 123
    1be8:	80 93 e8 00 	sts	0x00E8, r24
			{
				/* Clear the current endpoint bank */
				Endpoint_ClearOUT();

				/* Wait until the host has sent another packet */
				if (Endpoint_WaitUntilReady())
    1bec:	99 83       	std	Y+1, r25	; 0x01
    1bee:	0e 94 3c 29 	call	0x5278	; 0x5278 <Endpoint_WaitUntilReady>
    1bf2:	99 81       	ldd	r25, Y+1	; 0x01
    1bf4:	88 23       	and	r24, r24
    1bf6:	09 f0       	breq	.+2      	; 0x1bfa <DataflashManager_WriteBlocks+0xc0>
    1bf8:	cc c0       	rjmp	.+408    	; 0x1d92 <DataflashManager_WriteBlocks+0x258>
				  return;
			}

			/* Check if end of Dataflash page reached */
			if (CurrDFPageByteDiv16 == (DATAFLASH_PAGE_SIZE >> 4))
    1bfa:	90 34       	cpi	r25, 0x40	; 64
    1bfc:	09 f0       	breq	.+2      	; 0x1c00 <DataflashManager_WriteBlocks+0xc6>
    1bfe:	39 c0       	rjmp	.+114    	; 0x1c72 <DataflashManager_WriteBlocks+0x138>
			{
				/* Write the Dataflash buffer contents back to the Dataflash page */
				Dataflash_WaitWhileBusy();
    1c00:	95 dc       	rcall	.-1750   	; 0x152c <Dataflash_WaitWhileBusy>
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
    1c02:	dd 20       	and	r13, r13
    1c04:	11 f4       	brne	.+4      	; 0x1c0a <DataflashManager_WriteBlocks+0xd0>
    1c06:	83 e8       	ldi	r24, 0x83	; 131
    1c08:	01 c0       	rjmp	.+2      	; 0x1c0c <DataflashManager_WriteBlocks+0xd2>
    1c0a:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1c0c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1c0e:	0d b4       	in	r0, 0x2d	; 45
    1c10:	07 fe       	sbrs	r0, 7
    1c12:	fd cf       	rjmp	.-6      	; 0x1c0e <DataflashManager_WriteBlocks+0xd4>
				Dataflash_SendAddressBytes(CurrDFPage, 0);
    1c14:	c8 01       	movw	r24, r16
    1c16:	60 e0       	ldi	r22, 0x00	; 0
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	96 dc       	rcall	.-1748   	; 0x1548 <Dataflash_SendAddressBytes>

				/* Reset the Dataflash buffer counter, increment the page counter */
				CurrDFPageByteDiv16 = 0;
				CurrDFPage++;
    1c1c:	0f 5f       	subi	r16, 0xFF	; 255
    1c1e:	1f 4f       	sbci	r17, 0xFF	; 255
			 *  or a DATAFLASH_CHIPn mask (where n is the chip number).
			 */
			static inline uint8_t Dataflash_GetSelectedChip(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Dataflash_GetSelectedChip(void)
			{
				return (DATAFLASH_CHIPCS_PORT & DATAFLASH_CHIPCS_MASK);
    1c20:	8e b1       	in	r24, 0x0e	; 14

				/* Once all the Dataflash ICs have had their first buffers filled, switch buffers to maintain throughput */
				if (Dataflash_GetSelectedChip() == DATAFLASH_CHIP_MASK(DATAFLASH_TOTALCHIPS))
    1c22:	83 70       	andi	r24, 0x03	; 3
    1c24:	81 30       	cpi	r24, 0x01	; 1
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <DataflashManager_WriteBlocks+0xf0>
				  UsingSecondBuffer = !(UsingSecondBuffer);
    1c28:	d8 26       	eor	r13, r24

				/* Select the next Dataflash chip based on the new Dataflash page index */
				Dataflash_SelectChipFromPage(CurrDFPage);
    1c2a:	c8 01       	movw	r24, r16
    1c2c:	61 dc       	rcall	.-1854   	; 0x14f0 <Dataflash_SelectChipFromPage>

#if (DATAFLASH_PAGE_SIZE > VIRTUAL_MEMORY_BLOCK_SIZE)
				/* If less than one Dataflash page remaining, copy over the existing page to preserve trailing data */
				if ((TotalBlocks * (VIRTUAL_MEMORY_BLOCK_SIZE >> 4)) < (DATAFLASH_PAGE_SIZE >> 4))
    1c2e:	20 e4       	ldi	r18, 0x40	; 64
    1c30:	82 16       	cp	r8, r18
    1c32:	91 04       	cpc	r9, r1
    1c34:	78 f4       	brcc	.+30     	; 0x1c54 <DataflashManager_WriteBlocks+0x11a>
				{
					/* Copy selected dataflash's current page contents to the Dataflash buffer */
					Dataflash_WaitWhileBusy();
    1c36:	7a dc       	rcall	.-1804   	; 0x152c <Dataflash_WaitWhileBusy>
					Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_MAINMEMTOBUFF2 : DF_CMD_MAINMEMTOBUFF1);
    1c38:	dd 20       	and	r13, r13
    1c3a:	11 f4       	brne	.+4      	; 0x1c40 <DataflashManager_WriteBlocks+0x106>
    1c3c:	83 e5       	ldi	r24, 0x53	; 83
    1c3e:	01 c0       	rjmp	.+2      	; 0x1c42 <DataflashManager_WriteBlocks+0x108>
    1c40:	85 e5       	ldi	r24, 0x55	; 85
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1c42:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1c44:	0d b4       	in	r0, 0x2d	; 45
    1c46:	07 fe       	sbrs	r0, 7
    1c48:	fd cf       	rjmp	.-6      	; 0x1c44 <DataflashManager_WriteBlocks+0x10a>
					Dataflash_SendAddressBytes(CurrDFPage, 0);
    1c4a:	c8 01       	movw	r24, r16
    1c4c:	60 e0       	ldi	r22, 0x00	; 0
    1c4e:	70 e0       	ldi	r23, 0x00	; 0
    1c50:	7b dc       	rcall	.-1802   	; 0x1548 <Dataflash_SendAddressBytes>
					Dataflash_WaitWhileBusy();
    1c52:	6c dc       	rcall	.-1832   	; 0x152c <Dataflash_WaitWhileBusy>
				}
#endif

				/* Send the Dataflash buffer write command */
				Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2WRITE : DF_CMD_BUFF1WRITE);
    1c54:	dd 20       	and	r13, r13
    1c56:	11 f4       	brne	.+4      	; 0x1c5c <DataflashManager_WriteBlocks+0x122>
    1c58:	84 e8       	ldi	r24, 0x84	; 132
    1c5a:	01 c0       	rjmp	.+2      	; 0x1c5e <DataflashManager_WriteBlocks+0x124>
    1c5c:	87 e8       	ldi	r24, 0x87	; 135
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1c5e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1c60:	0d b4       	in	r0, 0x2d	; 45
    1c62:	07 fe       	sbrs	r0, 7
    1c64:	fd cf       	rjmp	.-6      	; 0x1c60 <DataflashManager_WriteBlocks+0x126>
				Dataflash_SendAddressBytes(0, 0);
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	60 e0       	ldi	r22, 0x00	; 0
    1c6c:	70 e0       	ldi	r23, 0x00	; 0
    1c6e:	6c dc       	rcall	.-1832   	; 0x1548 <Dataflash_SendAddressBytes>
    1c70:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    1c72:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1c76:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1c78:	0d b4       	in	r0, 0x2d	; 45
    1c7a:	07 fe       	sbrs	r0, 7
    1c7c:	fd cf       	rjmp	.-6      	; 0x1c78 <DataflashManager_WriteBlocks+0x13e>
    1c7e:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1c82:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1c84:	0d b4       	in	r0, 0x2d	; 45
    1c86:	07 fe       	sbrs	r0, 7
    1c88:	fd cf       	rjmp	.-6      	; 0x1c84 <DataflashManager_WriteBlocks+0x14a>
    1c8a:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1c8e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1c90:	0d b4       	in	r0, 0x2d	; 45
    1c92:	07 fe       	sbrs	r0, 7
    1c94:	fd cf       	rjmp	.-6      	; 0x1c90 <DataflashManager_WriteBlocks+0x156>
    1c96:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1c9a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1c9c:	0d b4       	in	r0, 0x2d	; 45
    1c9e:	07 fe       	sbrs	r0, 7
    1ca0:	fd cf       	rjmp	.-6      	; 0x1c9c <DataflashManager_WriteBlocks+0x162>
    1ca2:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1ca6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1ca8:	0d b4       	in	r0, 0x2d	; 45
    1caa:	07 fe       	sbrs	r0, 7
    1cac:	fd cf       	rjmp	.-6      	; 0x1ca8 <DataflashManager_WriteBlocks+0x16e>
    1cae:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1cb2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1cb4:	0d b4       	in	r0, 0x2d	; 45
    1cb6:	07 fe       	sbrs	r0, 7
    1cb8:	fd cf       	rjmp	.-6      	; 0x1cb4 <DataflashManager_WriteBlocks+0x17a>
    1cba:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1cbe:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1cc0:	0d b4       	in	r0, 0x2d	; 45
    1cc2:	07 fe       	sbrs	r0, 7
    1cc4:	fd cf       	rjmp	.-6      	; 0x1cc0 <DataflashManager_WriteBlocks+0x186>
    1cc6:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1cca:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1ccc:	0d b4       	in	r0, 0x2d	; 45
    1cce:	07 fe       	sbrs	r0, 7
    1cd0:	fd cf       	rjmp	.-6      	; 0x1ccc <DataflashManager_WriteBlocks+0x192>
    1cd2:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1cd6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1cd8:	0d b4       	in	r0, 0x2d	; 45
    1cda:	07 fe       	sbrs	r0, 7
    1cdc:	fd cf       	rjmp	.-6      	; 0x1cd8 <DataflashManager_WriteBlocks+0x19e>
    1cde:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1ce2:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1ce4:	0d b4       	in	r0, 0x2d	; 45
    1ce6:	07 fe       	sbrs	r0, 7
    1ce8:	fd cf       	rjmp	.-6      	; 0x1ce4 <DataflashManager_WriteBlocks+0x1aa>
    1cea:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1cee:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1cf0:	0d b4       	in	r0, 0x2d	; 45
    1cf2:	07 fe       	sbrs	r0, 7
    1cf4:	fd cf       	rjmp	.-6      	; 0x1cf0 <DataflashManager_WriteBlocks+0x1b6>
    1cf6:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1cfa:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1cfc:	0d b4       	in	r0, 0x2d	; 45
    1cfe:	07 fe       	sbrs	r0, 7
    1d00:	fd cf       	rjmp	.-6      	; 0x1cfc <DataflashManager_WriteBlocks+0x1c2>
    1d02:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1d06:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1d08:	0d b4       	in	r0, 0x2d	; 45
    1d0a:	07 fe       	sbrs	r0, 7
    1d0c:	fd cf       	rjmp	.-6      	; 0x1d08 <DataflashManager_WriteBlocks+0x1ce>
    1d0e:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1d12:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1d14:	0d b4       	in	r0, 0x2d	; 45
    1d16:	07 fe       	sbrs	r0, 7
    1d18:	fd cf       	rjmp	.-6      	; 0x1d14 <DataflashManager_WriteBlocks+0x1da>
    1d1a:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1d1e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1d20:	0d b4       	in	r0, 0x2d	; 45
    1d22:	07 fe       	sbrs	r0, 7
    1d24:	fd cf       	rjmp	.-6      	; 0x1d20 <DataflashManager_WriteBlocks+0x1e6>
    1d26:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1d2a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1d2c:	0d b4       	in	r0, 0x2d	; 45
    1d2e:	07 fe       	sbrs	r0, 7
    1d30:	fd cf       	rjmp	.-6      	; 0x1d2c <DataflashManager_WriteBlocks+0x1f2>

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (MSInterfaceInfo->State.IsMassStoreReset)
    1d32:	f5 01       	movw	r30, r10
    1d34:	86 a9       	ldd	r24, Z+54	; 0x36
    1d36:	88 23       	and	r24, r24
    1d38:	61 f5       	brne	.+88     	; 0x1d92 <DataflashManager_WriteBlocks+0x258>
			Dataflash_SendByte(Endpoint_Read_Byte());
			Dataflash_SendByte(Endpoint_Read_Byte());
			Dataflash_SendByte(Endpoint_Read_Byte());

			/* Increment the Dataflash page 16 byte block counter */
			CurrDFPageByteDiv16++;
    1d3a:	9f 5f       	subi	r25, 0xFF	; 255

			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;
    1d3c:	c3 94       	inc	r12
	while (TotalBlocks)
	{
		uint8_t BytesInBlockDiv16 = 0;

		/* Write an endpoint packet sized data block to the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
    1d3e:	f0 e2       	ldi	r31, 0x20	; 32
    1d40:	cf 16       	cp	r12, r31
    1d42:	09 f0       	breq	.+2      	; 0x1d46 <DataflashManager_WriteBlocks+0x20c>
    1d44:	4a cf       	rjmp	.-364    	; 0x1bda <DataflashManager_WriteBlocks+0xa0>
			if (MSInterfaceInfo->State.IsMassStoreReset)
			  return;
		}

		/* Decrement the blocks remaining counter and reset the sub block counter */
		TotalBlocks--;
    1d46:	08 94       	sec
    1d48:	e1 08       	sbc	r14, r1
    1d4a:	f1 08       	sbc	r15, r1
    1d4c:	20 ee       	ldi	r18, 0xE0	; 224
    1d4e:	3f ef       	ldi	r19, 0xFF	; 255
    1d50:	82 0e       	add	r8, r18
    1d52:	93 1e       	adc	r9, r19

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;

	while (TotalBlocks)
    1d54:	e1 14       	cp	r14, r1
    1d56:	f1 04       	cpc	r15, r1
    1d58:	09 f0       	breq	.+2      	; 0x1d5c <DataflashManager_WriteBlocks+0x222>
    1d5a:	3e cf       	rjmp	.-388    	; 0x1bd8 <DataflashManager_WriteBlocks+0x9e>
		/* Decrement the blocks remaining counter and reset the sub block counter */
		TotalBlocks--;
	}

	/* Write the Dataflash buffer contents back to the Dataflash page */
	Dataflash_WaitWhileBusy();
    1d5c:	e7 db       	rcall	.-2098   	; 0x152c <Dataflash_WaitWhileBusy>
	Dataflash_SendByte(UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_CMD_BUFF1TOMAINMEMWITHERASE);
    1d5e:	dd 20       	and	r13, r13
    1d60:	11 f4       	brne	.+4      	; 0x1d66 <DataflashManager_WriteBlocks+0x22c>
    1d62:	83 e8       	ldi	r24, 0x83	; 131
    1d64:	01 c0       	rjmp	.+2      	; 0x1d68 <DataflashManager_WriteBlocks+0x22e>
    1d66:	86 e8       	ldi	r24, 0x86	; 134
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
    1d68:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
    1d6a:	0d b4       	in	r0, 0x2d	; 45
    1d6c:	07 fe       	sbrs	r0, 7
    1d6e:	fd cf       	rjmp	.-6      	; 0x1d6a <DataflashManager_WriteBlocks+0x230>
	Dataflash_SendAddressBytes(CurrDFPage, 0x00);
    1d70:	c8 01       	movw	r24, r16
    1d72:	60 e0       	ldi	r22, 0x00	; 0
    1d74:	70 e0       	ldi	r23, 0x00	; 0
    1d76:	e8 db       	rcall	.-2096   	; 0x1548 <Dataflash_SendAddressBytes>
	Dataflash_WaitWhileBusy();
    1d78:	d9 db       	rcall	.-2126   	; 0x152c <Dataflash_WaitWhileBusy>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1d7a:	80 91 e8 00 	lds	r24, 0x00E8

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    1d7e:	85 fd       	sbrc	r24, 5
    1d80:	05 c0       	rjmp	.+10     	; 0x1d8c <DataflashManager_WriteBlocks+0x252>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1d82:	80 91 e8 00 	lds	r24, 0x00E8
    1d86:	8b 77       	andi	r24, 0x7B	; 123
    1d88:	80 93 e8 00 	sts	0x00E8, r24
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT & ~DATAFLASH_CHIPCS_MASK) | ChipMask);
    1d8c:	8e b1       	in	r24, 0x0e	; 14
    1d8e:	83 60       	ori	r24, 0x03	; 3
    1d90:	8e b9       	out	0x0e, r24	; 14
	  Endpoint_ClearOUT();

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
    1d92:	0f 90       	pop	r0
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	ff 90       	pop	r15
    1d9e:	ef 90       	pop	r14
    1da0:	df 90       	pop	r13
    1da2:	cf 90       	pop	r12
    1da4:	bf 90       	pop	r11
    1da6:	af 90       	pop	r10
    1da8:	9f 90       	pop	r9
    1daa:	8f 90       	pop	r8
    1dac:	08 95       	ret

00001dae <SCSI_Command_Inquiry>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1dae:	af 92       	push	r10
    1db0:	bf 92       	push	r11
    1db2:	cf 92       	push	r12
    1db4:	df 92       	push	r13
    1db6:	ef 92       	push	r14
    1db8:	ff 92       	push	r15
    1dba:	0f 93       	push	r16
    1dbc:	1f 93       	push	r17
    1dbe:	df 93       	push	r29
    1dc0:	cf 93       	push	r28
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	6c 01       	movw	r12, r24

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;

	return true;
}
    1dc8:	ad b6       	in	r10, 0x3d	; 61
    1dca:	be b6       	in	r11, 0x3e	; 62

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
    1dcc:	fc 01       	movw	r30, r24
    1dce:	05 8d       	ldd	r16, Z+29	; 0x1d
    1dd0:	14 8d       	ldd	r17, Z+28	; 0x1c
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = (AllocationLength < sizeof(InquiryData))? AllocationLength :
	                                                                       sizeof(InquiryData);

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
    1dd2:	82 8d       	ldd	r24, Z+26	; 0x1a
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	83 70       	andi	r24, 0x03	; 3
    1dd8:	90 70       	andi	r25, 0x00	; 0
    1dda:	89 2b       	or	r24, r25
    1ddc:	19 f4       	brne	.+6      	; 0x1de4 <SCSI_Command_Inquiry+0x36>
    1dde:	83 8d       	ldd	r24, Z+27	; 0x1b
    1de0:	88 23       	and	r24, r24
    1de2:	69 f0       	breq	.+26     	; 0x1dfe <SCSI_Command_Inquiry+0x50>
	     MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
	{
		/* Optional but unsupported bits set - update the SENSE key and fail the request */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    1de4:	80 91 6a 03 	lds	r24, 0x036A
    1de8:	80 7f       	andi	r24, 0xF0	; 240
    1dea:	85 60       	ori	r24, 0x05	; 5
    1dec:	80 93 6a 03 	sts	0x036A, r24
    1df0:	84 e2       	ldi	r24, 0x24	; 36
    1df2:	80 93 74 03 	sts	0x0374, r24
    1df6:	10 92 75 03 	sts	0x0375, r1
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	35 c0       	rjmp	.+106    	; 0x1e68 <SCSI_Command_Inquiry+0xba>
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = (AllocationLength < sizeof(InquiryData))? AllocationLength :
	                                                                       sizeof(InquiryData);
    1dfe:	78 01       	movw	r14, r16
    1e00:	05 32       	cpi	r16, 0x25	; 37
    1e02:	11 05       	cpc	r17, r1
    1e04:	18 f0       	brcs	.+6      	; 0x1e0c <SCSI_Command_Inquiry+0x5e>
    1e06:	84 e2       	ldi	r24, 0x24	; 36
    1e08:	e8 2e       	mov	r14, r24
    1e0a:	f1 2c       	mov	r15, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NO_STREAM_CALLBACK);
    1e0c:	84 e4       	ldi	r24, 0x44	; 68
    1e0e:	93 e0       	ldi	r25, 0x03	; 3
    1e10:	b7 01       	movw	r22, r14
    1e12:	40 e0       	ldi	r20, 0x00	; 0
    1e14:	50 e0       	ldi	r21, 0x00	; 0
    1e16:	0e 94 ba 2d 	call	0x5b74	; 0x5b74 <Endpoint_Write_Stream_LE>

	uint8_t PadBytes[AllocationLength - BytesTransferred];
    1e1a:	b8 01       	movw	r22, r16
    1e1c:	6e 19       	sub	r22, r14
    1e1e:	7f 09       	sbc	r23, r15
    1e20:	8d b7       	in	r24, 0x3d	; 61
    1e22:	9e b7       	in	r25, 0x3e	; 62
    1e24:	86 1b       	sub	r24, r22
    1e26:	97 0b       	sbc	r25, r23
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	9e bf       	out	0x3e, r25	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	8d bf       	out	0x3d, r24	; 61

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Write_Stream_LE(&PadBytes, sizeof(PadBytes), NO_STREAM_CALLBACK);
    1e32:	01 96       	adiw	r24, 0x01	; 1
    1e34:	40 e0       	ldi	r20, 0x00	; 0
    1e36:	50 e0       	ldi	r21, 0x00	; 0
    1e38:	0e 94 ba 2d 	call	0x5b74	; 0x5b74 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e3c:	80 91 e8 00 	lds	r24, 0x00E8
    1e40:	8e 77       	andi	r24, 0x7E	; 126
    1e42:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    1e46:	97 01       	movw	r18, r14
    1e48:	40 e0       	ldi	r20, 0x00	; 0
    1e4a:	50 e0       	ldi	r21, 0x00	; 0
    1e4c:	f6 01       	movw	r30, r12
    1e4e:	82 89       	ldd	r24, Z+18	; 0x12
    1e50:	93 89       	ldd	r25, Z+19	; 0x13
    1e52:	a4 89       	ldd	r26, Z+20	; 0x14
    1e54:	b5 89       	ldd	r27, Z+21	; 0x15
    1e56:	82 1b       	sub	r24, r18
    1e58:	93 0b       	sbc	r25, r19
    1e5a:	a4 0b       	sbc	r26, r20
    1e5c:	b5 0b       	sbc	r27, r21
    1e5e:	82 8b       	std	Z+18, r24	; 0x12
    1e60:	93 8b       	std	Z+19, r25	; 0x13
    1e62:	a4 8b       	std	Z+20, r26	; 0x14
    1e64:	b5 8b       	std	Z+21, r27	; 0x15
    1e66:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	be be       	out	0x3e, r11	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	ad be       	out	0x3d, r10	; 61
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	1f 91       	pop	r17
    1e78:	0f 91       	pop	r16
    1e7a:	ff 90       	pop	r15
    1e7c:	ef 90       	pop	r14
    1e7e:	df 90       	pop	r13
    1e80:	cf 90       	pop	r12
    1e82:	bf 90       	pop	r11
    1e84:	af 90       	pop	r10
    1e86:	08 95       	ret

00001e88 <SCSI_Command_Request_Sense>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1e88:	8f 92       	push	r8
    1e8a:	9f 92       	push	r9
    1e8c:	bf 92       	push	r11
    1e8e:	cf 92       	push	r12
    1e90:	df 92       	push	r13
    1e92:	ef 92       	push	r14
    1e94:	ff 92       	push	r15
    1e96:	0f 93       	push	r16
    1e98:	1f 93       	push	r17
    1e9a:	df 93       	push	r29
    1e9c:	cf 93       	push	r28
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	6c 01       	movw	r12, r24

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;

	return true;
}
    1ea4:	8d b6       	in	r8, 0x3d	; 61
    1ea6:	9e b6       	in	r9, 0x3e	; 62
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	05 8d       	ldd	r16, Z+29	; 0x1d
	uint8_t  BytesTransferred = (AllocationLength < sizeof(SenseData))? AllocationLength : sizeof(SenseData);
    1eac:	b0 2e       	mov	r11, r16
    1eae:	03 31       	cpi	r16, 0x13	; 19
    1eb0:	10 f0       	brcs	.+4      	; 0x1eb6 <SCSI_Command_Request_Sense+0x2e>
    1eb2:	92 e1       	ldi	r25, 0x12	; 18
    1eb4:	b9 2e       	mov	r11, r25

	uint8_t PadBytes[AllocationLength - BytesTransferred];
    1eb6:	10 e0       	ldi	r17, 0x00	; 0
    1eb8:	0b 19       	sub	r16, r11
    1eba:	11 09       	sbc	r17, r1
    1ebc:	8d b7       	in	r24, 0x3d	; 61
    1ebe:	9e b7       	in	r25, 0x3e	; 62
    1ec0:	80 1b       	sub	r24, r16
    1ec2:	91 0b       	sbc	r25, r17
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	9e bf       	out	0x3e, r25	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	8d bf       	out	0x3d, r24	; 61
    1ece:	ed b6       	in	r14, 0x3d	; 61
    1ed0:	fe b6       	in	r15, 0x3e	; 62
    1ed2:	08 94       	sec
    1ed4:	e1 1c       	adc	r14, r1
    1ed6:	f1 1c       	adc	r15, r1

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NO_STREAM_CALLBACK);
    1ed8:	88 e6       	ldi	r24, 0x68	; 104
    1eda:	93 e0       	ldi	r25, 0x03	; 3
    1edc:	6b 2d       	mov	r22, r11
    1ede:	70 e0       	ldi	r23, 0x00	; 0
    1ee0:	40 e0       	ldi	r20, 0x00	; 0
    1ee2:	50 e0       	ldi	r21, 0x00	; 0
    1ee4:	0e 94 ba 2d 	call	0x5b74	; 0x5b74 <Endpoint_Write_Stream_LE>
	Endpoint_Write_Stream_LE(&PadBytes, sizeof(PadBytes), NO_STREAM_CALLBACK);
    1ee8:	c7 01       	movw	r24, r14
    1eea:	b8 01       	movw	r22, r16
    1eec:	40 e0       	ldi	r20, 0x00	; 0
    1eee:	50 e0       	ldi	r21, 0x00	; 0
    1ef0:	0e 94 ba 2d 	call	0x5b74	; 0x5b74 <Endpoint_Write_Stream_LE>
    1ef4:	80 91 e8 00 	lds	r24, 0x00E8
    1ef8:	8e 77       	andi	r24, 0x7E	; 126
    1efa:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    1efe:	f6 01       	movw	r30, r12
    1f00:	82 89       	ldd	r24, Z+18	; 0x12
    1f02:	93 89       	ldd	r25, Z+19	; 0x13
    1f04:	a4 89       	ldd	r26, Z+20	; 0x14
    1f06:	b5 89       	ldd	r27, Z+21	; 0x15
    1f08:	8b 19       	sub	r24, r11
    1f0a:	91 09       	sbc	r25, r1
    1f0c:	a1 09       	sbc	r26, r1
    1f0e:	b1 09       	sbc	r27, r1
    1f10:	82 8b       	std	Z+18, r24	; 0x12
    1f12:	93 8b       	std	Z+19, r25	; 0x13
    1f14:	a4 8b       	std	Z+20, r26	; 0x14
    1f16:	b5 8b       	std	Z+21, r27	; 0x15

	return true;
}
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	9e be       	out	0x3e, r9	; 62
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	8d be       	out	0x3d, r8	; 61
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	1f 91       	pop	r17
    1f2a:	0f 91       	pop	r16
    1f2c:	ff 90       	pop	r15
    1f2e:	ef 90       	pop	r14
    1f30:	df 90       	pop	r13
    1f32:	cf 90       	pop	r12
    1f34:	bf 90       	pop	r11
    1f36:	9f 90       	pop	r9
    1f38:	8f 90       	pop	r8
    1f3a:	08 95       	ret

00001f3c <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
    1f3c:	0f 93       	push	r16
    1f3e:	1f 93       	push	r17
    1f40:	cf 93       	push	r28
    1f42:	df 93       	push	r29
    1f44:	8c 01       	movw	r16, r24
    1f46:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
    1f48:	f8 01       	movw	r30, r16
    1f4a:	46 8d       	ldd	r20, Z+30	; 0x1e
    1f4c:	55 8d       	ldd	r21, Z+29	; 0x1d
    1f4e:	64 8d       	ldd	r22, Z+28	; 0x1c
    1f50:	73 8d       	ldd	r23, Z+27	; 0x1b

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
    1f52:	c1 a1       	ldd	r28, Z+33	; 0x21
    1f54:	d0 a1       	ldd	r29, Z+32	; 0x20

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= VIRTUAL_MEMORY_BLOCKS)
    1f56:	40 30       	cpi	r20, 0x00	; 0
    1f58:	f0 e8       	ldi	r31, 0x80	; 128
    1f5a:	5f 07       	cpc	r21, r31
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	6f 07       	cpc	r22, r31
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	7f 07       	cpc	r23, r31
    1f64:	68 f0       	brcs	.+26     	; 0x1f80 <SCSI_Command_ReadWrite_10+0x44>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    1f66:	80 91 6a 03 	lds	r24, 0x036A
    1f6a:	80 7f       	andi	r24, 0xF0	; 240
    1f6c:	85 60       	ori	r24, 0x05	; 5
    1f6e:	80 93 6a 03 	sts	0x036A, r24
    1f72:	81 e2       	ldi	r24, 0x21	; 33
    1f74:	80 93 74 03 	sts	0x0374, r24
    1f78:	10 92 75 03 	sts	0x0375, r1
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	21 c0       	rjmp	.+66     	; 0x1fc2 <SCSI_Command_ReadWrite_10+0x86>

		return false;
	}

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
    1f80:	88 23       	and	r24, r24
    1f82:	21 f0       	breq	.+8      	; 0x1f8c <SCSI_Command_ReadWrite_10+0x50>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    1f84:	c8 01       	movw	r24, r16
    1f86:	9e 01       	movw	r18, r28
    1f88:	c2 dc       	rcall	.-1660   	; 0x190e <DataflashManager_ReadBlocks>
    1f8a:	03 c0       	rjmp	.+6      	; 0x1f92 <SCSI_Command_ReadWrite_10+0x56>
	else
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    1f8c:	c8 01       	movw	r24, r16
    1f8e:	9e 01       	movw	r18, r28
    1f90:	d4 dd       	rcall	.-1112   	; 0x1b3a <DataflashManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
    1f92:	9e 01       	movw	r18, r28
    1f94:	40 e0       	ldi	r20, 0x00	; 0
    1f96:	50 e0       	ldi	r21, 0x00	; 0
    1f98:	69 e0       	ldi	r22, 0x09	; 9
    1f9a:	22 0f       	add	r18, r18
    1f9c:	33 1f       	adc	r19, r19
    1f9e:	44 1f       	adc	r20, r20
    1fa0:	55 1f       	adc	r21, r21
    1fa2:	6a 95       	dec	r22
    1fa4:	d1 f7       	brne	.-12     	; 0x1f9a <SCSI_Command_ReadWrite_10+0x5e>
    1fa6:	f8 01       	movw	r30, r16
    1fa8:	82 89       	ldd	r24, Z+18	; 0x12
    1faa:	93 89       	ldd	r25, Z+19	; 0x13
    1fac:	a4 89       	ldd	r26, Z+20	; 0x14
    1fae:	b5 89       	ldd	r27, Z+21	; 0x15
    1fb0:	82 1b       	sub	r24, r18
    1fb2:	93 0b       	sbc	r25, r19
    1fb4:	a4 0b       	sbc	r26, r20
    1fb6:	b5 0b       	sbc	r27, r21
    1fb8:	82 8b       	std	Z+18, r24	; 0x12
    1fba:	93 8b       	std	Z+19, r25	; 0x13
    1fbc:	a4 8b       	std	Z+20, r26	; 0x14
    1fbe:	b5 8b       	std	Z+21, r27	; 0x15
    1fc0:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
    1fc2:	df 91       	pop	r29
    1fc4:	cf 91       	pop	r28
    1fc6:	1f 91       	pop	r17
    1fc8:	0f 91       	pop	r16
    1fca:	08 95       	ret

00001fcc <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean true if the command completed successfully, false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1fcc:	0f 93       	push	r16
    1fce:	1f 93       	push	r17
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	28 97       	sbiw	r28, 0x08	; 8
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	cd bf       	out	0x3d, r28	; 61
    1fe4:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	81 8d       	ldd	r24, Z+25	; 0x19
    1fea:	8e 31       	cpi	r24, 0x1E	; 30
    1fec:	09 f4       	brne	.+2      	; 0x1ff0 <SCSI_DecodeSCSICommand+0x24>
    1fee:	79 c0       	rjmp	.+242    	; 0x20e2 <SCSI_DecodeSCSICommand+0x116>
    1ff0:	8f 31       	cpi	r24, 0x1F	; 31
    1ff2:	70 f4       	brcc	.+28     	; 0x2010 <SCSI_DecodeSCSICommand+0x44>
    1ff4:	83 30       	cpi	r24, 0x03	; 3
    1ff6:	f9 f0       	breq	.+62     	; 0x2036 <SCSI_DecodeSCSICommand+0x6a>
    1ff8:	84 30       	cpi	r24, 0x04	; 4
    1ffa:	20 f4       	brcc	.+8      	; 0x2004 <SCSI_DecodeSCSICommand+0x38>
    1ffc:	88 23       	and	r24, r24
    1ffe:	09 f4       	brne	.+2      	; 0x2002 <SCSI_DecodeSCSICommand+0x36>
    2000:	70 c0       	rjmp	.+224    	; 0x20e2 <SCSI_DecodeSCSICommand+0x116>
    2002:	75 c0       	rjmp	.+234    	; 0x20ee <SCSI_DecodeSCSICommand+0x122>
    2004:	82 31       	cpi	r24, 0x12	; 18
    2006:	a1 f0       	breq	.+40     	; 0x2030 <SCSI_DecodeSCSICommand+0x64>
    2008:	8d 31       	cpi	r24, 0x1D	; 29
    200a:	09 f0       	breq	.+2      	; 0x200e <SCSI_DecodeSCSICommand+0x42>
    200c:	70 c0       	rjmp	.+224    	; 0x20ee <SCSI_DecodeSCSICommand+0x122>
    200e:	48 c0       	rjmp	.+144    	; 0x20a0 <SCSI_DecodeSCSICommand+0xd4>
    2010:	88 32       	cpi	r24, 0x28	; 40
    2012:	09 f4       	brne	.+2      	; 0x2016 <SCSI_DecodeSCSICommand+0x4a>
    2014:	62 c0       	rjmp	.+196    	; 0x20da <SCSI_DecodeSCSICommand+0x10e>
    2016:	89 32       	cpi	r24, 0x29	; 41
    2018:	20 f4       	brcc	.+8      	; 0x2022 <SCSI_DecodeSCSICommand+0x56>
    201a:	85 32       	cpi	r24, 0x25	; 37
    201c:	09 f0       	breq	.+2      	; 0x2020 <SCSI_DecodeSCSICommand+0x54>
    201e:	67 c0       	rjmp	.+206    	; 0x20ee <SCSI_DecodeSCSICommand+0x122>
    2020:	0d c0       	rjmp	.+26     	; 0x203c <SCSI_DecodeSCSICommand+0x70>
    2022:	8a 32       	cpi	r24, 0x2A	; 42
    2024:	09 f4       	brne	.+2      	; 0x2028 <SCSI_DecodeSCSICommand+0x5c>
    2026:	56 c0       	rjmp	.+172    	; 0x20d4 <SCSI_DecodeSCSICommand+0x108>
    2028:	8f 32       	cpi	r24, 0x2F	; 47
    202a:	09 f0       	breq	.+2      	; 0x202e <SCSI_DecodeSCSICommand+0x62>
    202c:	60 c0       	rjmp	.+192    	; 0x20ee <SCSI_DecodeSCSICommand+0x122>
    202e:	59 c0       	rjmp	.+178    	; 0x20e2 <SCSI_DecodeSCSICommand+0x116>
	{
		case SCSI_CMD_INQUIRY:
			CommandSuccess = SCSI_Command_Inquiry(MSInterfaceInfo);
    2030:	c8 01       	movw	r24, r16
    2032:	bd de       	rcall	.-646    	; 0x1dae <SCSI_Command_Inquiry>
    2034:	66 c0       	rjmp	.+204    	; 0x2102 <__stack+0x3>
			break;
		case SCSI_CMD_REQUEST_SENSE:
			CommandSuccess = SCSI_Command_Request_Sense(MSInterfaceInfo);
    2036:	c8 01       	movw	r24, r16
    2038:	27 df       	rcall	.-434    	; 0x1e88 <SCSI_Command_Request_Sense>
    203a:	63 c0       	rjmp	.+198    	; 0x2102 <__stack+0x3>
 *
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (VIRTUAL_MEMORY_BLOCKS - 1);
    203c:	8f ef       	ldi	r24, 0xFF	; 255
    203e:	9f e7       	ldi	r25, 0x7F	; 127
    2040:	a0 e0       	ldi	r26, 0x00	; 0
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	89 83       	std	Y+1, r24	; 0x01
    2046:	9a 83       	std	Y+2, r25	; 0x02
    2048:	ab 83       	std	Y+3, r26	; 0x03
    204a:	bc 83       	std	Y+4, r27	; 0x04
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	92 e0       	ldi	r25, 0x02	; 2
    2050:	a0 e0       	ldi	r26, 0x00	; 0
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	8d 83       	std	Y+5, r24	; 0x05
    2056:	9e 83       	std	Y+6, r25	; 0x06
    2058:	af 83       	std	Y+7, r26	; 0x07
    205a:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NO_STREAM_CALLBACK);
    205c:	ce 01       	movw	r24, r28
    205e:	01 96       	adiw	r24, 0x01	; 1
    2060:	64 e0       	ldi	r22, 0x04	; 4
    2062:	70 e0       	ldi	r23, 0x00	; 0
    2064:	40 e0       	ldi	r20, 0x00	; 0
    2066:	50 e0       	ldi	r21, 0x00	; 0
    2068:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NO_STREAM_CALLBACK);
    206c:	ce 01       	movw	r24, r28
    206e:	05 96       	adiw	r24, 0x05	; 5
    2070:	64 e0       	ldi	r22, 0x04	; 4
    2072:	70 e0       	ldi	r23, 0x00	; 0
    2074:	40 e0       	ldi	r20, 0x00	; 0
    2076:	50 e0       	ldi	r21, 0x00	; 0
    2078:	0e 94 7f 2d 	call	0x5afe	; 0x5afe <Endpoint_Write_Stream_BE>
    207c:	80 91 e8 00 	lds	r24, 0x00E8
    2080:	8e 77       	andi	r24, 0x7E	; 126
    2082:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
    2086:	f8 01       	movw	r30, r16
    2088:	82 89       	ldd	r24, Z+18	; 0x12
    208a:	93 89       	ldd	r25, Z+19	; 0x13
    208c:	a4 89       	ldd	r26, Z+20	; 0x14
    208e:	b5 89       	ldd	r27, Z+21	; 0x15
    2090:	08 97       	sbiw	r24, 0x08	; 8
    2092:	a1 09       	sbc	r26, r1
    2094:	b1 09       	sbc	r27, r1
    2096:	82 8b       	std	Z+18, r24	; 0x12
    2098:	93 8b       	std	Z+19, r25	; 0x13
    209a:	a4 8b       	std	Z+20, r26	; 0x14
    209c:	b5 8b       	std	Z+21, r27	; 0x15
    209e:	35 c0       	rjmp	.+106    	; 0x210a <__stack+0xb>
 *  \return Boolean true if the command completed successfully, false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
    20a0:	f8 01       	movw	r30, r16
    20a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    20a4:	82 fd       	sbrc	r24, 2
    20a6:	08 c0       	rjmp	.+16     	; 0x20b8 <SCSI_DecodeSCSICommand+0xec>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    20a8:	80 91 6a 03 	lds	r24, 0x036A
    20ac:	80 7f       	andi	r24, 0xF0	; 240
    20ae:	85 60       	ori	r24, 0x05	; 5
    20b0:	80 93 6a 03 	sts	0x036A, r24
    20b4:	84 e2       	ldi	r24, 0x24	; 36
    20b6:	22 c0       	rjmp	.+68     	; 0x20fc <SCSI_DecodeSCSICommand+0x130>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(DataflashManager_CheckDataflashOperation()))
    20b8:	ff db       	rcall	.-2050   	; 0x18b8 <DataflashManager_CheckDataflashOperation>
    20ba:	88 23       	and	r24, r24
    20bc:	91 f4       	brne	.+36     	; 0x20e2 <SCSI_DecodeSCSICommand+0x116>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
    20be:	80 91 6a 03 	lds	r24, 0x036A
    20c2:	80 7f       	andi	r24, 0xF0	; 240
    20c4:	84 60       	ori	r24, 0x04	; 4
    20c6:	80 93 6a 03 	sts	0x036A, r24
    20ca:	10 92 74 03 	sts	0x0374, r1
    20ce:	10 92 75 03 	sts	0x0375, r1
    20d2:	19 c0       	rjmp	.+50     	; 0x2106 <__stack+0x7>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
    20d4:	c8 01       	movw	r24, r16
    20d6:	60 e0       	ldi	r22, 0x00	; 0
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <SCSI_DecodeSCSICommand+0x112>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
    20da:	c8 01       	movw	r24, r16
    20dc:	61 e0       	ldi	r22, 0x01	; 1
    20de:	2e df       	rcall	.-420    	; 0x1f3c <SCSI_Command_ReadWrite_10>
    20e0:	10 c0       	rjmp	.+32     	; 0x2102 <__stack+0x3>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
    20e2:	f8 01       	movw	r30, r16
    20e4:	12 8a       	std	Z+18, r1	; 0x12
    20e6:	13 8a       	std	Z+19, r1	; 0x13
    20e8:	14 8a       	std	Z+20, r1	; 0x14
    20ea:	15 8a       	std	Z+21, r1	; 0x15
    20ec:	0e c0       	rjmp	.+28     	; 0x210a <__stack+0xb>
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    20ee:	80 91 6a 03 	lds	r24, 0x036A
    20f2:	80 7f       	andi	r24, 0xF0	; 240
    20f4:	85 60       	ori	r24, 0x05	; 5
    20f6:	80 93 6a 03 	sts	0x036A, r24
    20fa:	80 e2       	ldi	r24, 0x20	; 32
    20fc:	80 93 74 03 	sts	0x0374, r24
    2100:	e6 cf       	rjmp	.-52     	; 0x20ce <SCSI_DecodeSCSICommand+0x102>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
    2102:	88 23       	and	r24, r24
    2104:	11 f4       	brne	.+4      	; 0x210a <__stack+0xb>
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	0a c0       	rjmp	.+20     	; 0x211e <__stack+0x1f>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
    210a:	80 91 6a 03 	lds	r24, 0x036A
    210e:	80 7f       	andi	r24, 0xF0	; 240
    2110:	80 93 6a 03 	sts	0x036A, r24
    2114:	10 92 74 03 	sts	0x0374, r1
    2118:	10 92 75 03 	sts	0x0375, r1
    211c:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	}

	return false;
}
    211e:	28 96       	adiw	r28, 0x08	; 8
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	1f 91       	pop	r17
    2130:	0f 91       	pop	r16
    2132:	08 95       	ret

00002134 <DS1307_GetTime>:
    2134:	cf 92       	push	r12
    2136:	df 92       	push	r13
    2138:	ef 92       	push	r14
    213a:	ff 92       	push	r15
    213c:	0f 93       	push	r16
    213e:	1f 93       	push	r17
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	00 d0       	rcall	.+0      	; 0x2146 <DS1307_GetTime+0x12>
    2146:	0f 92       	push	r0
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	6c 01       	movw	r12, r24
    214e:	7b 01       	movw	r14, r22
    2150:	8a 01       	movw	r16, r20
    2152:	80 ed       	ldi	r24, 0xD0	; 208
    2154:	6a e0       	ldi	r22, 0x0A	; 10
    2156:	0e 94 92 31 	call	0x6324	; 0x6324 <TWI_StartTransmission>
    215a:	88 23       	and	r24, r24
    215c:	71 f0       	breq	.+28     	; 0x217a <DS1307_GetTime+0x46>
    215e:	10 92 bb 00 	sts	0x00BB, r1
    2162:	84 e8       	ldi	r24, 0x84	; 132
    2164:	80 93 bc 00 	sts	0x00BC, r24
    2168:	80 91 bc 00 	lds	r24, 0x00BC
    216c:	87 ff       	sbrs	r24, 7
    216e:	fc cf       	rjmp	.-8      	; 0x2168 <DS1307_GetTime+0x34>
    2170:	80 91 b9 00 	lds	r24, 0x00B9
    2174:	84 e9       	ldi	r24, 0x94	; 148
    2176:	80 93 bc 00 	sts	0x00BC, r24
    217a:	81 ed       	ldi	r24, 0xD1	; 209
    217c:	6a e0       	ldi	r22, 0x0A	; 10
    217e:	0e 94 92 31 	call	0x6324	; 0x6324 <TWI_StartTransmission>
    2182:	88 23       	and	r24, r24
    2184:	39 f1       	breq	.+78     	; 0x21d4 <DS1307_GetTime+0xa0>
    2186:	84 ec       	ldi	r24, 0xC4	; 196
    2188:	80 93 bc 00 	sts	0x00BC, r24
    218c:	80 91 bc 00 	lds	r24, 0x00BC
    2190:	87 ff       	sbrs	r24, 7
    2192:	fc cf       	rjmp	.-8      	; 0x218c <DS1307_GetTime+0x58>
    2194:	20 91 bb 00 	lds	r18, 0x00BB
    2198:	80 91 b9 00 	lds	r24, 0x00B9
    219c:	84 ec       	ldi	r24, 0xC4	; 196
    219e:	80 93 bc 00 	sts	0x00BC, r24
    21a2:	80 91 bc 00 	lds	r24, 0x00BC
    21a6:	87 ff       	sbrs	r24, 7
    21a8:	fc cf       	rjmp	.-8      	; 0x21a2 <DS1307_GetTime+0x6e>
    21aa:	90 91 bb 00 	lds	r25, 0x00BB
    21ae:	80 91 b9 00 	lds	r24, 0x00B9
    21b2:	84 e8       	ldi	r24, 0x84	; 132
    21b4:	80 93 bc 00 	sts	0x00BC, r24
    21b8:	80 91 bc 00 	lds	r24, 0x00BC
    21bc:	87 ff       	sbrs	r24, 7
    21be:	fc cf       	rjmp	.-8      	; 0x21b8 <DS1307_GetTime+0x84>
    21c0:	29 83       	std	Y+1, r18	; 0x01
    21c2:	9a 83       	std	Y+2, r25	; 0x02
    21c4:	80 91 bb 00 	lds	r24, 0x00BB
    21c8:	8b 83       	std	Y+3, r24	; 0x03
    21ca:	80 91 b9 00 	lds	r24, 0x00B9
    21ce:	84 e9       	ldi	r24, 0x94	; 148
    21d0:	80 93 bc 00 	sts	0x00BC, r24
    21d4:	49 81       	ldd	r20, Y+1	; 0x01
    21d6:	24 2f       	mov	r18, r20
    21d8:	22 95       	swap	r18
    21da:	2f 70       	andi	r18, 0x0F	; 15
    21dc:	82 2f       	mov	r24, r18
    21de:	87 70       	andi	r24, 0x07	; 7
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	9c 01       	movw	r18, r24
    21e4:	22 0f       	add	r18, r18
    21e6:	33 1f       	adc	r19, r19
    21e8:	22 0f       	add	r18, r18
    21ea:	33 1f       	adc	r19, r19
    21ec:	22 0f       	add	r18, r18
    21ee:	33 1f       	adc	r19, r19
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	28 0f       	add	r18, r24
    21f6:	39 1f       	adc	r19, r25
    21f8:	4f 70       	andi	r20, 0x0F	; 15
    21fa:	42 0f       	add	r20, r18
    21fc:	f8 01       	movw	r30, r16
    21fe:	40 83       	st	Z, r20
    2200:	4a 81       	ldd	r20, Y+2	; 0x02
    2202:	24 2f       	mov	r18, r20
    2204:	22 95       	swap	r18
    2206:	2f 70       	andi	r18, 0x0F	; 15
    2208:	82 2f       	mov	r24, r18
    220a:	87 70       	andi	r24, 0x07	; 7
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	9c 01       	movw	r18, r24
    2210:	22 0f       	add	r18, r18
    2212:	33 1f       	adc	r19, r19
    2214:	22 0f       	add	r18, r18
    2216:	33 1f       	adc	r19, r19
    2218:	22 0f       	add	r18, r18
    221a:	33 1f       	adc	r19, r19
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	28 0f       	add	r18, r24
    2222:	39 1f       	adc	r19, r25
    2224:	4f 70       	andi	r20, 0x0F	; 15
    2226:	42 0f       	add	r20, r18
    2228:	f7 01       	movw	r30, r14
    222a:	40 83       	st	Z, r20
    222c:	4b 81       	ldd	r20, Y+3	; 0x03
    222e:	24 2f       	mov	r18, r20
    2230:	22 95       	swap	r18
    2232:	2f 70       	andi	r18, 0x0F	; 15
    2234:	82 2f       	mov	r24, r18
    2236:	83 70       	andi	r24, 0x03	; 3
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	9c 01       	movw	r18, r24
    223c:	22 0f       	add	r18, r18
    223e:	33 1f       	adc	r19, r19
    2240:	22 0f       	add	r18, r18
    2242:	33 1f       	adc	r19, r19
    2244:	22 0f       	add	r18, r18
    2246:	33 1f       	adc	r19, r19
    2248:	88 0f       	add	r24, r24
    224a:	99 1f       	adc	r25, r25
    224c:	28 0f       	add	r18, r24
    224e:	39 1f       	adc	r19, r25
    2250:	4f 70       	andi	r20, 0x0F	; 15
    2252:	42 0f       	add	r20, r18
    2254:	f6 01       	movw	r30, r12
    2256:	40 83       	st	Z, r20
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	1f 91       	pop	r17
    2264:	0f 91       	pop	r16
    2266:	ff 90       	pop	r15
    2268:	ef 90       	pop	r14
    226a:	df 90       	pop	r13
    226c:	cf 90       	pop	r12
    226e:	08 95       	ret

00002270 <DS1307_GetDate>:
    2270:	cf 92       	push	r12
    2272:	df 92       	push	r13
    2274:	ef 92       	push	r14
    2276:	ff 92       	push	r15
    2278:	0f 93       	push	r16
    227a:	1f 93       	push	r17
    227c:	df 93       	push	r29
    227e:	cf 93       	push	r28
    2280:	00 d0       	rcall	.+0      	; 0x2282 <DS1307_GetDate+0x12>
    2282:	0f 92       	push	r0
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
    2288:	8c 01       	movw	r16, r24
    228a:	7b 01       	movw	r14, r22
    228c:	6a 01       	movw	r12, r20
    228e:	80 ed       	ldi	r24, 0xD0	; 208
    2290:	6a e0       	ldi	r22, 0x0A	; 10
    2292:	0e 94 92 31 	call	0x6324	; 0x6324 <TWI_StartTransmission>
    2296:	88 23       	and	r24, r24
    2298:	79 f0       	breq	.+30     	; 0x22b8 <DS1307_GetDate+0x48>
    229a:	84 e0       	ldi	r24, 0x04	; 4
    229c:	80 93 bb 00 	sts	0x00BB, r24
    22a0:	84 e8       	ldi	r24, 0x84	; 132
    22a2:	80 93 bc 00 	sts	0x00BC, r24
    22a6:	80 91 bc 00 	lds	r24, 0x00BC
    22aa:	87 ff       	sbrs	r24, 7
    22ac:	fc cf       	rjmp	.-8      	; 0x22a6 <DS1307_GetDate+0x36>
    22ae:	80 91 b9 00 	lds	r24, 0x00B9
    22b2:	84 e9       	ldi	r24, 0x94	; 148
    22b4:	80 93 bc 00 	sts	0x00BC, r24
    22b8:	81 ed       	ldi	r24, 0xD1	; 209
    22ba:	6a e0       	ldi	r22, 0x0A	; 10
    22bc:	0e 94 92 31 	call	0x6324	; 0x6324 <TWI_StartTransmission>
    22c0:	88 23       	and	r24, r24
    22c2:	39 f1       	breq	.+78     	; 0x2312 <DS1307_GetDate+0xa2>
    22c4:	84 ec       	ldi	r24, 0xC4	; 196
    22c6:	80 93 bc 00 	sts	0x00BC, r24
    22ca:	80 91 bc 00 	lds	r24, 0x00BC
    22ce:	87 ff       	sbrs	r24, 7
    22d0:	fc cf       	rjmp	.-8      	; 0x22ca <DS1307_GetDate+0x5a>
    22d2:	20 91 bb 00 	lds	r18, 0x00BB
    22d6:	80 91 b9 00 	lds	r24, 0x00B9
    22da:	84 ec       	ldi	r24, 0xC4	; 196
    22dc:	80 93 bc 00 	sts	0x00BC, r24
    22e0:	80 91 bc 00 	lds	r24, 0x00BC
    22e4:	87 ff       	sbrs	r24, 7
    22e6:	fc cf       	rjmp	.-8      	; 0x22e0 <DS1307_GetDate+0x70>
    22e8:	90 91 bb 00 	lds	r25, 0x00BB
    22ec:	80 91 b9 00 	lds	r24, 0x00B9
    22f0:	84 e8       	ldi	r24, 0x84	; 132
    22f2:	80 93 bc 00 	sts	0x00BC, r24
    22f6:	80 91 bc 00 	lds	r24, 0x00BC
    22fa:	87 ff       	sbrs	r24, 7
    22fc:	fc cf       	rjmp	.-8      	; 0x22f6 <DS1307_GetDate+0x86>
    22fe:	29 83       	std	Y+1, r18	; 0x01
    2300:	9a 83       	std	Y+2, r25	; 0x02
    2302:	80 91 bb 00 	lds	r24, 0x00BB
    2306:	8b 83       	std	Y+3, r24	; 0x03
    2308:	80 91 b9 00 	lds	r24, 0x00B9
    230c:	84 e9       	ldi	r24, 0x94	; 148
    230e:	80 93 bc 00 	sts	0x00BC, r24
    2312:	49 81       	ldd	r20, Y+1	; 0x01
    2314:	24 2f       	mov	r18, r20
    2316:	22 95       	swap	r18
    2318:	2f 70       	andi	r18, 0x0F	; 15
    231a:	82 2f       	mov	r24, r18
    231c:	83 70       	andi	r24, 0x03	; 3
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	9c 01       	movw	r18, r24
    2322:	22 0f       	add	r18, r18
    2324:	33 1f       	adc	r19, r19
    2326:	22 0f       	add	r18, r18
    2328:	33 1f       	adc	r19, r19
    232a:	22 0f       	add	r18, r18
    232c:	33 1f       	adc	r19, r19
    232e:	88 0f       	add	r24, r24
    2330:	99 1f       	adc	r25, r25
    2332:	28 0f       	add	r18, r24
    2334:	39 1f       	adc	r19, r25
    2336:	4f 70       	andi	r20, 0x0F	; 15
    2338:	42 0f       	add	r20, r18
    233a:	f8 01       	movw	r30, r16
    233c:	40 83       	st	Z, r20
    233e:	4a 81       	ldd	r20, Y+2	; 0x02
    2340:	24 2f       	mov	r18, r20
    2342:	22 95       	swap	r18
    2344:	2f 70       	andi	r18, 0x0F	; 15
    2346:	82 2f       	mov	r24, r18
    2348:	81 70       	andi	r24, 0x01	; 1
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	9c 01       	movw	r18, r24
    234e:	22 0f       	add	r18, r18
    2350:	33 1f       	adc	r19, r19
    2352:	22 0f       	add	r18, r18
    2354:	33 1f       	adc	r19, r19
    2356:	22 0f       	add	r18, r18
    2358:	33 1f       	adc	r19, r19
    235a:	88 0f       	add	r24, r24
    235c:	99 1f       	adc	r25, r25
    235e:	28 0f       	add	r18, r24
    2360:	39 1f       	adc	r19, r25
    2362:	4f 70       	andi	r20, 0x0F	; 15
    2364:	42 0f       	add	r20, r18
    2366:	f7 01       	movw	r30, r14
    2368:	40 83       	st	Z, r20
    236a:	4b 81       	ldd	r20, Y+3	; 0x03
    236c:	84 2f       	mov	r24, r20
    236e:	82 95       	swap	r24
    2370:	8f 70       	andi	r24, 0x0F	; 15
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	9c 01       	movw	r18, r24
    2376:	22 0f       	add	r18, r18
    2378:	33 1f       	adc	r19, r19
    237a:	22 0f       	add	r18, r18
    237c:	33 1f       	adc	r19, r19
    237e:	22 0f       	add	r18, r18
    2380:	33 1f       	adc	r19, r19
    2382:	88 0f       	add	r24, r24
    2384:	99 1f       	adc	r25, r25
    2386:	28 0f       	add	r18, r24
    2388:	39 1f       	adc	r19, r25
    238a:	4f 70       	andi	r20, 0x0F	; 15
    238c:	42 0f       	add	r20, r18
    238e:	f6 01       	movw	r30, r12
    2390:	40 83       	st	Z, r20
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	cf 91       	pop	r28
    239a:	df 91       	pop	r29
    239c:	1f 91       	pop	r17
    239e:	0f 91       	pop	r16
    23a0:	ff 90       	pop	r15
    23a2:	ef 90       	pop	r14
    23a4:	df 90       	pop	r13
    23a6:	cf 90       	pop	r12
    23a8:	08 95       	ret

000023aa <DS1307_SetTime>:
    23aa:	ff 92       	push	r15
    23ac:	0f 93       	push	r16
    23ae:	1f 93       	push	r17
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	00 d0       	rcall	.+0      	; 0x23b6 <DS1307_SetTime+0xc>
    23b6:	0f 92       	push	r0
    23b8:	cd b7       	in	r28, 0x3d	; 61
    23ba:	de b7       	in	r29, 0x3e	; 62
    23bc:	f8 2e       	mov	r15, r24
    23be:	06 2f       	mov	r16, r22
    23c0:	14 2f       	mov	r17, r20
    23c2:	80 ed       	ldi	r24, 0xD0	; 208
    23c4:	6a e0       	ldi	r22, 0x0A	; 10
    23c6:	0e 94 92 31 	call	0x6324	; 0x6324 <TWI_StartTransmission>
    23ca:	88 23       	and	r24, r24
    23cc:	09 f4       	brne	.+2      	; 0x23d0 <DS1307_SetTime+0x26>
    23ce:	60 c0       	rjmp	.+192    	; 0x2490 <DS1307_SetTime+0xe6>
    23d0:	10 92 bb 00 	sts	0x00BB, r1
    23d4:	84 e8       	ldi	r24, 0x84	; 132
    23d6:	80 93 bc 00 	sts	0x00BC, r24
    23da:	80 91 bc 00 	lds	r24, 0x00BC
    23de:	87 ff       	sbrs	r24, 7
    23e0:	fc cf       	rjmp	.-8      	; 0x23da <DS1307_SetTime+0x30>
    23e2:	80 91 b9 00 	lds	r24, 0x00B9
    23e6:	81 2f       	mov	r24, r17
    23e8:	6a e0       	ldi	r22, 0x0A	; 10
    23ea:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodqi4>
    23ee:	28 2f       	mov	r18, r24
    23f0:	27 70       	andi	r18, 0x07	; 7
    23f2:	22 95       	swap	r18
    23f4:	20 7f       	andi	r18, 0xF0	; 240
    23f6:	81 2f       	mov	r24, r17
    23f8:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodqi4>
    23fc:	9f 70       	andi	r25, 0x0F	; 15
    23fe:	29 2b       	or	r18, r25
    2400:	29 83       	std	Y+1, r18	; 0x01
    2402:	20 93 bb 00 	sts	0x00BB, r18
    2406:	84 e8       	ldi	r24, 0x84	; 132
    2408:	80 93 bc 00 	sts	0x00BC, r24
    240c:	80 91 bc 00 	lds	r24, 0x00BC
    2410:	87 ff       	sbrs	r24, 7
    2412:	fc cf       	rjmp	.-8      	; 0x240c <DS1307_SetTime+0x62>
    2414:	80 91 b9 00 	lds	r24, 0x00B9
    2418:	80 2f       	mov	r24, r16
    241a:	6a e0       	ldi	r22, 0x0A	; 10
    241c:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodqi4>
    2420:	38 2f       	mov	r19, r24
    2422:	37 70       	andi	r19, 0x07	; 7
    2424:	32 95       	swap	r19
    2426:	30 7f       	andi	r19, 0xF0	; 240
    2428:	2a 81       	ldd	r18, Y+2	; 0x02
    242a:	20 78       	andi	r18, 0x80	; 128
    242c:	80 2f       	mov	r24, r16
    242e:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodqi4>
    2432:	9f 70       	andi	r25, 0x0F	; 15
    2434:	23 2b       	or	r18, r19
    2436:	29 2b       	or	r18, r25
    2438:	2a 83       	std	Y+2, r18	; 0x02
    243a:	20 93 bb 00 	sts	0x00BB, r18
    243e:	84 e8       	ldi	r24, 0x84	; 132
    2440:	80 93 bc 00 	sts	0x00BC, r24
    2444:	80 91 bc 00 	lds	r24, 0x00BC
    2448:	87 ff       	sbrs	r24, 7
    244a:	fc cf       	rjmp	.-8      	; 0x2444 <DS1307_SetTime+0x9a>
    244c:	80 91 b9 00 	lds	r24, 0x00B9
    2450:	8f 2d       	mov	r24, r15
    2452:	6a e0       	ldi	r22, 0x0A	; 10
    2454:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodqi4>
    2458:	38 2f       	mov	r19, r24
    245a:	33 70       	andi	r19, 0x03	; 3
    245c:	32 95       	swap	r19
    245e:	30 7f       	andi	r19, 0xF0	; 240
    2460:	2b 81       	ldd	r18, Y+3	; 0x03
    2462:	20 7c       	andi	r18, 0xC0	; 192
    2464:	8f 2d       	mov	r24, r15
    2466:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodqi4>
    246a:	9f 70       	andi	r25, 0x0F	; 15
    246c:	23 2b       	or	r18, r19
    246e:	29 2b       	or	r18, r25
    2470:	2f 7b       	andi	r18, 0xBF	; 191
    2472:	2b 83       	std	Y+3, r18	; 0x03
    2474:	20 93 bb 00 	sts	0x00BB, r18
    2478:	84 e8       	ldi	r24, 0x84	; 132
    247a:	80 93 bc 00 	sts	0x00BC, r24
    247e:	80 91 bc 00 	lds	r24, 0x00BC
    2482:	87 ff       	sbrs	r24, 7
    2484:	fc cf       	rjmp	.-8      	; 0x247e <DS1307_SetTime+0xd4>
    2486:	80 91 b9 00 	lds	r24, 0x00B9
    248a:	84 e9       	ldi	r24, 0x94	; 148
    248c:	80 93 bc 00 	sts	0x00BC, r24
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	1f 91       	pop	r17
    249c:	0f 91       	pop	r16
    249e:	ff 90       	pop	r15
    24a0:	08 95       	ret

000024a2 <DS1307_SetDate>:
    24a2:	ff 92       	push	r15
    24a4:	0f 93       	push	r16
    24a6:	1f 93       	push	r17
    24a8:	df 93       	push	r29
    24aa:	cf 93       	push	r28
    24ac:	00 d0       	rcall	.+0      	; 0x24ae <DS1307_SetDate+0xc>
    24ae:	0f 92       	push	r0
    24b0:	cd b7       	in	r28, 0x3d	; 61
    24b2:	de b7       	in	r29, 0x3e	; 62
    24b4:	18 2f       	mov	r17, r24
    24b6:	06 2f       	mov	r16, r22
    24b8:	f4 2e       	mov	r15, r20
    24ba:	80 ed       	ldi	r24, 0xD0	; 208
    24bc:	6a e0       	ldi	r22, 0x0A	; 10
    24be:	0e 94 92 31 	call	0x6324	; 0x6324 <TWI_StartTransmission>
    24c2:	88 23       	and	r24, r24
    24c4:	09 f4       	brne	.+2      	; 0x24c8 <DS1307_SetDate+0x26>
    24c6:	5f c0       	rjmp	.+190    	; 0x2586 <DS1307_SetDate+0xe4>
    24c8:	84 e0       	ldi	r24, 0x04	; 4
    24ca:	80 93 bb 00 	sts	0x00BB, r24
    24ce:	84 e8       	ldi	r24, 0x84	; 132
    24d0:	80 93 bc 00 	sts	0x00BC, r24
    24d4:	80 91 bc 00 	lds	r24, 0x00BC
    24d8:	87 ff       	sbrs	r24, 7
    24da:	fc cf       	rjmp	.-8      	; 0x24d4 <DS1307_SetDate+0x32>
    24dc:	80 91 b9 00 	lds	r24, 0x00B9
    24e0:	81 2f       	mov	r24, r17
    24e2:	6a e0       	ldi	r22, 0x0A	; 10
    24e4:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodqi4>
    24e8:	38 2f       	mov	r19, r24
    24ea:	33 70       	andi	r19, 0x03	; 3
    24ec:	32 95       	swap	r19
    24ee:	30 7f       	andi	r19, 0xF0	; 240
    24f0:	29 81       	ldd	r18, Y+1	; 0x01
    24f2:	20 7c       	andi	r18, 0xC0	; 192
    24f4:	81 2f       	mov	r24, r17
    24f6:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodqi4>
    24fa:	9f 70       	andi	r25, 0x0F	; 15
    24fc:	23 2b       	or	r18, r19
    24fe:	29 2b       	or	r18, r25
    2500:	29 83       	std	Y+1, r18	; 0x01
    2502:	20 93 bb 00 	sts	0x00BB, r18
    2506:	84 e8       	ldi	r24, 0x84	; 132
    2508:	80 93 bc 00 	sts	0x00BC, r24
    250c:	80 91 bc 00 	lds	r24, 0x00BC
    2510:	87 ff       	sbrs	r24, 7
    2512:	fc cf       	rjmp	.-8      	; 0x250c <DS1307_SetDate+0x6a>
    2514:	80 91 b9 00 	lds	r24, 0x00B9
    2518:	80 2f       	mov	r24, r16
    251a:	6a e0       	ldi	r22, 0x0A	; 10
    251c:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodqi4>
    2520:	38 2f       	mov	r19, r24
    2522:	31 70       	andi	r19, 0x01	; 1
    2524:	32 95       	swap	r19
    2526:	30 7f       	andi	r19, 0xF0	; 240
    2528:	2a 81       	ldd	r18, Y+2	; 0x02
    252a:	20 7e       	andi	r18, 0xE0	; 224
    252c:	80 2f       	mov	r24, r16
    252e:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodqi4>
    2532:	9f 70       	andi	r25, 0x0F	; 15
    2534:	23 2b       	or	r18, r19
    2536:	29 2b       	or	r18, r25
    2538:	2a 83       	std	Y+2, r18	; 0x02
    253a:	20 93 bb 00 	sts	0x00BB, r18
    253e:	84 e8       	ldi	r24, 0x84	; 132
    2540:	80 93 bc 00 	sts	0x00BC, r24
    2544:	80 91 bc 00 	lds	r24, 0x00BC
    2548:	87 ff       	sbrs	r24, 7
    254a:	fc cf       	rjmp	.-8      	; 0x2544 <DS1307_SetDate+0xa2>
    254c:	80 91 b9 00 	lds	r24, 0x00B9
    2550:	8f 2d       	mov	r24, r15
    2552:	6a e0       	ldi	r22, 0x0A	; 10
    2554:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodqi4>
    2558:	28 2f       	mov	r18, r24
    255a:	22 95       	swap	r18
    255c:	20 7f       	andi	r18, 0xF0	; 240
    255e:	8f 2d       	mov	r24, r15
    2560:	0e 94 1c 32 	call	0x6438	; 0x6438 <__udivmodqi4>
    2564:	9f 70       	andi	r25, 0x0F	; 15
    2566:	29 2b       	or	r18, r25
    2568:	2b 83       	std	Y+3, r18	; 0x03
    256a:	20 93 bb 00 	sts	0x00BB, r18
    256e:	84 e8       	ldi	r24, 0x84	; 132
    2570:	80 93 bc 00 	sts	0x00BC, r24
    2574:	80 91 bc 00 	lds	r24, 0x00BC
    2578:	87 ff       	sbrs	r24, 7
    257a:	fc cf       	rjmp	.-8      	; 0x2574 <DS1307_SetDate+0xd2>
    257c:	80 91 b9 00 	lds	r24, 0x00B9
    2580:	84 e9       	ldi	r24, 0x94	; 148
    2582:	80 93 bc 00 	sts	0x00BC, r24
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	0f 90       	pop	r0
    258c:	cf 91       	pop	r28
    258e:	df 91       	pop	r29
    2590:	1f 91       	pop	r17
    2592:	0f 91       	pop	r16
    2594:	ff 90       	pop	r15
    2596:	08 95       	ret

00002598 <disk_initialize>:
DSTATUS disk_initialize (
	BYTE drv				/* Physical drive number (0..) */
)
{
	return FR_OK;
}
    2598:	80 e0       	ldi	r24, 0x00	; 0
    259a:	08 95       	ret

0000259c <disk_status>:
DSTATUS disk_status (
	BYTE drv		/* Physical drive number (0..) */
)
{
	return FR_OK;
}
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	08 95       	ret

000025a0 <disk_ioctl>:
	BYTE drv,		/* Physical drive number (0..) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
	if (ctrl == CTRL_SYNC)
    25a0:	66 23       	and	r22, r22
    25a2:	11 f0       	breq	.+4      	; 0x25a8 <disk_ioctl+0x8>
    25a4:	84 e0       	ldi	r24, 0x04	; 4
    25a6:	08 95       	ret
    25a8:	80 e0       	ldi	r24, 0x00	; 0
	  return RES_OK;
	else
	  return RES_PARERR;
}
    25aa:	08 95       	ret

000025ac <get_fattime>:


DWORD get_fattime (void)
{
    25ac:	df 93       	push	r29
    25ae:	cf 93       	push	r28
    25b0:	00 d0       	rcall	.+0      	; 0x25b2 <get_fattime+0x6>
    25b2:	00 d0       	rcall	.+0      	; 0x25b4 <get_fattime+0x8>
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <get_fattime+0xa>
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
	uint8_t Day,  Month,  Year;
	uint8_t Hour, Minute, Second;

	DS1307_GetDate(&Day,  &Month,  &Year);
    25ba:	ce 01       	movw	r24, r28
    25bc:	01 96       	adiw	r24, 0x01	; 1
    25be:	be 01       	movw	r22, r28
    25c0:	6e 5f       	subi	r22, 0xFE	; 254
    25c2:	7f 4f       	sbci	r23, 0xFF	; 255
    25c4:	ae 01       	movw	r20, r28
    25c6:	4d 5f       	subi	r20, 0xFD	; 253
    25c8:	5f 4f       	sbci	r21, 0xFF	; 255
    25ca:	52 de       	rcall	.-860    	; 0x2270 <DS1307_GetDate>
	DS1307_GetTime(&Hour, &Minute, &Second);
    25cc:	ce 01       	movw	r24, r28
    25ce:	04 96       	adiw	r24, 0x04	; 4
    25d0:	be 01       	movw	r22, r28
    25d2:	6b 5f       	subi	r22, 0xFB	; 251
    25d4:	7f 4f       	sbci	r23, 0xFF	; 255
    25d6:	ae 01       	movw	r20, r28
    25d8:	4a 5f       	subi	r20, 0xFA	; 250
    25da:	5f 4f       	sbci	r21, 0xFF	; 255
    25dc:	ab dd       	rcall	.-1194   	; 0x2134 <DS1307_GetTime>
    25de:	29 81       	ldd	r18, Y+1	; 0x01
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	40 e0       	ldi	r20, 0x00	; 0
    25e4:	50 e0       	ldi	r21, 0x00	; 0
    25e6:	a9 01       	movw	r20, r18
    25e8:	33 27       	eor	r19, r19
    25ea:	22 27       	eor	r18, r18
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	a0 e0       	ldi	r26, 0x00	; 0
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	f5 e1       	ldi	r31, 0x15	; 21
    25f6:	88 0f       	add	r24, r24
    25f8:	99 1f       	adc	r25, r25
    25fa:	aa 1f       	adc	r26, r26
    25fc:	bb 1f       	adc	r27, r27
    25fe:	fa 95       	dec	r31
    2600:	d1 f7       	brne	.-12     	; 0x25f6 <get_fattime+0x4a>
    2602:	28 2b       	or	r18, r24
    2604:	39 2b       	or	r19, r25
    2606:	4a 2b       	or	r20, r26
    2608:	5b 2b       	or	r21, r27
    260a:	8c 81       	ldd	r24, Y+4	; 0x04
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	a0 e0       	ldi	r26, 0x00	; 0
    2610:	b0 e0       	ldi	r27, 0x00	; 0
    2612:	eb e0       	ldi	r30, 0x0B	; 11
    2614:	88 0f       	add	r24, r24
    2616:	99 1f       	adc	r25, r25
    2618:	aa 1f       	adc	r26, r26
    261a:	bb 1f       	adc	r27, r27
    261c:	ea 95       	dec	r30
    261e:	d1 f7       	brne	.-12     	; 0x2614 <get_fattime+0x68>
    2620:	28 2b       	or	r18, r24
    2622:	39 2b       	or	r19, r25
    2624:	4a 2b       	or	r20, r26
    2626:	5b 2b       	or	r21, r27
    2628:	8d 81       	ldd	r24, Y+5	; 0x05
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	a0 e0       	ldi	r26, 0x00	; 0
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	75 e0       	ldi	r23, 0x05	; 5
    2632:	88 0f       	add	r24, r24
    2634:	99 1f       	adc	r25, r25
    2636:	aa 1f       	adc	r26, r26
    2638:	bb 1f       	adc	r27, r27
    263a:	7a 95       	dec	r23
    263c:	d1 f7       	brne	.-12     	; 0x2632 <get_fattime+0x86>
    263e:	28 2b       	or	r18, r24
    2640:	39 2b       	or	r19, r25
    2642:	4a 2b       	or	r20, r26
    2644:	5b 2b       	or	r21, r27
    2646:	8e 81       	ldd	r24, Y+6	; 0x06
    2648:	86 95       	lsr	r24
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	a0 e0       	ldi	r26, 0x00	; 0
    264e:	b0 e0       	ldi	r27, 0x00	; 0
    2650:	28 2b       	or	r18, r24
    2652:	39 2b       	or	r19, r25
    2654:	4a 2b       	or	r20, r26
    2656:	5b 2b       	or	r21, r27
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	44 96       	adiw	r24, 0x14	; 20
    265e:	aa 27       	eor	r26, r26
    2660:	97 fd       	sbrc	r25, 7
    2662:	a0 95       	com	r26
    2664:	ba 2f       	mov	r27, r26
    2666:	69 e1       	ldi	r22, 0x19	; 25
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	aa 1f       	adc	r26, r26
    266e:	bb 1f       	adc	r27, r27
    2670:	6a 95       	dec	r22
    2672:	d1 f7       	brne	.-12     	; 0x2668 <get_fattime+0xbc>
    2674:	28 2b       	or	r18, r24
    2676:	39 2b       	or	r19, r25
    2678:	4a 2b       	or	r20, r26
    267a:	5b 2b       	or	r21, r27
	             ((DWORD)Month << 21) |
	               ((DWORD)Day << 16) |
	              ((DWORD)Hour << 11) |
	             ((DWORD)Minute << 5) |
	      (((DWORD)Second >> 1) << 0);
}
    267c:	b9 01       	movw	r22, r18
    267e:	ca 01       	movw	r24, r20
    2680:	26 96       	adiw	r28, 0x06	; 6
    2682:	0f b6       	in	r0, 0x3f	; 63
    2684:	f8 94       	cli
    2686:	de bf       	out	0x3e, r29	; 62
    2688:	0f be       	out	0x3f, r0	; 63
    268a:	cd bf       	out	0x3d, r28	; 61
    268c:	cf 91       	pop	r28
    268e:	df 91       	pop	r29
    2690:	08 95       	ret

00002692 <disk_write>:
	BYTE drv,			/* Physical drive number (0..) */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	BYTE count			/* Number of sectors to write (1..255) */
)
{
    2692:	0f 93       	push	r16
    2694:	fb 01       	movw	r30, r22
	DataflashManager_WriteBlocks_RAM(sector, count, buff);
    2696:	ca 01       	movw	r24, r20
    2698:	b9 01       	movw	r22, r18
    269a:	40 2f       	mov	r20, r16
    269c:	50 e0       	ldi	r21, 0x00	; 0
    269e:	9f 01       	movw	r18, r30
    26a0:	0e 94 be 0a 	call	0x157c	; 0x157c <DataflashManager_WriteBlocks_RAM>
	return RES_OK;
}
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	0f 91       	pop	r16
    26a8:	08 95       	ret

000026aa <disk_read>:
	BYTE drv,		/* Physical drive number (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	BYTE count		/* Number of sectors to read (1..255) */
)
{
    26aa:	0f 93       	push	r16
    26ac:	fb 01       	movw	r30, r22
	DataflashManager_ReadBlocks_RAM(sector, count, buff);
    26ae:	ca 01       	movw	r24, r20
    26b0:	b9 01       	movw	r22, r18
    26b2:	40 2f       	mov	r20, r16
    26b4:	50 e0       	ldi	r21, 0x00	; 0
    26b6:	9f 01       	movw	r18, r30
    26b8:	25 d8       	rcall	.-4022   	; 0x1704 <DataflashManager_ReadBlocks_RAM>
	return RES_OK;
}
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	0f 91       	pop	r16
    26be:	08 95       	ret

000026c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
    26c0:	0f 93       	push	r16
    26c2:	1f 93       	push	r17
    26c4:	cf 93       	push	r28
    26c6:	df 93       	push	r29
    26c8:	8c 01       	movw	r16, r24
    26ca:	eb 01       	movw	r28, r22
    26cc:	ba 01       	movw	r22, r20
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	0e c0       	rjmp	.+28     	; 0x26f0 <mem_cpy+0x30>

#if _WORD_ACCESS == 1
	while (cnt >= sizeof(int)) {
		*(int*)d = *(int*)s;
    26d4:	f8 01       	movw	r30, r16
    26d6:	e2 0f       	add	r30, r18
    26d8:	f3 1f       	adc	r31, r19
    26da:	de 01       	movw	r26, r28
    26dc:	a2 0f       	add	r26, r18
    26de:	b3 1f       	adc	r27, r19
    26e0:	8d 91       	ld	r24, X+
    26e2:	9c 91       	ld	r25, X
    26e4:	91 83       	std	Z+1, r25	; 0x01
    26e6:	80 83       	st	Z, r24
    26e8:	42 50       	subi	r20, 0x02	; 2
    26ea:	50 40       	sbci	r21, 0x00	; 0
    26ec:	2e 5f       	subi	r18, 0xFE	; 254
    26ee:	3f 4f       	sbci	r19, 0xFF	; 255
void mem_cpy (void* dst, const void* src, int cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

#if _WORD_ACCESS == 1
	while (cnt >= sizeof(int)) {
    26f0:	42 30       	cpi	r20, 0x02	; 2
    26f2:	51 05       	cpc	r21, r1
    26f4:	78 f7       	brcc	.-34     	; 0x26d4 <mem_cpy+0x14>
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
    26f6:	cb 01       	movw	r24, r22
    26f8:	8e 7f       	andi	r24, 0xFE	; 254
    26fa:	ab 01       	movw	r20, r22
    26fc:	48 1b       	sub	r20, r24
    26fe:	59 0b       	sbc	r21, r25
    2700:	de 01       	movw	r26, r28
    2702:	a8 0f       	add	r26, r24
    2704:	b9 1f       	adc	r27, r25
    2706:	f8 01       	movw	r30, r16
    2708:	e8 0f       	add	r30, r24
    270a:	f9 1f       	adc	r31, r25
    270c:	02 c0       	rjmp	.+4      	; 0x2712 <mem_cpy+0x52>
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
		*d++ = *s++;
    270e:	8d 91       	ld	r24, X+
    2710:	81 93       	st	Z+, r24
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    2712:	41 50       	subi	r20, 0x01	; 1
    2714:	50 40       	sbci	r21, 0x00	; 0
    2716:	8f ef       	ldi	r24, 0xFF	; 255
    2718:	4f 3f       	cpi	r20, 0xFF	; 255
    271a:	58 07       	cpc	r21, r24
    271c:	c1 f7       	brne	.-16     	; 0x270e <mem_cpy+0x4e>
		*d++ = *s++;
}
    271e:	df 91       	pop	r29
    2720:	cf 91       	pop	r28
    2722:	1f 91       	pop	r17
    2724:	0f 91       	pop	r16
    2726:	08 95       	ret

00002728 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	BYTE *d = (BYTE*)dst;
    2728:	fc 01       	movw	r30, r24
    272a:	01 c0       	rjmp	.+2      	; 0x272e <mem_set+0x6>

	while (cnt--)
		*d++ = (BYTE)val;
    272c:	61 93       	st	Z+, r22
/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    272e:	41 50       	subi	r20, 0x01	; 1
    2730:	50 40       	sbci	r21, 0x00	; 0
    2732:	8f ef       	ldi	r24, 0xFF	; 255
    2734:	4f 3f       	cpi	r20, 0xFF	; 255
    2736:	58 07       	cpc	r21, r24
    2738:	c9 f7       	brne	.-14     	; 0x272c <mem_set+0x4>
		*d++ = (BYTE)val;
}
    273a:	08 95       	ret

0000273c <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    273c:	ef 92       	push	r14
    273e:	ff 92       	push	r15
    2740:	0f 93       	push	r16
    2742:	1f 93       	push	r17
    2744:	cf 93       	push	r28
    2746:	df 93       	push	r29
    2748:	ec 01       	movw	r28, r24
    274a:	7a 01       	movw	r14, r20
    274c:	8b 01       	movw	r16, r22
	clst -= 2;
    274e:	8e ef       	ldi	r24, 0xFE	; 254
    2750:	9f ef       	ldi	r25, 0xFF	; 255
    2752:	af ef       	ldi	r26, 0xFF	; 255
    2754:	bf ef       	ldi	r27, 0xFF	; 255
    2756:	e8 0e       	add	r14, r24
    2758:	f9 1e       	adc	r15, r25
    275a:	0a 1f       	adc	r16, r26
    275c:	1b 1f       	adc	r17, r27
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    275e:	8e 89       	ldd	r24, Y+22	; 0x16
    2760:	9f 89       	ldd	r25, Y+23	; 0x17
    2762:	a8 8d       	ldd	r26, Y+24	; 0x18
    2764:	b9 8d       	ldd	r27, Y+25	; 0x19
    2766:	02 97       	sbiw	r24, 0x02	; 2
    2768:	a1 09       	sbc	r26, r1
    276a:	b1 09       	sbc	r27, r1
    276c:	e8 16       	cp	r14, r24
    276e:	f9 06       	cpc	r15, r25
    2770:	0a 07       	cpc	r16, r26
    2772:	1b 07       	cpc	r17, r27
    2774:	28 f0       	brcs	.+10     	; 0x2780 <clust2sect+0x44>
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	40 e0       	ldi	r20, 0x00	; 0
    277c:	50 e0       	ldi	r21, 0x00	; 0
    277e:	12 c0       	rjmp	.+36     	; 0x27a4 <clust2sect+0x68>
	return clst * fs->csize + fs->database;
    2780:	2a 81       	ldd	r18, Y+2	; 0x02
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e0       	ldi	r20, 0x00	; 0
    2786:	50 e0       	ldi	r21, 0x00	; 0
    2788:	c8 01       	movw	r24, r16
    278a:	b7 01       	movw	r22, r14
    278c:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__mulsi3>
    2790:	9b 01       	movw	r18, r22
    2792:	ac 01       	movw	r20, r24
    2794:	8e a1       	ldd	r24, Y+38	; 0x26
    2796:	9f a1       	ldd	r25, Y+39	; 0x27
    2798:	a8 a5       	ldd	r26, Y+40	; 0x28
    279a:	b9 a5       	ldd	r27, Y+41	; 0x29
    279c:	28 0f       	add	r18, r24
    279e:	39 1f       	adc	r19, r25
    27a0:	4a 1f       	adc	r20, r26
    27a2:	5b 1f       	adc	r21, r27
}
    27a4:	b9 01       	movw	r22, r18
    27a6:	ca 01       	movw	r24, r20
    27a8:	df 91       	pop	r29
    27aa:	cf 91       	pop	r28
    27ac:	1f 91       	pop	r17
    27ae:	0f 91       	pop	r16
    27b0:	ff 90       	pop	r15
    27b2:	ef 90       	pop	r14
    27b4:	08 95       	ret

000027b6 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    27b6:	db 01       	movw	r26, r22
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
    27b8:	88 23       	and	r24, r24
    27ba:	11 f0       	breq	.+4      	; 0x27c0 <f_mount+0xa>
    27bc:	8b e0       	ldi	r24, 0x0B	; 11
    27be:	08 95       	ret
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
    27c0:	e0 91 a8 03 	lds	r30, 0x03A8
    27c4:	f0 91 a9 03 	lds	r31, 0x03A9

	if (rfs) {
    27c8:	30 97       	sbiw	r30, 0x00	; 0
    27ca:	09 f0       	breq	.+2      	; 0x27ce <f_mount+0x18>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
    27cc:	10 82       	st	Z, r1
	}

	if (fs) {
    27ce:	10 97       	sbiw	r26, 0x00	; 0
    27d0:	09 f0       	breq	.+2      	; 0x27d4 <f_mount+0x1e>
		fs->fs_type = 0;			/* Clear new fs object */
    27d2:	1c 92       	st	X, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
    27d4:	b0 93 a9 03 	sts	0x03A9, r27
    27d8:	a0 93 a8 03 	sts	0x03A8, r26
    27dc:	80 e0       	ldi	r24, 0x00	; 0

	return FR_OK;
}
    27de:	08 95       	ret

000027e0 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    27e0:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    27e2:	00 97       	sbiw	r24, 0x00	; 0
    27e4:	81 f0       	breq	.+32     	; 0x2806 <validate+0x26>
    27e6:	80 81       	ld	r24, Z
    27e8:	88 23       	and	r24, r24
    27ea:	69 f0       	breq	.+26     	; 0x2806 <validate+0x26>
    27ec:	86 81       	ldd	r24, Z+6	; 0x06
    27ee:	97 81       	ldd	r25, Z+7	; 0x07
    27f0:	86 17       	cp	r24, r22
    27f2:	97 07       	cpc	r25, r23
    27f4:	41 f4       	brne	.+16     	; 0x2806 <validate+0x26>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    27f6:	81 81       	ldd	r24, Z+1	; 0x01
    27f8:	d1 de       	rcall	.-606    	; 0x259c <disk_status>
    27fa:	80 fd       	sbrc	r24, 0
    27fc:	02 c0       	rjmp	.+4      	; 0x2802 <validate+0x22>
    27fe:	80 e0       	ldi	r24, 0x00	; 0
    2800:	08 95       	ret
    2802:	83 e0       	ldi	r24, 0x03	; 3
    2804:	08 95       	ret
    2806:	89 e0       	ldi	r24, 0x09	; 9
		return FR_NOT_READY;

	return FR_OK;
}
    2808:	08 95       	ret

0000280a <check_fs>:
static
BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    280a:	0f 93       	push	r16
    280c:	cf 93       	push	r28
    280e:	df 93       	push	r29
    2810:	ec 01       	movw	r28, r24
    2812:	9a 01       	movw	r18, r20
    2814:	ab 01       	movw	r20, r22
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    2816:	bc 01       	movw	r22, r24
    2818:	62 5d       	subi	r22, 0xD2	; 210
    281a:	7f 4f       	sbci	r23, 0xFF	; 255
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	01 e0       	ldi	r16, 0x01	; 1
    2820:	44 df       	rcall	.-376    	; 0x26aa <disk_read>
    2822:	88 23       	and	r24, r24
    2824:	11 f0       	breq	.+4      	; 0x282a <check_fs+0x20>
    2826:	23 e0       	ldi	r18, 0x03	; 3
    2828:	29 c0       	rjmp	.+82     	; 0x287c <check_fs+0x72>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    282a:	c4 5d       	subi	r28, 0xD4	; 212
    282c:	dd 4f       	sbci	r29, 0xFD	; 253
    282e:	88 81       	ld	r24, Y
    2830:	99 81       	ldd	r25, Y+1	; 0x01
    2832:	cc 52       	subi	r28, 0x2C	; 44
    2834:	d2 40       	sbci	r29, 0x02	; 2
    2836:	85 55       	subi	r24, 0x55	; 85
    2838:	9a 4a       	sbci	r25, 0xAA	; 170
    283a:	11 f0       	breq	.+4      	; 0x2840 <check_fs+0x36>
    283c:	22 e0       	ldi	r18, 0x02	; 2
    283e:	1e c0       	rjmp	.+60     	; 0x287c <check_fs+0x72>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    2840:	cc 59       	subi	r28, 0x9C	; 156
    2842:	df 4f       	sbci	r29, 0xFF	; 255
    2844:	88 81       	ld	r24, Y
    2846:	99 81       	ldd	r25, Y+1	; 0x01
    2848:	aa 81       	ldd	r26, Y+2	; 0x02
    284a:	bb 81       	ldd	r27, Y+3	; 0x03
    284c:	c4 56       	subi	r28, 0x64	; 100
    284e:	d0 40       	sbci	r29, 0x00	; 0
    2850:	b0 70       	andi	r27, 0x00	; 0
    2852:	86 54       	subi	r24, 0x46	; 70
    2854:	91 44       	sbci	r25, 0x41	; 65
    2856:	a4 45       	sbci	r26, 0x54	; 84
    2858:	b0 40       	sbci	r27, 0x00	; 0
    285a:	11 f4       	brne	.+4      	; 0x2860 <check_fs+0x56>
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	0e c0       	rjmp	.+28     	; 0x287c <check_fs+0x72>
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	c0 58       	subi	r28, 0x80	; 128
    2864:	df 4f       	sbci	r29, 0xFF	; 255
    2866:	88 81       	ld	r24, Y
    2868:	99 81       	ldd	r25, Y+1	; 0x01
    286a:	aa 81       	ldd	r26, Y+2	; 0x02
    286c:	bb 81       	ldd	r27, Y+3	; 0x03
    286e:	b0 70       	andi	r27, 0x00	; 0
    2870:	86 54       	subi	r24, 0x46	; 70
    2872:	91 44       	sbci	r25, 0x41	; 65
    2874:	a4 45       	sbci	r26, 0x54	; 84
    2876:	b0 40       	sbci	r27, 0x00	; 0
    2878:	09 f0       	breq	.+2      	; 0x287c <check_fs+0x72>
    287a:	21 e0       	ldi	r18, 0x01	; 1
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    287c:	82 2f       	mov	r24, r18
    287e:	df 91       	pop	r29
    2880:	cf 91       	pop	r28
    2882:	0f 91       	pop	r16
    2884:	08 95       	ret

00002886 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    2886:	2f 92       	push	r2
    2888:	3f 92       	push	r3
    288a:	4f 92       	push	r4
    288c:	5f 92       	push	r5
    288e:	6f 92       	push	r6
    2890:	7f 92       	push	r7
    2892:	8f 92       	push	r8
    2894:	9f 92       	push	r9
    2896:	af 92       	push	r10
    2898:	bf 92       	push	r11
    289a:	cf 92       	push	r12
    289c:	df 92       	push	r13
    289e:	ef 92       	push	r14
    28a0:	ff 92       	push	r15
    28a2:	0f 93       	push	r16
    28a4:	1f 93       	push	r17
    28a6:	df 93       	push	r29
    28a8:	cf 93       	push	r28
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
    28ae:	2a 97       	sbiw	r28, 0x0a	; 10
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	cd bf       	out	0x3d, r28	; 61
    28ba:	dc 01       	movw	r26, r24
    28bc:	14 2f       	mov	r17, r20
	BYTE fmt, b, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    28be:	ed 91       	ld	r30, X+
    28c0:	fc 91       	ld	r31, X
    28c2:	11 97       	sbiw	r26, 0x01	; 1
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
    28c4:	80 81       	ld	r24, Z
    28c6:	28 2f       	mov	r18, r24
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	20 53       	subi	r18, 0x30	; 48
    28cc:	30 40       	sbci	r19, 0x00	; 0
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
    28ce:	2a 30       	cpi	r18, 0x0A	; 10
    28d0:	31 05       	cpc	r19, r1
    28d2:	50 f4       	brcc	.+20     	; 0x28e8 <chk_mounted+0x62>
    28d4:	81 81       	ldd	r24, Z+1	; 0x01
    28d6:	8a 33       	cpi	r24, 0x3A	; 58
    28d8:	39 f4       	brne	.+14     	; 0x28e8 <chk_mounted+0x62>
		p += 2; *path = p;			/* Return pointer to the path name */
    28da:	32 96       	adiw	r30, 0x02	; 2
    28dc:	ed 93       	st	X+, r30
    28de:	fc 93       	st	X, r31
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
    28e0:	23 2b       	or	r18, r19
    28e2:	11 f0       	breq	.+4      	; 0x28e8 <chk_mounted+0x62>
    28e4:	8b e0       	ldi	r24, 0x0B	; 11
    28e6:	51 c2       	rjmp	.+1186   	; 0x2d8a <chk_mounted+0x504>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Return pointer to the corresponding file system object */
    28e8:	20 91 a8 03 	lds	r18, 0x03A8
    28ec:	30 91 a9 03 	lds	r19, 0x03A9
    28f0:	3a 87       	std	Y+10, r19	; 0x0a
    28f2:	29 87       	std	Y+9, r18	; 0x09
    28f4:	db 01       	movw	r26, r22
    28f6:	2d 93       	st	X+, r18
    28f8:	3c 93       	st	X, r19
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
    28fa:	23 2b       	or	r18, r19
    28fc:	11 f4       	brne	.+4      	; 0x2902 <chk_mounted+0x7c>
    28fe:	8c e0       	ldi	r24, 0x0C	; 12
    2900:	44 c2       	rjmp	.+1160   	; 0x2d8a <chk_mounted+0x504>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
    2902:	e9 85       	ldd	r30, Y+9	; 0x09
    2904:	fa 85       	ldd	r31, Y+10	; 0x0a
    2906:	80 81       	ld	r24, Z
    2908:	88 23       	and	r24, r24
    290a:	51 f0       	breq	.+20     	; 0x2920 <chk_mounted+0x9a>
		stat = disk_status(fs->drv);
    290c:	81 81       	ldd	r24, Z+1	; 0x01
    290e:	46 de       	rcall	.-884    	; 0x259c <disk_status>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
    2910:	80 fd       	sbrc	r24, 0
    2912:	06 c0       	rjmp	.+12     	; 0x2920 <chk_mounted+0x9a>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    2914:	11 23       	and	r17, r17
    2916:	09 f4       	brne	.+2      	; 0x291a <chk_mounted+0x94>
    2918:	35 c2       	rjmp	.+1130   	; 0x2d84 <chk_mounted+0x4fe>
    291a:	82 fd       	sbrc	r24, 2
    291c:	31 c2       	rjmp	.+1122   	; 0x2d80 <chk_mounted+0x4fa>
    291e:	32 c2       	rjmp	.+1124   	; 0x2d84 <chk_mounted+0x4fe>
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume (initialize the file system object) */

	fs->fs_type = 0;					/* Clear the file system object */
    2920:	a9 85       	ldd	r26, Y+9	; 0x09
    2922:	ba 85       	ldd	r27, Y+10	; 0x0a
    2924:	1c 92       	st	X, r1
	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
    2926:	11 96       	adiw	r26, 0x01	; 1
    2928:	1c 92       	st	X, r1
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    292a:	80 e0       	ldi	r24, 0x00	; 0
    292c:	35 de       	rcall	.-918    	; 0x2598 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
    292e:	80 ff       	sbrs	r24, 0
    2930:	02 c0       	rjmp	.+4      	; 0x2936 <chk_mounted+0xb0>
    2932:	83 e0       	ldi	r24, 0x03	; 3
    2934:	2a c2       	rjmp	.+1108   	; 0x2d8a <chk_mounted+0x504>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    2936:	11 23       	and	r17, r17
    2938:	11 f0       	breq	.+4      	; 0x293e <chk_mounted+0xb8>
    293a:	82 fd       	sbrc	r24, 2
    293c:	21 c2       	rjmp	.+1090   	; 0x2d80 <chk_mounted+0x4fa>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive (Supports only generic partitions, FDISK and SFD) */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
    293e:	89 85       	ldd	r24, Y+9	; 0x09
    2940:	9a 85       	ldd	r25, Y+10	; 0x0a
    2942:	40 e0       	ldi	r20, 0x00	; 0
    2944:	50 e0       	ldi	r21, 0x00	; 0
    2946:	60 e0       	ldi	r22, 0x00	; 0
    2948:	70 e0       	ldi	r23, 0x00	; 0
    294a:	5f df       	rcall	.-322    	; 0x280a <check_fs>
	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
    294c:	81 30       	cpi	r24, 0x01	; 1
    294e:	21 f0       	breq	.+8      	; 0x2958 <chk_mounted+0xd2>
    2950:	22 24       	eor	r2, r2
    2952:	33 24       	eor	r3, r3
    2954:	21 01       	movw	r4, r2
    2956:	11 c0       	rjmp	.+34     	; 0x297a <chk_mounted+0xf4>
		/* Check the partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
    2958:	e9 85       	ldd	r30, Y+9	; 0x09
    295a:	fa 85       	ldd	r31, Y+10	; 0x0a
    295c:	e4 51       	subi	r30, 0x14	; 20
    295e:	fe 4f       	sbci	r31, 0xFE	; 254
		if (tbl[4]) {									/* Is the partition existing? */
    2960:	84 81       	ldd	r24, Z+4	; 0x04
    2962:	88 23       	and	r24, r24
    2964:	09 f4       	brne	.+2      	; 0x2968 <chk_mounted+0xe2>
    2966:	10 c2       	rjmp	.+1056   	; 0x2d88 <chk_mounted+0x502>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    2968:	20 84       	ldd	r2, Z+8	; 0x08
    296a:	31 84       	ldd	r3, Z+9	; 0x09
    296c:	42 84       	ldd	r4, Z+10	; 0x0a
    296e:	53 84       	ldd	r5, Z+11	; 0x0b
			fmt = check_fs(fs, bsect);					/* Check the partition */
    2970:	89 85       	ldd	r24, Y+9	; 0x09
    2972:	9a 85       	ldd	r25, Y+10	; 0x0a
    2974:	b2 01       	movw	r22, r4
    2976:	a1 01       	movw	r20, r2
    2978:	48 df       	rcall	.-368    	; 0x280a <check_fs>
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    297a:	83 30       	cpi	r24, 0x03	; 3
    297c:	11 f4       	brne	.+4      	; 0x2982 <chk_mounted+0xfc>
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	04 c2       	rjmp	.+1032   	; 0x2d8a <chk_mounted+0x504>
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
    2982:	88 23       	and	r24, r24
    2984:	09 f0       	breq	.+2      	; 0x2988 <chk_mounted+0x102>
    2986:	00 c2       	rjmp	.+1024   	; 0x2d88 <chk_mounted+0x502>

	/* Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    2988:	e9 85       	ldd	r30, Y+9	; 0x09
    298a:	fa 85       	ldd	r31, Y+10	; 0x0a
    298c:	81 ad       	ldd	r24, Z+57	; 0x39
    298e:	92 ad       	ldd	r25, Z+58	; 0x3a
    2990:	80 50       	subi	r24, 0x00	; 0
    2992:	92 40       	sbci	r25, 0x02	; 2
    2994:	09 f0       	breq	.+2      	; 0x2998 <chk_mounted+0x112>
    2996:	f8 c1       	rjmp	.+1008   	; 0x2d88 <chk_mounted+0x502>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    2998:	29 85       	ldd	r18, Y+9	; 0x09
    299a:	3a 85       	ldd	r19, Y+10	; 0x0a
    299c:	2c 5b       	subi	r18, 0xBC	; 188
    299e:	3f 4f       	sbci	r19, 0xFF	; 255
    29a0:	3a 87       	std	Y+10, r19	; 0x0a
    29a2:	29 87       	std	Y+9, r18	; 0x09
    29a4:	d9 01       	movw	r26, r18
    29a6:	8d 91       	ld	r24, X+
    29a8:	9c 91       	ld	r25, X
    29aa:	11 97       	sbiw	r26, 0x01	; 1
    29ac:	a4 54       	subi	r26, 0x44	; 68
    29ae:	b0 40       	sbci	r27, 0x00	; 0
    29b0:	ba 87       	std	Y+10, r27	; 0x0a
    29b2:	a9 87       	std	Y+9, r26	; 0x09
    29b4:	5c 01       	movw	r10, r24
    29b6:	cc 24       	eor	r12, r12
    29b8:	dd 24       	eor	r13, r13
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    29ba:	a1 14       	cp	r10, r1
    29bc:	b1 04       	cpc	r11, r1
    29be:	c1 04       	cpc	r12, r1
    29c0:	d1 04       	cpc	r13, r1
    29c2:	59 f4       	brne	.+22     	; 0x29da <chk_mounted+0x154>
    29c4:	ae 5a       	subi	r26, 0xAE	; 174
    29c6:	bf 4f       	sbci	r27, 0xFF	; 255
    29c8:	ad 90       	ld	r10, X+
    29ca:	bd 90       	ld	r11, X+
    29cc:	cd 90       	ld	r12, X+
    29ce:	dc 90       	ld	r13, X
    29d0:	13 97       	sbiw	r26, 0x03	; 3
    29d2:	a2 55       	subi	r26, 0x52	; 82
    29d4:	b0 40       	sbci	r27, 0x00	; 0
    29d6:	ba 87       	std	Y+10, r27	; 0x0a
    29d8:	a9 87       	std	Y+9, r26	; 0x09
	fs->fsize = fasize;
    29da:	e9 85       	ldd	r30, Y+9	; 0x09
    29dc:	fa 85       	ldd	r31, Y+10	; 0x0a
    29de:	a2 8e       	std	Z+26, r10	; 0x1a
    29e0:	b3 8e       	std	Z+27, r11	; 0x1b
    29e2:	c4 8e       	std	Z+28, r12	; 0x1c
    29e4:	d5 8e       	std	Z+29, r13	; 0x1d

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    29e6:	46 ad       	ldd	r20, Z+62	; 0x3e
    29e8:	43 83       	std	Z+3, r20	; 0x03
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    29ea:	84 2f       	mov	r24, r20
    29ec:	81 50       	subi	r24, 0x01	; 1
    29ee:	82 30       	cpi	r24, 0x02	; 2
    29f0:	08 f0       	brcs	.+2      	; 0x29f4 <chk_mounted+0x16e>
    29f2:	ca c1       	rjmp	.+916    	; 0x2d88 <chk_mounted+0x502>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    29f4:	23 ad       	ldd	r18, Z+59	; 0x3b
    29f6:	22 83       	std	Z+2, r18	; 0x02
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be 1,2,4...128) */
    29f8:	22 23       	and	r18, r18
    29fa:	09 f4       	brne	.+2      	; 0x29fe <chk_mounted+0x178>
    29fc:	c5 c1       	rjmp	.+906    	; 0x2d88 <chk_mounted+0x502>
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	c9 01       	movw	r24, r18
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	82 23       	and	r24, r18
    2a06:	93 23       	and	r25, r19
    2a08:	89 2b       	or	r24, r25
    2a0a:	09 f0       	breq	.+2      	; 0x2a0e <chk_mounted+0x188>
    2a0c:	bd c1       	rjmp	.+890    	; 0x2d88 <chk_mounted+0x502>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    2a0e:	ff 96       	adiw	r30, 0x3f	; 63
    2a10:	80 80       	ld	r8, Z
    2a12:	91 80       	ldd	r9, Z+1	; 0x01
    2a14:	ff 97       	sbiw	r30, 0x3f	; 63
    2a16:	fa 87       	std	Y+10, r31	; 0x0a
    2a18:	e9 87       	std	Y+9, r30	; 0x09
    2a1a:	91 86       	std	Z+9, r9	; 0x09
    2a1c:	80 86       	std	Z+8, r8	; 0x08
	if (fs->n_rootdir % (SS(fs) / 32)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    2a1e:	c4 01       	movw	r24, r8
    2a20:	8f 70       	andi	r24, 0x0F	; 15
    2a22:	90 70       	andi	r25, 0x00	; 0
    2a24:	89 2b       	or	r24, r25
    2a26:	09 f0       	breq	.+2      	; 0x2a2a <chk_mounted+0x1a4>
    2a28:	af c1       	rjmp	.+862    	; 0x2d88 <chk_mounted+0x502>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    2a2a:	ef 5b       	subi	r30, 0xBF	; 191
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	80 81       	ld	r24, Z
    2a30:	91 81       	ldd	r25, Z+1	; 0x01
    2a32:	e1 54       	subi	r30, 0x41	; 65
    2a34:	f0 40       	sbci	r31, 0x00	; 0
    2a36:	fa 87       	std	Y+10, r31	; 0x0a
    2a38:	e9 87       	std	Y+9, r30	; 0x09
    2a3a:	7c 01       	movw	r14, r24
    2a3c:	00 e0       	ldi	r16, 0x00	; 0
    2a3e:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    2a40:	e1 14       	cp	r14, r1
    2a42:	f1 04       	cpc	r15, r1
    2a44:	01 05       	cpc	r16, r1
    2a46:	11 05       	cpc	r17, r1
    2a48:	51 f4       	brne	.+20     	; 0x2a5e <chk_mounted+0x1d8>
    2a4a:	e2 5b       	subi	r30, 0xB2	; 178
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	e0 80       	ld	r14, Z
    2a50:	f1 80       	ldd	r15, Z+1	; 0x01
    2a52:	02 81       	ldd	r16, Z+2	; 0x02
    2a54:	13 81       	ldd	r17, Z+3	; 0x03
    2a56:	ee 54       	subi	r30, 0x4E	; 78
    2a58:	f0 40       	sbci	r31, 0x00	; 0
    2a5a:	fa 87       	std	Y+10, r31	; 0x0a
    2a5c:	e9 87       	std	Y+9, r30	; 0x09

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    2a5e:	a9 85       	ldd	r26, Y+9	; 0x09
    2a60:	ba 85       	ldd	r27, Y+10	; 0x0a
    2a62:	dc 96       	adiw	r26, 0x3c	; 60
    2a64:	6d 90       	ld	r6, X+
    2a66:	7c 90       	ld	r7, X
    2a68:	dd 97       	sbiw	r26, 0x3d	; 61
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    2a6a:	61 14       	cp	r6, r1
    2a6c:	71 04       	cpc	r7, r1
    2a6e:	09 f4       	brne	.+2      	; 0x2a72 <chk_mounted+0x1ec>
    2a70:	8b c1       	rjmp	.+790    	; 0x2d88 <chk_mounted+0x502>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    2a72:	24 2f       	mov	r18, r20
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e0       	ldi	r20, 0x00	; 0
    2a78:	50 e0       	ldi	r21, 0x00	; 0
    2a7a:	c6 01       	movw	r24, r12
    2a7c:	b5 01       	movw	r22, r10
    2a7e:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__mulsi3>
    2a82:	69 83       	std	Y+1, r22	; 0x01
    2a84:	7a 83       	std	Y+2, r23	; 0x02
    2a86:	8b 83       	std	Y+3, r24	; 0x03
    2a88:	9c 83       	std	Y+4, r25	; 0x04

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / 32);	/* RSV+FAT+DIR */
    2a8a:	93 01       	movw	r18, r6
    2a8c:	40 e0       	ldi	r20, 0x00	; 0
    2a8e:	50 e0       	ldi	r21, 0x00	; 0
    2a90:	2d 83       	std	Y+5, r18	; 0x05
    2a92:	3e 83       	std	Y+6, r19	; 0x06
    2a94:	4f 83       	std	Y+7, r20	; 0x07
    2a96:	58 87       	std	Y+8, r21	; 0x08
    2a98:	a4 e0       	ldi	r26, 0x04	; 4
    2a9a:	96 94       	lsr	r9
    2a9c:	87 94       	ror	r8
    2a9e:	aa 95       	dec	r26
    2aa0:	e1 f7       	brne	.-8      	; 0x2a9a <chk_mounted+0x214>
    2aa2:	54 01       	movw	r10, r8
    2aa4:	cc 24       	eor	r12, r12
    2aa6:	dd 24       	eor	r13, r13
    2aa8:	a2 0e       	add	r10, r18
    2aaa:	b3 1e       	adc	r11, r19
    2aac:	c4 1e       	adc	r12, r20
    2aae:	d5 1e       	adc	r13, r21
    2ab0:	a6 0e       	add	r10, r22
    2ab2:	b7 1e       	adc	r11, r23
    2ab4:	c8 1e       	adc	r12, r24
    2ab6:	d9 1e       	adc	r13, r25
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    2ab8:	ea 14       	cp	r14, r10
    2aba:	fb 04       	cpc	r15, r11
    2abc:	0c 05       	cpc	r16, r12
    2abe:	1d 05       	cpc	r17, r13
    2ac0:	08 f4       	brcc	.+2      	; 0x2ac4 <chk_mounted+0x23e>
    2ac2:	62 c1       	rjmp	.+708    	; 0x2d88 <chk_mounted+0x502>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    2ac4:	ea 18       	sub	r14, r10
    2ac6:	fb 08       	sbc	r15, r11
    2ac8:	0c 09       	sbc	r16, r12
    2aca:	1d 09       	sbc	r17, r13
    2acc:	a9 85       	ldd	r26, Y+9	; 0x09
    2ace:	ba 85       	ldd	r27, Y+10	; 0x0a
    2ad0:	12 96       	adiw	r26, 0x02	; 2
    2ad2:	2c 91       	ld	r18, X
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	40 e0       	ldi	r20, 0x00	; 0
    2ad8:	50 e0       	ldi	r21, 0x00	; 0
    2ada:	c8 01       	movw	r24, r16
    2adc:	b7 01       	movw	r22, r14
    2ade:	0e 94 28 32 	call	0x6450	; 0x6450 <__udivmodsi4>
    2ae2:	c9 01       	movw	r24, r18
    2ae4:	da 01       	movw	r26, r20
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    2ae6:	00 97       	sbiw	r24, 0x00	; 0
    2ae8:	a1 05       	cpc	r26, r1
    2aea:	b1 05       	cpc	r27, r1
    2aec:	09 f4       	brne	.+2      	; 0x2af0 <chk_mounted+0x26a>
    2aee:	4c c1       	rjmp	.+664    	; 0x2d88 <chk_mounted+0x502>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    2af0:	86 3f       	cpi	r24, 0xF6	; 246
    2af2:	ef e0       	ldi	r30, 0x0F	; 15
    2af4:	9e 07       	cpc	r25, r30
    2af6:	e0 e0       	ldi	r30, 0x00	; 0
    2af8:	ae 07       	cpc	r26, r30
    2afa:	e0 e0       	ldi	r30, 0x00	; 0
    2afc:	be 07       	cpc	r27, r30
    2afe:	18 f4       	brcc	.+6      	; 0x2b06 <chk_mounted+0x280>
    2b00:	99 24       	eor	r9, r9
    2b02:	93 94       	inc	r9
    2b04:	0d c0       	rjmp	.+26     	; 0x2b20 <chk_mounted+0x29a>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    2b06:	86 3f       	cpi	r24, 0xF6	; 246
    2b08:	ff ef       	ldi	r31, 0xFF	; 255
    2b0a:	9f 07       	cpc	r25, r31
    2b0c:	f0 e0       	ldi	r31, 0x00	; 0
    2b0e:	af 07       	cpc	r26, r31
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	bf 07       	cpc	r27, r31
    2b14:	18 f0       	brcs	.+6      	; 0x2b1c <chk_mounted+0x296>
    2b16:	f3 e0       	ldi	r31, 0x03	; 3
    2b18:	9f 2e       	mov	r9, r31
    2b1a:	02 c0       	rjmp	.+4      	; 0x2b20 <chk_mounted+0x29a>
    2b1c:	e2 e0       	ldi	r30, 0x02	; 2
    2b1e:	9e 2e       	mov	r9, r30

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    2b20:	72 e0       	ldi	r23, 0x02	; 2
    2b22:	e7 2e       	mov	r14, r23
    2b24:	f1 2c       	mov	r15, r1
    2b26:	01 2d       	mov	r16, r1
    2b28:	11 2d       	mov	r17, r1
    2b2a:	e8 0e       	add	r14, r24
    2b2c:	f9 1e       	adc	r15, r25
    2b2e:	0a 1f       	adc	r16, r26
    2b30:	1b 1f       	adc	r17, r27
    2b32:	a9 85       	ldd	r26, Y+9	; 0x09
    2b34:	ba 85       	ldd	r27, Y+10	; 0x0a
    2b36:	56 96       	adiw	r26, 0x16	; 22
    2b38:	ed 92       	st	X+, r14
    2b3a:	fd 92       	st	X+, r15
    2b3c:	0d 93       	st	X+, r16
    2b3e:	1c 93       	st	X, r17
    2b40:	59 97       	sbiw	r26, 0x19	; 25
	fs->database = bsect + sysect;						/* Data start sector */
    2b42:	a2 0c       	add	r10, r2
    2b44:	b3 1c       	adc	r11, r3
    2b46:	c4 1c       	adc	r12, r4
    2b48:	d5 1c       	adc	r13, r5
    2b4a:	e9 85       	ldd	r30, Y+9	; 0x09
    2b4c:	fa 85       	ldd	r31, Y+10	; 0x0a
    2b4e:	a6 a2       	std	Z+38, r10	; 0x26
    2b50:	b7 a2       	std	Z+39, r11	; 0x27
    2b52:	c0 a6       	std	Z+40, r12	; 0x28
    2b54:	d1 a6       	std	Z+41, r13	; 0x29
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    2b56:	8d 81       	ldd	r24, Y+5	; 0x05
    2b58:	9e 81       	ldd	r25, Y+6	; 0x06
    2b5a:	af 81       	ldd	r26, Y+7	; 0x07
    2b5c:	b8 85       	ldd	r27, Y+8	; 0x08
    2b5e:	82 0d       	add	r24, r2
    2b60:	93 1d       	adc	r25, r3
    2b62:	a4 1d       	adc	r26, r4
    2b64:	b5 1d       	adc	r27, r5
    2b66:	e9 85       	ldd	r30, Y+9	; 0x09
    2b68:	fa 85       	ldd	r31, Y+10	; 0x0a
    2b6a:	86 8f       	std	Z+30, r24	; 0x1e
    2b6c:	97 8f       	std	Z+31, r25	; 0x1f
    2b6e:	a0 a3       	std	Z+32, r26	; 0x20
    2b70:	b1 a3       	std	Z+33, r27	; 0x21
    2b72:	20 85       	ldd	r18, Z+8	; 0x08
    2b74:	31 85       	ldd	r19, Z+9	; 0x09
	if (fmt == FS_FAT32) {
    2b76:	f3 e0       	ldi	r31, 0x03	; 3
    2b78:	9f 16       	cp	r9, r31
    2b7a:	01 f5       	brne	.+64     	; 0x2bbc <chk_mounted+0x336>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    2b7c:	23 2b       	or	r18, r19
    2b7e:	09 f0       	breq	.+2      	; 0x2b82 <chk_mounted+0x2fc>
    2b80:	03 c1       	rjmp	.+518    	; 0x2d88 <chk_mounted+0x502>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    2b82:	29 85       	ldd	r18, Y+9	; 0x09
    2b84:	3a 85       	ldd	r19, Y+10	; 0x0a
    2b86:	26 5a       	subi	r18, 0xA6	; 166
    2b88:	3f 4f       	sbci	r19, 0xFF	; 255
    2b8a:	3a 87       	std	Y+10, r19	; 0x0a
    2b8c:	29 87       	std	Y+9, r18	; 0x09
    2b8e:	f9 01       	movw	r30, r18
    2b90:	80 81       	ld	r24, Z
    2b92:	91 81       	ldd	r25, Z+1	; 0x01
    2b94:	a2 81       	ldd	r26, Z+2	; 0x02
    2b96:	b3 81       	ldd	r27, Z+3	; 0x03
    2b98:	ea 55       	subi	r30, 0x5A	; 90
    2b9a:	f0 40       	sbci	r31, 0x00	; 0
    2b9c:	fa 87       	std	Y+10, r31	; 0x0a
    2b9e:	e9 87       	std	Y+9, r30	; 0x09
    2ba0:	82 a3       	std	Z+34, r24	; 0x22
    2ba2:	93 a3       	std	Z+35, r25	; 0x23
    2ba4:	a4 a3       	std	Z+36, r26	; 0x24
    2ba6:	b5 a3       	std	Z+37, r27	; 0x25
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    2ba8:	a8 01       	movw	r20, r16
    2baa:	97 01       	movw	r18, r14
    2bac:	62 e0       	ldi	r22, 0x02	; 2
    2bae:	22 0f       	add	r18, r18
    2bb0:	33 1f       	adc	r19, r19
    2bb2:	44 1f       	adc	r20, r20
    2bb4:	55 1f       	adc	r21, r21
    2bb6:	6a 95       	dec	r22
    2bb8:	d1 f7       	brne	.-12     	; 0x2bae <chk_mounted+0x328>
    2bba:	33 c0       	rjmp	.+102    	; 0x2c22 <chk_mounted+0x39c>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    2bbc:	23 2b       	or	r18, r19
    2bbe:	09 f4       	brne	.+2      	; 0x2bc2 <chk_mounted+0x33c>
    2bc0:	e3 c0       	rjmp	.+454    	; 0x2d88 <chk_mounted+0x502>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    2bc2:	29 81       	ldd	r18, Y+1	; 0x01
    2bc4:	3a 81       	ldd	r19, Y+2	; 0x02
    2bc6:	4b 81       	ldd	r20, Y+3	; 0x03
    2bc8:	5c 81       	ldd	r21, Y+4	; 0x04
    2bca:	82 0f       	add	r24, r18
    2bcc:	93 1f       	adc	r25, r19
    2bce:	a4 1f       	adc	r26, r20
    2bd0:	b5 1f       	adc	r27, r21
    2bd2:	e9 85       	ldd	r30, Y+9	; 0x09
    2bd4:	fa 85       	ldd	r31, Y+10	; 0x0a
    2bd6:	82 a3       	std	Z+34, r24	; 0x22
    2bd8:	93 a3       	std	Z+35, r25	; 0x23
    2bda:	a4 a3       	std	Z+36, r26	; 0x24
    2bdc:	b5 a3       	std	Z+37, r27	; 0x25
    2bde:	d8 01       	movw	r26, r16
    2be0:	c7 01       	movw	r24, r14
    2be2:	88 0f       	add	r24, r24
    2be4:	99 1f       	adc	r25, r25
    2be6:	aa 1f       	adc	r26, r26
    2be8:	bb 1f       	adc	r27, r27
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    2bea:	f2 e0       	ldi	r31, 0x02	; 2
    2bec:	9f 16       	cp	r9, r31
    2bee:	19 f4       	brne	.+6      	; 0x2bf6 <chk_mounted+0x370>
    2bf0:	9c 01       	movw	r18, r24
    2bf2:	ad 01       	movw	r20, r26
    2bf4:	16 c0       	rjmp	.+44     	; 0x2c22 <chk_mounted+0x39c>
    2bf6:	9c 01       	movw	r18, r24
    2bf8:	ad 01       	movw	r20, r26
    2bfa:	2e 0d       	add	r18, r14
    2bfc:	3f 1d       	adc	r19, r15
    2bfe:	40 1f       	adc	r20, r16
    2c00:	51 1f       	adc	r21, r17
    2c02:	56 95       	lsr	r21
    2c04:	47 95       	ror	r20
    2c06:	37 95       	ror	r19
    2c08:	27 95       	ror	r18
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	a0 e0       	ldi	r26, 0x00	; 0
    2c10:	b0 e0       	ldi	r27, 0x00	; 0
    2c12:	e8 22       	and	r14, r24
    2c14:	f9 22       	and	r15, r25
    2c16:	0a 23       	and	r16, r26
    2c18:	1b 23       	and	r17, r27
    2c1a:	2e 0d       	add	r18, r14
    2c1c:	3f 1d       	adc	r19, r15
    2c1e:	40 1f       	adc	r20, r16
    2c20:	51 1f       	adc	r21, r17
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (FAT size must not be less than FAT sectors */
    2c22:	21 50       	subi	r18, 0x01	; 1
    2c24:	3e 4f       	sbci	r19, 0xFE	; 254
    2c26:	4f 4f       	sbci	r20, 0xFF	; 255
    2c28:	5f 4f       	sbci	r21, 0xFF	; 255
    2c2a:	89 e0       	ldi	r24, 0x09	; 9
    2c2c:	56 95       	lsr	r21
    2c2e:	47 95       	ror	r20
    2c30:	37 95       	ror	r19
    2c32:	27 95       	ror	r18
    2c34:	8a 95       	dec	r24
    2c36:	d1 f7       	brne	.-12     	; 0x2c2c <chk_mounted+0x3a6>
    2c38:	e9 85       	ldd	r30, Y+9	; 0x09
    2c3a:	fa 85       	ldd	r31, Y+10	; 0x0a
    2c3c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c3e:	93 8d       	ldd	r25, Z+27	; 0x1b
    2c40:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2c42:	b5 8d       	ldd	r27, Z+29	; 0x1d
    2c44:	82 17       	cp	r24, r18
    2c46:	93 07       	cpc	r25, r19
    2c48:	a4 07       	cpc	r26, r20
    2c4a:	b5 07       	cpc	r27, r21
    2c4c:	08 f4       	brcc	.+2      	; 0x2c50 <chk_mounted+0x3ca>
    2c4e:	9c c0       	rjmp	.+312    	; 0x2d88 <chk_mounted+0x502>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    2c50:	8f ef       	ldi	r24, 0xFF	; 255
    2c52:	9f ef       	ldi	r25, 0xFF	; 255
    2c54:	af ef       	ldi	r26, 0xFF	; 255
    2c56:	bf ef       	ldi	r27, 0xFF	; 255
    2c58:	86 87       	std	Z+14, r24	; 0x0e
    2c5a:	97 87       	std	Z+15, r25	; 0x0f
    2c5c:	a0 8b       	std	Z+16, r26	; 0x10
    2c5e:	b1 8b       	std	Z+17, r27	; 0x11
	fs->last_clust = 0;
    2c60:	a9 85       	ldd	r26, Y+9	; 0x09
    2c62:	ba 85       	ldd	r27, Y+10	; 0x0a
    2c64:	1a 96       	adiw	r26, 0x0a	; 10
    2c66:	1d 92       	st	X+, r1
    2c68:	1d 92       	st	X+, r1
    2c6a:	1d 92       	st	X+, r1
    2c6c:	1c 92       	st	X, r1
    2c6e:	1d 97       	sbiw	r26, 0x0d	; 13

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    2c70:	b3 e0       	ldi	r27, 0x03	; 3
    2c72:	9b 16       	cp	r9, r27
    2c74:	09 f0       	breq	.+2      	; 0x2c78 <chk_mounted+0x3f2>
    2c76:	6c c0       	rjmp	.+216    	; 0x2d50 <chk_mounted+0x4ca>
	 	fs->fsi_flag = 0;
    2c78:	e9 85       	ldd	r30, Y+9	; 0x09
    2c7a:	fa 85       	ldd	r31, Y+10	; 0x0a
    2c7c:	15 82       	std	Z+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    2c7e:	e2 5a       	subi	r30, 0xA2	; 162
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	20 81       	ld	r18, Z
    2c84:	31 81       	ldd	r19, Z+1	; 0x01
    2c86:	ee 55       	subi	r30, 0x5E	; 94
    2c88:	f0 40       	sbci	r31, 0x00	; 0
    2c8a:	fa 87       	std	Y+10, r31	; 0x0a
    2c8c:	e9 87       	std	Y+9, r30	; 0x09
    2c8e:	40 e0       	ldi	r20, 0x00	; 0
    2c90:	50 e0       	ldi	r21, 0x00	; 0
    2c92:	22 0d       	add	r18, r2
    2c94:	33 1d       	adc	r19, r3
    2c96:	44 1d       	adc	r20, r4
    2c98:	55 1d       	adc	r21, r5
    2c9a:	22 8b       	std	Z+18, r18	; 0x12
    2c9c:	33 8b       	std	Z+19, r19	; 0x13
    2c9e:	44 8b       	std	Z+20, r20	; 0x14
    2ca0:	55 8b       	std	Z+21, r21	; 0x15
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    2ca2:	bf 01       	movw	r22, r30
    2ca4:	62 5d       	subi	r22, 0xD2	; 210
    2ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca8:	81 81       	ldd	r24, Z+1	; 0x01
    2caa:	01 e0       	ldi	r16, 0x01	; 1
    2cac:	fe dc       	rcall	.-1540   	; 0x26aa <disk_read>
    2cae:	88 23       	and	r24, r24
    2cb0:	09 f0       	breq	.+2      	; 0x2cb4 <chk_mounted+0x42e>
    2cb2:	4e c0       	rjmp	.+156    	; 0x2d50 <chk_mounted+0x4ca>
    2cb4:	e9 85       	ldd	r30, Y+9	; 0x09
    2cb6:	fa 85       	ldd	r31, Y+10	; 0x0a
    2cb8:	e4 5d       	subi	r30, 0xD4	; 212
    2cba:	fd 4f       	sbci	r31, 0xFD	; 253
    2cbc:	80 81       	ld	r24, Z
    2cbe:	91 81       	ldd	r25, Z+1	; 0x01
    2cc0:	ec 52       	subi	r30, 0x2C	; 44
    2cc2:	f2 40       	sbci	r31, 0x02	; 2
    2cc4:	fa 87       	std	Y+10, r31	; 0x0a
    2cc6:	e9 87       	std	Y+9, r30	; 0x09
    2cc8:	85 55       	subi	r24, 0x55	; 85
    2cca:	9a 4a       	sbci	r25, 0xAA	; 170
    2ccc:	09 f0       	breq	.+2      	; 0x2cd0 <chk_mounted+0x44a>
    2cce:	40 c0       	rjmp	.+128    	; 0x2d50 <chk_mounted+0x4ca>
    2cd0:	e9 85       	ldd	r30, Y+9	; 0x09
    2cd2:	fa 85       	ldd	r31, Y+10	; 0x0a
    2cd4:	86 a5       	ldd	r24, Z+46	; 0x2e
    2cd6:	97 a5       	ldd	r25, Z+47	; 0x2f
    2cd8:	a0 a9       	ldd	r26, Z+48	; 0x30
    2cda:	b1 a9       	ldd	r27, Z+49	; 0x31
    2cdc:	82 55       	subi	r24, 0x52	; 82
    2cde:	92 45       	sbci	r25, 0x52	; 82
    2ce0:	a1 46       	sbci	r26, 0x61	; 97
    2ce2:	b1 44       	sbci	r27, 0x41	; 65
    2ce4:	a9 f5       	brne	.+106    	; 0x2d50 <chk_mounted+0x4ca>
    2ce6:	29 85       	ldd	r18, Y+9	; 0x09
    2ce8:	3a 85       	ldd	r19, Y+10	; 0x0a
    2cea:	2e 5e       	subi	r18, 0xEE	; 238
    2cec:	3d 4f       	sbci	r19, 0xFD	; 253
    2cee:	3a 87       	std	Y+10, r19	; 0x0a
    2cf0:	29 87       	std	Y+9, r18	; 0x09
    2cf2:	f9 01       	movw	r30, r18
    2cf4:	80 81       	ld	r24, Z
    2cf6:	91 81       	ldd	r25, Z+1	; 0x01
    2cf8:	a2 81       	ldd	r26, Z+2	; 0x02
    2cfa:	b3 81       	ldd	r27, Z+3	; 0x03
    2cfc:	e2 51       	subi	r30, 0x12	; 18
    2cfe:	f2 40       	sbci	r31, 0x02	; 2
    2d00:	fa 87       	std	Y+10, r31	; 0x0a
    2d02:	e9 87       	std	Y+9, r30	; 0x09
    2d04:	82 57       	subi	r24, 0x72	; 114
    2d06:	92 47       	sbci	r25, 0x72	; 114
    2d08:	a1 44       	sbci	r26, 0x41	; 65
    2d0a:	b1 46       	sbci	r27, 0x61	; 97
    2d0c:	09 f5       	brne	.+66     	; 0x2d50 <chk_mounted+0x4ca>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    2d0e:	29 85       	ldd	r18, Y+9	; 0x09
    2d10:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d12:	26 5e       	subi	r18, 0xE6	; 230
    2d14:	3d 4f       	sbci	r19, 0xFD	; 253
    2d16:	3a 87       	std	Y+10, r19	; 0x0a
    2d18:	29 87       	std	Y+9, r18	; 0x09
    2d1a:	f9 01       	movw	r30, r18
    2d1c:	80 81       	ld	r24, Z
    2d1e:	91 81       	ldd	r25, Z+1	; 0x01
    2d20:	a2 81       	ldd	r26, Z+2	; 0x02
    2d22:	b3 81       	ldd	r27, Z+3	; 0x03
    2d24:	ea 51       	subi	r30, 0x1A	; 26
    2d26:	f2 40       	sbci	r31, 0x02	; 2
    2d28:	fa 87       	std	Y+10, r31	; 0x0a
    2d2a:	e9 87       	std	Y+9, r30	; 0x09
    2d2c:	82 87       	std	Z+10, r24	; 0x0a
    2d2e:	93 87       	std	Z+11, r25	; 0x0b
    2d30:	a4 87       	std	Z+12, r26	; 0x0c
    2d32:	b5 87       	std	Z+13, r27	; 0x0d
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    2d34:	ea 5e       	subi	r30, 0xEA	; 234
    2d36:	fd 4f       	sbci	r31, 0xFD	; 253
    2d38:	80 81       	ld	r24, Z
    2d3a:	91 81       	ldd	r25, Z+1	; 0x01
    2d3c:	a2 81       	ldd	r26, Z+2	; 0x02
    2d3e:	b3 81       	ldd	r27, Z+3	; 0x03
    2d40:	e6 51       	subi	r30, 0x16	; 22
    2d42:	f2 40       	sbci	r31, 0x02	; 2
    2d44:	fa 87       	std	Y+10, r31	; 0x0a
    2d46:	e9 87       	std	Y+9, r30	; 0x09
    2d48:	86 87       	std	Z+14, r24	; 0x0e
    2d4a:	97 87       	std	Z+15, r25	; 0x0f
    2d4c:	a0 8b       	std	Z+16, r26	; 0x10
    2d4e:	b1 8b       	std	Z+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    2d50:	a9 85       	ldd	r26, Y+9	; 0x09
    2d52:	ba 85       	ldd	r27, Y+10	; 0x0a
    2d54:	9c 92       	st	X, r9
	fs->id = ++Fsid;		/* File system mount ID */
    2d56:	80 91 a6 03 	lds	r24, 0x03A6
    2d5a:	90 91 a7 03 	lds	r25, 0x03A7
    2d5e:	01 96       	adiw	r24, 0x01	; 1
    2d60:	90 93 a7 03 	sts	0x03A7, r25
    2d64:	80 93 a6 03 	sts	0x03A6, r24
    2d68:	17 96       	adiw	r26, 0x07	; 7
    2d6a:	9c 93       	st	X, r25
    2d6c:	8e 93       	st	-X, r24
    2d6e:	16 97       	sbiw	r26, 0x06	; 6
	fs->winsect = 0;		/* Invalidate sector cache */
    2d70:	e9 85       	ldd	r30, Y+9	; 0x09
    2d72:	fa 85       	ldd	r31, Y+10	; 0x0a
    2d74:	12 a6       	std	Z+42, r1	; 0x2a
    2d76:	13 a6       	std	Z+43, r1	; 0x2b
    2d78:	14 a6       	std	Z+44, r1	; 0x2c
    2d7a:	15 a6       	std	Z+45, r1	; 0x2d
	fs->wflag = 0;
    2d7c:	14 82       	std	Z+4, r1	; 0x04
    2d7e:	02 c0       	rjmp	.+4      	; 0x2d84 <chk_mounted+0x4fe>
#if _FS_SHARE				/* Clear file lock semaphores */
	for (vol = 0; vol < _FS_SHARE; vol++)
		fs->flsem[vol].ctr = 0;
#endif

	return FR_OK;
    2d80:	8a e0       	ldi	r24, 0x0A	; 10
    2d82:	03 c0       	rjmp	.+6      	; 0x2d8a <chk_mounted+0x504>
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	01 c0       	rjmp	.+2      	; 0x2d8a <chk_mounted+0x504>
    2d88:	8d e0       	ldi	r24, 0x0D	; 13
}
    2d8a:	2a 96       	adiw	r28, 0x0a	; 10
    2d8c:	0f b6       	in	r0, 0x3f	; 63
    2d8e:	f8 94       	cli
    2d90:	de bf       	out	0x3e, r29	; 62
    2d92:	0f be       	out	0x3f, r0	; 63
    2d94:	cd bf       	out	0x3d, r28	; 61
    2d96:	cf 91       	pop	r28
    2d98:	df 91       	pop	r29
    2d9a:	1f 91       	pop	r17
    2d9c:	0f 91       	pop	r16
    2d9e:	ff 90       	pop	r15
    2da0:	ef 90       	pop	r14
    2da2:	df 90       	pop	r13
    2da4:	cf 90       	pop	r12
    2da6:	bf 90       	pop	r11
    2da8:	af 90       	pop	r10
    2daa:	9f 90       	pop	r9
    2dac:	8f 90       	pop	r8
    2dae:	7f 90       	pop	r7
    2db0:	6f 90       	pop	r6
    2db2:	5f 90       	pop	r5
    2db4:	4f 90       	pop	r4
    2db6:	3f 90       	pop	r3
    2db8:	2f 90       	pop	r2
    2dba:	08 95       	ret

00002dbc <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    2dbc:	6f 92       	push	r6
    2dbe:	7f 92       	push	r7
    2dc0:	8f 92       	push	r8
    2dc2:	9f 92       	push	r9
    2dc4:	af 92       	push	r10
    2dc6:	bf 92       	push	r11
    2dc8:	cf 92       	push	r12
    2dca:	df 92       	push	r13
    2dcc:	ef 92       	push	r14
    2dce:	ff 92       	push	r15
    2dd0:	0f 93       	push	r16
    2dd2:	1f 93       	push	r17
    2dd4:	cf 93       	push	r28
    2dd6:	df 93       	push	r29
    2dd8:	ec 01       	movw	r28, r24
    2dda:	4a 01       	movw	r8, r20
    2ddc:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    2dde:	ca a4       	ldd	r12, Y+42	; 0x2a
    2de0:	db a4       	ldd	r13, Y+43	; 0x2b
    2de2:	ec a4       	ldd	r14, Y+44	; 0x2c
    2de4:	fd a4       	ldd	r15, Y+45	; 0x2d
	if (wsect != sector) {	/* Changed current window */
    2de6:	c4 16       	cp	r12, r20
    2de8:	d5 06       	cpc	r13, r21
    2dea:	e6 06       	cpc	r14, r22
    2dec:	f7 06       	cpc	r15, r23
    2dee:	09 f4       	brne	.+2      	; 0x2df2 <move_window+0x36>
    2df0:	4b c0       	rjmp	.+150    	; 0x2e88 <move_window+0xcc>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    2df2:	8c 81       	ldd	r24, Y+4	; 0x04
    2df4:	88 23       	and	r24, r24
    2df6:	91 f1       	breq	.+100    	; 0x2e5c <move_window+0xa0>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    2df8:	be e2       	ldi	r27, 0x2E	; 46
    2dfa:	6b 2e       	mov	r6, r27
    2dfc:	71 2c       	mov	r7, r1
    2dfe:	6c 0e       	add	r6, r28
    2e00:	7d 1e       	adc	r7, r29
    2e02:	89 81       	ldd	r24, Y+1	; 0x01
    2e04:	b3 01       	movw	r22, r6
    2e06:	a7 01       	movw	r20, r14
    2e08:	96 01       	movw	r18, r12
    2e0a:	01 e0       	ldi	r16, 0x01	; 1
    2e0c:	42 dc       	rcall	.-1916   	; 0x2692 <disk_write>
    2e0e:	88 23       	and	r24, r24
    2e10:	c9 f5       	brne	.+114    	; 0x2e84 <move_window+0xc8>
				return FR_DISK_ERR;
			fs->wflag = 0;
    2e12:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    2e14:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e16:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e18:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2e1a:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2e1c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2e1e:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2e20:	48 a1       	ldd	r20, Y+32	; 0x20
    2e22:	59 a1       	ldd	r21, Y+33	; 0x21
    2e24:	82 0f       	add	r24, r18
    2e26:	93 1f       	adc	r25, r19
    2e28:	a4 1f       	adc	r26, r20
    2e2a:	b5 1f       	adc	r27, r21
    2e2c:	c8 16       	cp	r12, r24
    2e2e:	d9 06       	cpc	r13, r25
    2e30:	ea 06       	cpc	r14, r26
    2e32:	fb 06       	cpc	r15, r27
    2e34:	98 f4       	brcc	.+38     	; 0x2e5c <move_window+0xa0>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    2e36:	1b 81       	ldd	r17, Y+3	; 0x03
    2e38:	0f c0       	rjmp	.+30     	; 0x2e58 <move_window+0x9c>
					wsect += fs->fsize;
    2e3a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e3c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e3e:	ac 8d       	ldd	r26, Y+28	; 0x1c
    2e40:	bd 8d       	ldd	r27, Y+29	; 0x1d
    2e42:	c8 0e       	add	r12, r24
    2e44:	d9 1e       	adc	r13, r25
    2e46:	ea 1e       	adc	r14, r26
    2e48:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
    2e4a:	89 81       	ldd	r24, Y+1	; 0x01
    2e4c:	b3 01       	movw	r22, r6
    2e4e:	a7 01       	movw	r20, r14
    2e50:	96 01       	movw	r18, r12
    2e52:	01 e0       	ldi	r16, 0x01	; 1
    2e54:	1e dc       	rcall	.-1988   	; 0x2692 <disk_write>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    2e56:	11 50       	subi	r17, 0x01	; 1
    2e58:	12 30       	cpi	r17, 0x02	; 2
    2e5a:	78 f7       	brcc	.-34     	; 0x2e3a <move_window+0x7e>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    2e5c:	81 14       	cp	r8, r1
    2e5e:	91 04       	cpc	r9, r1
    2e60:	a1 04       	cpc	r10, r1
    2e62:	b1 04       	cpc	r11, r1
    2e64:	89 f0       	breq	.+34     	; 0x2e88 <move_window+0xcc>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    2e66:	be 01       	movw	r22, r28
    2e68:	62 5d       	subi	r22, 0xD2	; 210
    2e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e6c:	89 81       	ldd	r24, Y+1	; 0x01
    2e6e:	a5 01       	movw	r20, r10
    2e70:	94 01       	movw	r18, r8
    2e72:	01 e0       	ldi	r16, 0x01	; 1
    2e74:	1a dc       	rcall	.-1996   	; 0x26aa <disk_read>
    2e76:	88 23       	and	r24, r24
    2e78:	29 f4       	brne	.+10     	; 0x2e84 <move_window+0xc8>
				return FR_DISK_ERR;
			fs->winsect = sector;
    2e7a:	8a a6       	std	Y+42, r8	; 0x2a
    2e7c:	9b a6       	std	Y+43, r9	; 0x2b
    2e7e:	ac a6       	std	Y+44, r10	; 0x2c
    2e80:	bd a6       	std	Y+45, r11	; 0x2d
    2e82:	03 c0       	rjmp	.+6      	; 0x2e8a <move_window+0xce>
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	01 c0       	rjmp	.+2      	; 0x2e8a <move_window+0xce>
    2e88:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return FR_OK;
}
    2e8a:	df 91       	pop	r29
    2e8c:	cf 91       	pop	r28
    2e8e:	1f 91       	pop	r17
    2e90:	0f 91       	pop	r16
    2e92:	ff 90       	pop	r15
    2e94:	ef 90       	pop	r14
    2e96:	df 90       	pop	r13
    2e98:	cf 90       	pop	r12
    2e9a:	bf 90       	pop	r11
    2e9c:	af 90       	pop	r10
    2e9e:	9f 90       	pop	r9
    2ea0:	8f 90       	pop	r8
    2ea2:	7f 90       	pop	r7
    2ea4:	6f 90       	pop	r6
    2ea6:	08 95       	ret

00002ea8 <put_fat>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    2ea8:	8f 92       	push	r8
    2eaa:	9f 92       	push	r9
    2eac:	af 92       	push	r10
    2eae:	bf 92       	push	r11
    2eb0:	cf 92       	push	r12
    2eb2:	df 92       	push	r13
    2eb4:	ef 92       	push	r14
    2eb6:	ff 92       	push	r15
    2eb8:	0f 93       	push	r16
    2eba:	1f 93       	push	r17
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	ec 01       	movw	r28, r24
    2ec2:	6a 01       	movw	r12, r20
    2ec4:	7b 01       	movw	r14, r22
    2ec6:	48 01       	movw	r8, r16
    2ec8:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    2eca:	42 30       	cpi	r20, 0x02	; 2
    2ecc:	51 05       	cpc	r21, r1
    2ece:	61 05       	cpc	r22, r1
    2ed0:	71 05       	cpc	r23, r1
    2ed2:	08 f4       	brcc	.+2      	; 0x2ed6 <put_fat+0x2e>
    2ed4:	cd c0       	rjmp	.+410    	; 0x3070 <put_fat+0x1c8>
    2ed6:	8e 89       	ldd	r24, Y+22	; 0x16
    2ed8:	9f 89       	ldd	r25, Y+23	; 0x17
    2eda:	a8 8d       	ldd	r26, Y+24	; 0x18
    2edc:	b9 8d       	ldd	r27, Y+25	; 0x19
    2ede:	48 17       	cp	r20, r24
    2ee0:	59 07       	cpc	r21, r25
    2ee2:	6a 07       	cpc	r22, r26
    2ee4:	7b 07       	cpc	r23, r27
    2ee6:	08 f0       	brcs	.+2      	; 0x2eea <put_fat+0x42>
    2ee8:	c3 c0       	rjmp	.+390    	; 0x3070 <put_fat+0x1c8>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
    2eea:	88 81       	ld	r24, Y
    2eec:	82 30       	cpi	r24, 0x02	; 2
    2eee:	09 f4       	brne	.+2      	; 0x2ef2 <put_fat+0x4a>
    2ef0:	6e c0       	rjmp	.+220    	; 0x2fce <put_fat+0x126>
    2ef2:	83 30       	cpi	r24, 0x03	; 3
    2ef4:	09 f4       	brne	.+2      	; 0x2ef8 <put_fat+0x50>
    2ef6:	89 c0       	rjmp	.+274    	; 0x300a <put_fat+0x162>
    2ef8:	81 30       	cpi	r24, 0x01	; 1
    2efa:	11 f0       	breq	.+4      	; 0x2f00 <put_fat+0x58>
    2efc:	22 e0       	ldi	r18, 0x02	; 2
    2efe:	b5 c0       	rjmp	.+362    	; 0x306a <put_fat+0x1c2>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    2f00:	8a 01       	movw	r16, r20
    2f02:	16 95       	lsr	r17
    2f04:	07 95       	ror	r16
    2f06:	04 0f       	add	r16, r20
    2f08:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2f0a:	a8 01       	movw	r20, r16
    2f0c:	45 2f       	mov	r20, r21
    2f0e:	55 27       	eor	r21, r21
    2f10:	46 95       	lsr	r20
    2f12:	60 e0       	ldi	r22, 0x00	; 0
    2f14:	70 e0       	ldi	r23, 0x00	; 0
    2f16:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f18:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f1a:	a8 a1       	ldd	r26, Y+32	; 0x20
    2f1c:	b9 a1       	ldd	r27, Y+33	; 0x21
    2f1e:	48 0f       	add	r20, r24
    2f20:	59 1f       	adc	r21, r25
    2f22:	6a 1f       	adc	r22, r26
    2f24:	7b 1f       	adc	r23, r27
    2f26:	ce 01       	movw	r24, r28
    2f28:	49 df       	rcall	.-366    	; 0x2dbc <move_window>
    2f2a:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    2f2c:	88 23       	and	r24, r24
    2f2e:	09 f0       	breq	.+2      	; 0x2f32 <put_fat+0x8a>
    2f30:	9c c0       	rjmp	.+312    	; 0x306a <put_fat+0x1c2>
			p = &fs->win[bc % SS(fs)];
    2f32:	d8 01       	movw	r26, r16
    2f34:	b1 70       	andi	r27, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    2f36:	e1 e0       	ldi	r30, 0x01	; 1
    2f38:	ee 2e       	mov	r14, r30
    2f3a:	f1 2c       	mov	r15, r1
    2f3c:	ec 20       	and	r14, r12
    2f3e:	fd 20       	and	r15, r13
    2f40:	e1 14       	cp	r14, r1
    2f42:	f1 04       	cpc	r15, r1
    2f44:	51 f0       	breq	.+20     	; 0x2f5a <put_fat+0xb2>
    2f46:	fe 01       	movw	r30, r28
    2f48:	ea 0f       	add	r30, r26
    2f4a:	fb 1f       	adc	r31, r27
    2f4c:	86 a5       	ldd	r24, Z+46	; 0x2e
    2f4e:	8f 70       	andi	r24, 0x0F	; 15
    2f50:	98 2d       	mov	r25, r8
    2f52:	92 95       	swap	r25
    2f54:	90 7f       	andi	r25, 0xF0	; 240
    2f56:	98 2b       	or	r25, r24
    2f58:	01 c0       	rjmp	.+2      	; 0x2f5c <put_fat+0xb4>
    2f5a:	98 2d       	mov	r25, r8
    2f5c:	ac 0f       	add	r26, r28
    2f5e:	bd 1f       	adc	r27, r29
    2f60:	9e 96       	adiw	r26, 0x2e	; 46
    2f62:	9c 93       	st	X, r25
			bc++;
    2f64:	0f 5f       	subi	r16, 0xFF	; 255
    2f66:	1f 4f       	sbci	r17, 0xFF	; 255
			fs->wflag = 1;
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2f6c:	a8 01       	movw	r20, r16
    2f6e:	45 2f       	mov	r20, r21
    2f70:	55 27       	eor	r21, r21
    2f72:	46 95       	lsr	r20
    2f74:	60 e0       	ldi	r22, 0x00	; 0
    2f76:	70 e0       	ldi	r23, 0x00	; 0
    2f78:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f7a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2f7c:	a8 a1       	ldd	r26, Y+32	; 0x20
    2f7e:	b9 a1       	ldd	r27, Y+33	; 0x21
    2f80:	48 0f       	add	r20, r24
    2f82:	59 1f       	adc	r21, r25
    2f84:	6a 1f       	adc	r22, r26
    2f86:	7b 1f       	adc	r23, r27
    2f88:	ce 01       	movw	r24, r28
    2f8a:	18 df       	rcall	.-464    	; 0x2dbc <move_window>
    2f8c:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    2f8e:	88 23       	and	r24, r24
    2f90:	09 f0       	breq	.+2      	; 0x2f94 <put_fat+0xec>
    2f92:	6b c0       	rjmp	.+214    	; 0x306a <put_fat+0x1c2>
			p = &fs->win[bc % SS(fs)];
    2f94:	a8 01       	movw	r20, r16
    2f96:	51 70       	andi	r21, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    2f98:	ef 28       	or	r14, r15
    2f9a:	49 f0       	breq	.+18     	; 0x2fae <put_fat+0x106>
    2f9c:	64 e0       	ldi	r22, 0x04	; 4
    2f9e:	b6 94       	lsr	r11
    2fa0:	a7 94       	ror	r10
    2fa2:	97 94       	ror	r9
    2fa4:	87 94       	ror	r8
    2fa6:	6a 95       	dec	r22
    2fa8:	d1 f7       	brne	.-12     	; 0x2f9e <put_fat+0xf6>
    2faa:	68 2d       	mov	r22, r8
    2fac:	0b c0       	rjmp	.+22     	; 0x2fc4 <put_fat+0x11c>
    2fae:	fe 01       	movw	r30, r28
    2fb0:	e4 0f       	add	r30, r20
    2fb2:	f5 1f       	adc	r31, r21
    2fb4:	66 a5       	ldd	r22, Z+46	; 0x2e
    2fb6:	60 7f       	andi	r22, 0xF0	; 240
    2fb8:	bb 27       	eor	r27, r27
    2fba:	ab 2d       	mov	r26, r11
    2fbc:	9a 2d       	mov	r25, r10
    2fbe:	89 2d       	mov	r24, r9
    2fc0:	8f 70       	andi	r24, 0x0F	; 15
    2fc2:	68 2b       	or	r22, r24
    2fc4:	4c 0f       	add	r20, r28
    2fc6:	5d 1f       	adc	r21, r29
    2fc8:	fa 01       	movw	r30, r20
    2fca:	66 a7       	std	Z+46, r22	; 0x2e
    2fcc:	4e c0       	rjmp	.+156    	; 0x306a <put_fat+0x1c2>
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    2fce:	45 2f       	mov	r20, r21
    2fd0:	56 2f       	mov	r21, r22
    2fd2:	67 2f       	mov	r22, r23
    2fd4:	77 27       	eor	r23, r23
    2fd6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2fd8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2fda:	a8 a1       	ldd	r26, Y+32	; 0x20
    2fdc:	b9 a1       	ldd	r27, Y+33	; 0x21
    2fde:	48 0f       	add	r20, r24
    2fe0:	59 1f       	adc	r21, r25
    2fe2:	6a 1f       	adc	r22, r26
    2fe4:	7b 1f       	adc	r23, r27
    2fe6:	ce 01       	movw	r24, r28
    2fe8:	e9 de       	rcall	.-558    	; 0x2dbc <move_window>
    2fea:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    2fec:	88 23       	and	r24, r24
    2fee:	09 f0       	breq	.+2      	; 0x2ff2 <put_fat+0x14a>
    2ff0:	3c c0       	rjmp	.+120    	; 0x306a <put_fat+0x1c2>
			p = &fs->win[clst * 2 % SS(fs)];
			ST_WORD(p, (WORD)val);
    2ff2:	cc 0c       	add	r12, r12
    2ff4:	dd 1c       	adc	r13, r13
    2ff6:	ee 1c       	adc	r14, r14
    2ff8:	ff 1c       	adc	r15, r15
    2ffa:	f6 01       	movw	r30, r12
    2ffc:	f1 70       	andi	r31, 0x01	; 1
    2ffe:	be 96       	adiw	r30, 0x2e	; 46
    3000:	ec 0f       	add	r30, r28
    3002:	fd 1f       	adc	r31, r29
    3004:	91 82       	std	Z+1, r9	; 0x01
    3006:	80 82       	st	Z, r8
    3008:	30 c0       	rjmp	.+96     	; 0x306a <put_fat+0x1c2>
			break;

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    300a:	07 e0       	ldi	r16, 0x07	; 7
    300c:	76 95       	lsr	r23
    300e:	67 95       	ror	r22
    3010:	57 95       	ror	r21
    3012:	47 95       	ror	r20
    3014:	0a 95       	dec	r16
    3016:	d1 f7       	brne	.-12     	; 0x300c <put_fat+0x164>
    3018:	8e 8d       	ldd	r24, Y+30	; 0x1e
    301a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    301c:	a8 a1       	ldd	r26, Y+32	; 0x20
    301e:	b9 a1       	ldd	r27, Y+33	; 0x21
    3020:	48 0f       	add	r20, r24
    3022:	59 1f       	adc	r21, r25
    3024:	6a 1f       	adc	r22, r26
    3026:	7b 1f       	adc	r23, r27
    3028:	ce 01       	movw	r24, r28
    302a:	c8 de       	rcall	.-624    	; 0x2dbc <move_window>
    302c:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    302e:	88 23       	and	r24, r24
    3030:	e1 f4       	brne	.+56     	; 0x306a <put_fat+0x1c2>
			p = &fs->win[clst * 4 % SS(fs)];
			val |= LD_DWORD(p) & 0xF0000000;
    3032:	12 e0       	ldi	r17, 0x02	; 2
    3034:	cc 0c       	add	r12, r12
    3036:	dd 1c       	adc	r13, r13
    3038:	ee 1c       	adc	r14, r14
    303a:	ff 1c       	adc	r15, r15
    303c:	1a 95       	dec	r17
    303e:	d1 f7       	brne	.-12     	; 0x3034 <put_fat+0x18c>
    3040:	f6 01       	movw	r30, r12
    3042:	f1 70       	andi	r31, 0x01	; 1
    3044:	be 96       	adiw	r30, 0x2e	; 46
    3046:	ec 0f       	add	r30, r28
    3048:	fd 1f       	adc	r31, r29
			ST_DWORD(p, val);
    304a:	80 81       	ld	r24, Z
    304c:	91 81       	ldd	r25, Z+1	; 0x01
    304e:	a2 81       	ldd	r26, Z+2	; 0x02
    3050:	b3 81       	ldd	r27, Z+3	; 0x03
    3052:	80 70       	andi	r24, 0x00	; 0
    3054:	90 70       	andi	r25, 0x00	; 0
    3056:	a0 70       	andi	r26, 0x00	; 0
    3058:	b0 7f       	andi	r27, 0xF0	; 240
    305a:	88 29       	or	r24, r8
    305c:	99 29       	or	r25, r9
    305e:	aa 29       	or	r26, r10
    3060:	bb 29       	or	r27, r11
    3062:	80 83       	st	Z, r24
    3064:	91 83       	std	Z+1, r25	; 0x01
    3066:	a2 83       	std	Z+2, r26	; 0x02
    3068:	b3 83       	std	Z+3, r27	; 0x03
			break;

		default :
			res = FR_INT_ERR;
		}
		fs->wflag = 1;
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	8c 83       	std	Y+4, r24	; 0x04
    306e:	01 c0       	rjmp	.+2      	; 0x3072 <put_fat+0x1ca>
    3070:	22 e0       	ldi	r18, 0x02	; 2
	}

	return res;
}
    3072:	82 2f       	mov	r24, r18
    3074:	df 91       	pop	r29
    3076:	cf 91       	pop	r28
    3078:	1f 91       	pop	r17
    307a:	0f 91       	pop	r16
    307c:	ff 90       	pop	r15
    307e:	ef 90       	pop	r14
    3080:	df 90       	pop	r13
    3082:	cf 90       	pop	r12
    3084:	bf 90       	pop	r11
    3086:	af 90       	pop	r10
    3088:	9f 90       	pop	r9
    308a:	8f 90       	pop	r8
    308c:	08 95       	ret

0000308e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    308e:	bf 92       	push	r11
    3090:	cf 92       	push	r12
    3092:	df 92       	push	r13
    3094:	ef 92       	push	r14
    3096:	ff 92       	push	r15
    3098:	0f 93       	push	r16
    309a:	1f 93       	push	r17
    309c:	cf 93       	push	r28
    309e:	df 93       	push	r29
    30a0:	6c 01       	movw	r12, r24
    30a2:	7a 01       	movw	r14, r20
    30a4:	8b 01       	movw	r16, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
    30a6:	42 30       	cpi	r20, 0x02	; 2
    30a8:	51 05       	cpc	r21, r1
    30aa:	61 05       	cpc	r22, r1
    30ac:	71 05       	cpc	r23, r1
    30ae:	08 f4       	brcc	.+2      	; 0x30b2 <get_fat+0x24>
    30b0:	a8 c0       	rjmp	.+336    	; 0x3202 <get_fat+0x174>
    30b2:	f6 01       	movw	r30, r12
    30b4:	86 89       	ldd	r24, Z+22	; 0x16
    30b6:	97 89       	ldd	r25, Z+23	; 0x17
    30b8:	a0 8d       	ldd	r26, Z+24	; 0x18
    30ba:	b1 8d       	ldd	r27, Z+25	; 0x19
    30bc:	48 17       	cp	r20, r24
    30be:	59 07       	cpc	r21, r25
    30c0:	6a 07       	cpc	r22, r26
    30c2:	7b 07       	cpc	r23, r27
    30c4:	08 f0       	brcs	.+2      	; 0x30c8 <get_fat+0x3a>
    30c6:	9d c0       	rjmp	.+314    	; 0x3202 <get_fat+0x174>
		return 1;

	switch (fs->fs_type) {
    30c8:	80 81       	ld	r24, Z
    30ca:	82 30       	cpi	r24, 0x02	; 2
    30cc:	09 f4       	brne	.+2      	; 0x30d0 <get_fat+0x42>
    30ce:	55 c0       	rjmp	.+170    	; 0x317a <get_fat+0xec>
    30d0:	83 30       	cpi	r24, 0x03	; 3
    30d2:	09 f4       	brne	.+2      	; 0x30d6 <get_fat+0x48>
    30d4:	71 c0       	rjmp	.+226    	; 0x31b8 <get_fat+0x12a>
    30d6:	81 30       	cpi	r24, 0x01	; 1
    30d8:	09 f0       	breq	.+2      	; 0x30dc <get_fat+0x4e>
    30da:	98 c0       	rjmp	.+304    	; 0x320c <get_fat+0x17e>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    30dc:	ea 01       	movw	r28, r20
    30de:	d6 95       	lsr	r29
    30e0:	c7 95       	ror	r28
    30e2:	c4 0f       	add	r28, r20
    30e4:	d5 1f       	adc	r29, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    30e6:	ae 01       	movw	r20, r28
    30e8:	45 2f       	mov	r20, r21
    30ea:	55 27       	eor	r21, r21
    30ec:	46 95       	lsr	r20
    30ee:	60 e0       	ldi	r22, 0x00	; 0
    30f0:	70 e0       	ldi	r23, 0x00	; 0
    30f2:	f6 01       	movw	r30, r12
    30f4:	86 8d       	ldd	r24, Z+30	; 0x1e
    30f6:	97 8d       	ldd	r25, Z+31	; 0x1f
    30f8:	a0 a1       	ldd	r26, Z+32	; 0x20
    30fa:	b1 a1       	ldd	r27, Z+33	; 0x21
    30fc:	48 0f       	add	r20, r24
    30fe:	59 1f       	adc	r21, r25
    3100:	6a 1f       	adc	r22, r26
    3102:	7b 1f       	adc	r23, r27
    3104:	c6 01       	movw	r24, r12
    3106:	5a de       	rcall	.-844    	; 0x2dbc <move_window>
    3108:	88 23       	and	r24, r24
    310a:	09 f0       	breq	.+2      	; 0x310e <get_fat+0x80>
    310c:	7f c0       	rjmp	.+254    	; 0x320c <get_fat+0x17e>
		wc = fs->win[bc % SS(fs)]; bc++;
    310e:	fe 01       	movw	r30, r28
    3110:	f1 70       	andi	r31, 0x01	; 1
    3112:	ec 0d       	add	r30, r12
    3114:	fd 1d       	adc	r31, r13
    3116:	b6 a4       	ldd	r11, Z+46	; 0x2e
    3118:	21 96       	adiw	r28, 0x01	; 1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    311a:	ae 01       	movw	r20, r28
    311c:	45 2f       	mov	r20, r21
    311e:	55 27       	eor	r21, r21
    3120:	46 95       	lsr	r20
    3122:	60 e0       	ldi	r22, 0x00	; 0
    3124:	70 e0       	ldi	r23, 0x00	; 0
    3126:	f6 01       	movw	r30, r12
    3128:	86 8d       	ldd	r24, Z+30	; 0x1e
    312a:	97 8d       	ldd	r25, Z+31	; 0x1f
    312c:	a0 a1       	ldd	r26, Z+32	; 0x20
    312e:	b1 a1       	ldd	r27, Z+33	; 0x21
    3130:	48 0f       	add	r20, r24
    3132:	59 1f       	adc	r21, r25
    3134:	6a 1f       	adc	r22, r26
    3136:	7b 1f       	adc	r23, r27
    3138:	c6 01       	movw	r24, r12
    313a:	40 de       	rcall	.-896    	; 0x2dbc <move_window>
    313c:	88 23       	and	r24, r24
    313e:	09 f0       	breq	.+2      	; 0x3142 <get_fat+0xb4>
    3140:	65 c0       	rjmp	.+202    	; 0x320c <get_fat+0x17e>

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
    3142:	6b 2d       	mov	r22, r11
    3144:	70 e0       	ldi	r23, 0x00	; 0
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
    3146:	d1 70       	andi	r29, 0x01	; 1
    3148:	cc 0d       	add	r28, r12
    314a:	dd 1d       	adc	r29, r13
    314c:	9e a5       	ldd	r25, Y+46	; 0x2e
    314e:	80 e0       	ldi	r24, 0x00	; 0
    3150:	68 2b       	or	r22, r24
    3152:	79 2b       	or	r23, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    3154:	c7 01       	movw	r24, r14
    3156:	81 70       	andi	r24, 0x01	; 1
    3158:	90 70       	andi	r25, 0x00	; 0
    315a:	89 2b       	or	r24, r25
    315c:	39 f0       	breq	.+14     	; 0x316c <get_fat+0xde>
    315e:	34 e0       	ldi	r19, 0x04	; 4
    3160:	76 95       	lsr	r23
    3162:	67 95       	ror	r22
    3164:	3a 95       	dec	r19
    3166:	e1 f7       	brne	.-8      	; 0x3160 <get_fat+0xd2>
    3168:	9b 01       	movw	r18, r22
    316a:	23 c0       	rjmp	.+70     	; 0x31b2 <get_fat+0x124>
    316c:	9b 01       	movw	r18, r22
    316e:	40 e0       	ldi	r20, 0x00	; 0
    3170:	50 e0       	ldi	r21, 0x00	; 0
    3172:	3f 70       	andi	r19, 0x0F	; 15
    3174:	40 70       	andi	r20, 0x00	; 0
    3176:	50 70       	andi	r21, 0x00	; 0
    3178:	4d c0       	rjmp	.+154    	; 0x3214 <get_fat+0x186>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    317a:	45 2f       	mov	r20, r21
    317c:	56 2f       	mov	r21, r22
    317e:	67 2f       	mov	r22, r23
    3180:	77 27       	eor	r23, r23
    3182:	f6 01       	movw	r30, r12
    3184:	86 8d       	ldd	r24, Z+30	; 0x1e
    3186:	97 8d       	ldd	r25, Z+31	; 0x1f
    3188:	a0 a1       	ldd	r26, Z+32	; 0x20
    318a:	b1 a1       	ldd	r27, Z+33	; 0x21
    318c:	48 0f       	add	r20, r24
    318e:	59 1f       	adc	r21, r25
    3190:	6a 1f       	adc	r22, r26
    3192:	7b 1f       	adc	r23, r27
    3194:	c6 01       	movw	r24, r12
    3196:	12 de       	rcall	.-988    	; 0x2dbc <move_window>
    3198:	88 23       	and	r24, r24
    319a:	c1 f5       	brne	.+112    	; 0x320c <get_fat+0x17e>
		p = &fs->win[clst * 2 % SS(fs)];
		return LD_WORD(p);
    319c:	ee 0c       	add	r14, r14
    319e:	ff 1c       	adc	r15, r15
    31a0:	00 1f       	adc	r16, r16
    31a2:	11 1f       	adc	r17, r17
    31a4:	f7 01       	movw	r30, r14
    31a6:	f1 70       	andi	r31, 0x01	; 1
    31a8:	ec 0d       	add	r30, r12
    31aa:	fd 1d       	adc	r31, r13
    31ac:	86 a5       	ldd	r24, Z+46	; 0x2e
    31ae:	97 a5       	ldd	r25, Z+47	; 0x2f
    31b0:	9c 01       	movw	r18, r24
    31b2:	40 e0       	ldi	r20, 0x00	; 0
    31b4:	50 e0       	ldi	r21, 0x00	; 0
    31b6:	2e c0       	rjmp	.+92     	; 0x3214 <get_fat+0x186>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    31b8:	87 e0       	ldi	r24, 0x07	; 7
    31ba:	76 95       	lsr	r23
    31bc:	67 95       	ror	r22
    31be:	57 95       	ror	r21
    31c0:	47 95       	ror	r20
    31c2:	8a 95       	dec	r24
    31c4:	d1 f7       	brne	.-12     	; 0x31ba <get_fat+0x12c>
    31c6:	f6 01       	movw	r30, r12
    31c8:	86 8d       	ldd	r24, Z+30	; 0x1e
    31ca:	97 8d       	ldd	r25, Z+31	; 0x1f
    31cc:	a0 a1       	ldd	r26, Z+32	; 0x20
    31ce:	b1 a1       	ldd	r27, Z+33	; 0x21
    31d0:	48 0f       	add	r20, r24
    31d2:	59 1f       	adc	r21, r25
    31d4:	6a 1f       	adc	r22, r26
    31d6:	7b 1f       	adc	r23, r27
    31d8:	c6 01       	movw	r24, r12
    31da:	f0 dd       	rcall	.-1056   	; 0x2dbc <move_window>
    31dc:	88 23       	and	r24, r24
    31de:	b1 f4       	brne	.+44     	; 0x320c <get_fat+0x17e>
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
    31e0:	b2 e0       	ldi	r27, 0x02	; 2
    31e2:	ee 0c       	add	r14, r14
    31e4:	ff 1c       	adc	r15, r15
    31e6:	00 1f       	adc	r16, r16
    31e8:	11 1f       	adc	r17, r17
    31ea:	ba 95       	dec	r27
    31ec:	d1 f7       	brne	.-12     	; 0x31e2 <get_fat+0x154>
    31ee:	f7 01       	movw	r30, r14
    31f0:	f1 70       	andi	r31, 0x01	; 1
    31f2:	ec 0d       	add	r30, r12
    31f4:	fd 1d       	adc	r31, r13
    31f6:	26 a5       	ldd	r18, Z+46	; 0x2e
    31f8:	37 a5       	ldd	r19, Z+47	; 0x2f
    31fa:	40 a9       	ldd	r20, Z+48	; 0x30
    31fc:	51 a9       	ldd	r21, Z+49	; 0x31
    31fe:	5f 70       	andi	r21, 0x0F	; 15
    3200:	09 c0       	rjmp	.+18     	; 0x3214 <get_fat+0x186>
    3202:	21 e0       	ldi	r18, 0x01	; 1
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	40 e0       	ldi	r20, 0x00	; 0
    3208:	50 e0       	ldi	r21, 0x00	; 0
    320a:	04 c0       	rjmp	.+8      	; 0x3214 <get_fat+0x186>
    320c:	2f ef       	ldi	r18, 0xFF	; 255
    320e:	3f ef       	ldi	r19, 0xFF	; 255
    3210:	4f ef       	ldi	r20, 0xFF	; 255
    3212:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
}
    3214:	b9 01       	movw	r22, r18
    3216:	ca 01       	movw	r24, r20
    3218:	df 91       	pop	r29
    321a:	cf 91       	pop	r28
    321c:	1f 91       	pop	r17
    321e:	0f 91       	pop	r16
    3220:	ff 90       	pop	r15
    3222:	ef 90       	pop	r14
    3224:	df 90       	pop	r13
    3226:	cf 90       	pop	r12
    3228:	bf 90       	pop	r11
    322a:	08 95       	ret

0000322c <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    322c:	ef 92       	push	r14
    322e:	ff 92       	push	r15
    3230:	0f 93       	push	r16
    3232:	1f 93       	push	r17
    3234:	cf 93       	push	r28
    3236:	df 93       	push	r29
    3238:	8c 01       	movw	r16, r24
    323a:	eb 01       	movw	r28, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    323c:	dc 01       	movw	r26, r24
    323e:	15 96       	adiw	r26, 0x05	; 5
    3240:	7c 93       	st	X, r23
    3242:	6e 93       	st	-X, r22
    3244:	14 97       	sbiw	r26, 0x04	; 4
	clst = dj->sclust;
    3246:	16 96       	adiw	r26, 0x06	; 6
    3248:	4d 91       	ld	r20, X+
    324a:	5d 91       	ld	r21, X+
    324c:	6d 91       	ld	r22, X+
    324e:	7c 91       	ld	r23, X
    3250:	19 97       	sbiw	r26, 0x09	; 9
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    3252:	41 30       	cpi	r20, 0x01	; 1
    3254:	51 05       	cpc	r21, r1
    3256:	61 05       	cpc	r22, r1
    3258:	71 05       	cpc	r23, r1
    325a:	09 f4       	brne	.+2      	; 0x325e <dir_sdi+0x32>
    325c:	9e c0       	rjmp	.+316    	; 0x339a <dir_sdi+0x16e>
    325e:	ed 91       	ld	r30, X+
    3260:	fc 91       	ld	r31, X
    3262:	86 89       	ldd	r24, Z+22	; 0x16
    3264:	97 89       	ldd	r25, Z+23	; 0x17
    3266:	a0 8d       	ldd	r26, Z+24	; 0x18
    3268:	b1 8d       	ldd	r27, Z+25	; 0x19
    326a:	48 17       	cp	r20, r24
    326c:	59 07       	cpc	r21, r25
    326e:	6a 07       	cpc	r22, r26
    3270:	7b 07       	cpc	r23, r27
    3272:	08 f0       	brcs	.+2      	; 0x3276 <dir_sdi+0x4a>
    3274:	92 c0       	rjmp	.+292    	; 0x339a <dir_sdi+0x16e>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    3276:	41 15       	cp	r20, r1
    3278:	51 05       	cpc	r21, r1
    327a:	61 05       	cpc	r22, r1
    327c:	71 05       	cpc	r23, r1
    327e:	81 f5       	brne	.+96     	; 0x32e0 <dir_sdi+0xb4>
    3280:	80 81       	ld	r24, Z
    3282:	83 30       	cpi	r24, 0x03	; 3
    3284:	49 f4       	brne	.+18     	; 0x3298 <dir_sdi+0x6c>
		clst = dj->fs->dirbase;
    3286:	42 a1       	ldd	r20, Z+34	; 0x22
    3288:	53 a1       	ldd	r21, Z+35	; 0x23
    328a:	64 a1       	ldd	r22, Z+36	; 0x24
    328c:	75 a1       	ldd	r23, Z+37	; 0x25

	if (clst == 0) {	/* Static table */
    328e:	41 15       	cp	r20, r1
    3290:	51 05       	cpc	r21, r1
    3292:	61 05       	cpc	r22, r1
    3294:	71 05       	cpc	r23, r1
    3296:	21 f5       	brne	.+72     	; 0x32e0 <dir_sdi+0xb4>
		dj->clust = clst;
    3298:	f8 01       	movw	r30, r16
    329a:	12 86       	std	Z+10, r1	; 0x0a
    329c:	13 86       	std	Z+11, r1	; 0x0b
    329e:	14 86       	std	Z+12, r1	; 0x0c
    32a0:	15 86       	std	Z+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    32a2:	01 90       	ld	r0, Z+
    32a4:	f0 81       	ld	r31, Z
    32a6:	e0 2d       	mov	r30, r0
    32a8:	80 85       	ldd	r24, Z+8	; 0x08
    32aa:	91 85       	ldd	r25, Z+9	; 0x09
    32ac:	c8 17       	cp	r28, r24
    32ae:	d9 07       	cpc	r29, r25
    32b0:	08 f0       	brcs	.+2      	; 0x32b4 <dir_sdi+0x88>
    32b2:	73 c0       	rjmp	.+230    	; 0x339a <dir_sdi+0x16e>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
    32b4:	ce 01       	movw	r24, r28
    32b6:	24 e0       	ldi	r18, 0x04	; 4
    32b8:	96 95       	lsr	r25
    32ba:	87 95       	ror	r24
    32bc:	2a 95       	dec	r18
    32be:	e1 f7       	brne	.-8      	; 0x32b8 <dir_sdi+0x8c>
    32c0:	a0 e0       	ldi	r26, 0x00	; 0
    32c2:	b0 e0       	ldi	r27, 0x00	; 0
    32c4:	22 a1       	ldd	r18, Z+34	; 0x22
    32c6:	33 a1       	ldd	r19, Z+35	; 0x23
    32c8:	44 a1       	ldd	r20, Z+36	; 0x24
    32ca:	55 a1       	ldd	r21, Z+37	; 0x25
    32cc:	82 0f       	add	r24, r18
    32ce:	93 1f       	adc	r25, r19
    32d0:	a4 1f       	adc	r26, r20
    32d2:	b5 1f       	adc	r27, r21
    32d4:	f8 01       	movw	r30, r16
    32d6:	86 87       	std	Z+14, r24	; 0x0e
    32d8:	97 87       	std	Z+15, r25	; 0x0f
    32da:	a0 8b       	std	Z+16, r26	; 0x10
    32dc:	b1 8b       	std	Z+17, r27	; 0x11
    32de:	49 c0       	rjmp	.+146    	; 0x3372 <dir_sdi+0x146>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
    32e0:	82 81       	ldd	r24, Z+2	; 0x02
    32e2:	e8 2e       	mov	r14, r24
    32e4:	ff 24       	eor	r15, r15
    32e6:	b4 e0       	ldi	r27, 0x04	; 4
    32e8:	ee 0c       	add	r14, r14
    32ea:	ff 1c       	adc	r15, r15
    32ec:	ba 95       	dec	r27
    32ee:	e1 f7       	brne	.-8      	; 0x32e8 <dir_sdi+0xbc>
    32f0:	21 c0       	rjmp	.+66     	; 0x3334 <dir_sdi+0x108>
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    32f2:	cd de       	rcall	.-614    	; 0x308e <get_fat>
    32f4:	ab 01       	movw	r20, r22
    32f6:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    32f8:	4f 3f       	cpi	r20, 0xFF	; 255
    32fa:	ff ef       	ldi	r31, 0xFF	; 255
    32fc:	5f 07       	cpc	r21, r31
    32fe:	ff ef       	ldi	r31, 0xFF	; 255
    3300:	6f 07       	cpc	r22, r31
    3302:	ff ef       	ldi	r31, 0xFF	; 255
    3304:	7f 07       	cpc	r23, r31
    3306:	11 f4       	brne	.+4      	; 0x330c <dir_sdi+0xe0>
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	48 c0       	rjmp	.+144    	; 0x339c <dir_sdi+0x170>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    330c:	42 30       	cpi	r20, 0x02	; 2
    330e:	51 05       	cpc	r21, r1
    3310:	61 05       	cpc	r22, r1
    3312:	71 05       	cpc	r23, r1
    3314:	08 f4       	brcc	.+2      	; 0x3318 <dir_sdi+0xec>
    3316:	41 c0       	rjmp	.+130    	; 0x339a <dir_sdi+0x16e>
    3318:	d8 01       	movw	r26, r16
    331a:	ed 91       	ld	r30, X+
    331c:	fc 91       	ld	r31, X
    331e:	86 89       	ldd	r24, Z+22	; 0x16
    3320:	97 89       	ldd	r25, Z+23	; 0x17
    3322:	a0 8d       	ldd	r26, Z+24	; 0x18
    3324:	b1 8d       	ldd	r27, Z+25	; 0x19
    3326:	48 17       	cp	r20, r24
    3328:	59 07       	cpc	r21, r25
    332a:	6a 07       	cpc	r22, r26
    332c:	7b 07       	cpc	r23, r27
    332e:	a8 f5       	brcc	.+106    	; 0x339a <dir_sdi+0x16e>
				return FR_INT_ERR;
			idx -= ic;
    3330:	ce 19       	sub	r28, r14
    3332:	df 09       	sbc	r29, r15
    3334:	f8 01       	movw	r30, r16
    3336:	80 81       	ld	r24, Z
    3338:	91 81       	ldd	r25, Z+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
    333a:	ce 15       	cp	r28, r14
    333c:	df 05       	cpc	r29, r15
    333e:	c8 f6       	brcc	.-78     	; 0x32f2 <dir_sdi+0xc6>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
    3340:	d8 01       	movw	r26, r16
    3342:	1a 96       	adiw	r26, 0x0a	; 10
    3344:	4d 93       	st	X+, r20
    3346:	5d 93       	st	X+, r21
    3348:	6d 93       	st	X+, r22
    334a:	7c 93       	st	X, r23
    334c:	1d 97       	sbiw	r26, 0x0d	; 13
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
    334e:	f6 d9       	rcall	.-3092   	; 0x273c <clust2sect>
    3350:	9e 01       	movw	r18, r28
    3352:	a4 e0       	ldi	r26, 0x04	; 4
    3354:	36 95       	lsr	r19
    3356:	27 95       	ror	r18
    3358:	aa 95       	dec	r26
    335a:	e1 f7       	brne	.-8      	; 0x3354 <dir_sdi+0x128>
    335c:	40 e0       	ldi	r20, 0x00	; 0
    335e:	50 e0       	ldi	r21, 0x00	; 0
    3360:	26 0f       	add	r18, r22
    3362:	37 1f       	adc	r19, r23
    3364:	48 1f       	adc	r20, r24
    3366:	59 1f       	adc	r21, r25
    3368:	f8 01       	movw	r30, r16
    336a:	26 87       	std	Z+14, r18	; 0x0e
    336c:	37 87       	std	Z+15, r19	; 0x0f
    336e:	40 8b       	std	Z+16, r20	; 0x10
    3370:	51 8b       	std	Z+17, r21	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
    3372:	cf 70       	andi	r28, 0x0F	; 15
    3374:	d0 70       	andi	r29, 0x00	; 0
    3376:	f5 e0       	ldi	r31, 0x05	; 5
    3378:	cc 0f       	add	r28, r28
    337a:	dd 1f       	adc	r29, r29
    337c:	fa 95       	dec	r31
    337e:	e1 f7       	brne	.-8      	; 0x3378 <dir_sdi+0x14c>
    3380:	ae 96       	adiw	r28, 0x2e	; 46
    3382:	d8 01       	movw	r26, r16
    3384:	8d 91       	ld	r24, X+
    3386:	9c 91       	ld	r25, X
    3388:	11 97       	sbiw	r26, 0x01	; 1
    338a:	8c 0f       	add	r24, r28
    338c:	9d 1f       	adc	r25, r29
    338e:	53 96       	adiw	r26, 0x13	; 19
    3390:	9c 93       	st	X, r25
    3392:	8e 93       	st	-X, r24
    3394:	52 97       	sbiw	r26, 0x12	; 18
    3396:	80 e0       	ldi	r24, 0x00	; 0
    3398:	01 c0       	rjmp	.+2      	; 0x339c <dir_sdi+0x170>

	return FR_OK;	/* Seek succeeded */
    339a:	82 e0       	ldi	r24, 0x02	; 2
}
    339c:	df 91       	pop	r29
    339e:	cf 91       	pop	r28
    33a0:	1f 91       	pop	r17
    33a2:	0f 91       	pop	r16
    33a4:	ff 90       	pop	r15
    33a6:	ef 90       	pop	r14
    33a8:	08 95       	ret

000033aa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    33aa:	4f 92       	push	r4
    33ac:	5f 92       	push	r5
    33ae:	6f 92       	push	r6
    33b0:	7f 92       	push	r7
    33b2:	8f 92       	push	r8
    33b4:	9f 92       	push	r9
    33b6:	af 92       	push	r10
    33b8:	bf 92       	push	r11
    33ba:	cf 92       	push	r12
    33bc:	df 92       	push	r13
    33be:	ef 92       	push	r14
    33c0:	ff 92       	push	r15
    33c2:	0f 93       	push	r16
    33c4:	1f 93       	push	r17
    33c6:	cf 93       	push	r28
    33c8:	df 93       	push	r29
    33ca:	ec 01       	movw	r28, r24
    33cc:	2a 01       	movw	r4, r20
    33ce:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl;


	if (clst == 0) {		/* Create a new chain */
    33d0:	41 15       	cp	r20, r1
    33d2:	51 05       	cpc	r21, r1
    33d4:	61 05       	cpc	r22, r1
    33d6:	71 05       	cpc	r23, r1
    33d8:	99 f4       	brne	.+38     	; 0x3400 <create_chain+0x56>
		scl = fs->last_clust;			/* Get suggested start point */
    33da:	8a 84       	ldd	r8, Y+10	; 0x0a
    33dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    33de:	ac 84       	ldd	r10, Y+12	; 0x0c
    33e0:	bd 84       	ldd	r11, Y+13	; 0x0d
		if (!scl || scl >= fs->n_fatent) scl = 1;
    33e2:	81 14       	cp	r8, r1
    33e4:	91 04       	cpc	r9, r1
    33e6:	a1 04       	cpc	r10, r1
    33e8:	b1 04       	cpc	r11, r1
    33ea:	21 f1       	breq	.+72     	; 0x3434 <create_chain+0x8a>
    33ec:	8e 89       	ldd	r24, Y+22	; 0x16
    33ee:	9f 89       	ldd	r25, Y+23	; 0x17
    33f0:	a8 8d       	ldd	r26, Y+24	; 0x18
    33f2:	b9 8d       	ldd	r27, Y+25	; 0x19
    33f4:	88 16       	cp	r8, r24
    33f6:	99 06       	cpc	r9, r25
    33f8:	aa 06       	cpc	r10, r26
    33fa:	bb 06       	cpc	r11, r27
    33fc:	d8 f4       	brcc	.+54     	; 0x3434 <create_chain+0x8a>
    33fe:	1f c0       	rjmp	.+62     	; 0x343e <create_chain+0x94>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    3400:	46 de       	rcall	.-884    	; 0x308e <get_fat>
    3402:	9b 01       	movw	r18, r22
    3404:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
    3406:	62 30       	cpi	r22, 0x02	; 2
    3408:	71 05       	cpc	r23, r1
    340a:	81 05       	cpc	r24, r1
    340c:	91 05       	cpc	r25, r1
    340e:	28 f4       	brcc	.+10     	; 0x341a <create_chain+0x70>
    3410:	21 e0       	ldi	r18, 0x01	; 1
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	40 e0       	ldi	r20, 0x00	; 0
    3416:	50 e0       	ldi	r21, 0x00	; 0
    3418:	8e c0       	rjmp	.+284    	; 0x3536 <create_chain+0x18c>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    341a:	8e 89       	ldd	r24, Y+22	; 0x16
    341c:	9f 89       	ldd	r25, Y+23	; 0x17
    341e:	a8 8d       	ldd	r26, Y+24	; 0x18
    3420:	b9 8d       	ldd	r27, Y+25	; 0x19
    3422:	28 17       	cp	r18, r24
    3424:	39 07       	cpc	r19, r25
    3426:	4a 07       	cpc	r20, r26
    3428:	5b 07       	cpc	r21, r27
    342a:	08 f4       	brcc	.+2      	; 0x342e <create_chain+0x84>
    342c:	84 c0       	rjmp	.+264    	; 0x3536 <create_chain+0x18c>
    342e:	53 01       	movw	r10, r6
    3430:	42 01       	movw	r8, r4
    3432:	05 c0       	rjmp	.+10     	; 0x343e <create_chain+0x94>
    3434:	41 e0       	ldi	r20, 0x01	; 1
    3436:	84 2e       	mov	r8, r20
    3438:	91 2c       	mov	r9, r1
    343a:	a1 2c       	mov	r10, r1
    343c:	b1 2c       	mov	r11, r1
    343e:	75 01       	movw	r14, r10
    3440:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
    3442:	08 94       	sec
    3444:	c1 1c       	adc	r12, r1
    3446:	d1 1c       	adc	r13, r1
    3448:	e1 1c       	adc	r14, r1
    344a:	f1 1c       	adc	r15, r1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    344c:	8e 89       	ldd	r24, Y+22	; 0x16
    344e:	9f 89       	ldd	r25, Y+23	; 0x17
    3450:	a8 8d       	ldd	r26, Y+24	; 0x18
    3452:	b9 8d       	ldd	r27, Y+25	; 0x19
    3454:	c8 16       	cp	r12, r24
    3456:	d9 06       	cpc	r13, r25
    3458:	ea 06       	cpc	r14, r26
    345a:	fb 06       	cpc	r15, r27
    345c:	60 f0       	brcs	.+24     	; 0x3476 <create_chain+0xcc>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
    345e:	22 e0       	ldi	r18, 0x02	; 2
    3460:	82 16       	cp	r8, r18
    3462:	91 04       	cpc	r9, r1
    3464:	a1 04       	cpc	r10, r1
    3466:	b1 04       	cpc	r11, r1
    3468:	08 f4       	brcc	.+2      	; 0x346c <create_chain+0xc2>
    346a:	5c c0       	rjmp	.+184    	; 0x3524 <create_chain+0x17a>
    346c:	32 e0       	ldi	r19, 0x02	; 2
    346e:	c3 2e       	mov	r12, r19
    3470:	d1 2c       	mov	r13, r1
    3472:	e1 2c       	mov	r14, r1
    3474:	f1 2c       	mov	r15, r1
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    3476:	ce 01       	movw	r24, r28
    3478:	b7 01       	movw	r22, r14
    347a:	a6 01       	movw	r20, r12
    347c:	08 de       	rcall	.-1008   	; 0x308e <get_fat>
    347e:	9b 01       	movw	r18, r22
    3480:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
    3482:	61 15       	cp	r22, r1
    3484:	71 05       	cpc	r23, r1
    3486:	81 05       	cpc	r24, r1
    3488:	91 05       	cpc	r25, r1
    348a:	a9 f0       	breq	.+42     	; 0x34b6 <create_chain+0x10c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    348c:	2f 3f       	cpi	r18, 0xFF	; 255
    348e:	8f ef       	ldi	r24, 0xFF	; 255
    3490:	38 07       	cpc	r19, r24
    3492:	8f ef       	ldi	r24, 0xFF	; 255
    3494:	48 07       	cpc	r20, r24
    3496:	8f ef       	ldi	r24, 0xFF	; 255
    3498:	58 07       	cpc	r21, r24
    349a:	09 f4       	brne	.+2      	; 0x349e <create_chain+0xf4>
    349c:	4c c0       	rjmp	.+152    	; 0x3536 <create_chain+0x18c>
    349e:	21 30       	cpi	r18, 0x01	; 1
    34a0:	31 05       	cpc	r19, r1
    34a2:	41 05       	cpc	r20, r1
    34a4:	51 05       	cpc	r21, r1
    34a6:	09 f4       	brne	.+2      	; 0x34aa <create_chain+0x100>
    34a8:	46 c0       	rjmp	.+140    	; 0x3536 <create_chain+0x18c>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
    34aa:	c8 14       	cp	r12, r8
    34ac:	d9 04       	cpc	r13, r9
    34ae:	ea 04       	cpc	r14, r10
    34b0:	fb 04       	cpc	r15, r11
    34b2:	39 f6       	brne	.-114    	; 0x3442 <create_chain+0x98>
    34b4:	37 c0       	rjmp	.+110    	; 0x3524 <create_chain+0x17a>
    34b6:	bc 2c       	mov	r11, r12
    34b8:	ad 2c       	mov	r10, r13
    34ba:	9e 2c       	mov	r9, r14
    34bc:	8f 2c       	mov	r8, r15
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "last link" */
    34be:	ce 01       	movw	r24, r28
    34c0:	a6 01       	movw	r20, r12
    34c2:	b7 01       	movw	r22, r14
    34c4:	0f ef       	ldi	r16, 0xFF	; 255
    34c6:	1f ef       	ldi	r17, 0xFF	; 255
    34c8:	2f ef       	ldi	r18, 0xFF	; 255
    34ca:	3f e0       	ldi	r19, 0x0F	; 15
    34cc:	ed dc       	rcall	.-1574   	; 0x2ea8 <put_fat>
    34ce:	88 23       	and	r24, r24
    34d0:	71 f5       	brne	.+92     	; 0x352e <create_chain+0x184>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
    34d2:	41 14       	cp	r4, r1
    34d4:	51 04       	cpc	r5, r1
    34d6:	61 04       	cpc	r6, r1
    34d8:	71 04       	cpc	r7, r1
    34da:	41 f0       	breq	.+16     	; 0x34ec <create_chain+0x142>
		if (put_fat(fs, clst, ncl))
    34dc:	ce 01       	movw	r24, r28
    34de:	b3 01       	movw	r22, r6
    34e0:	a2 01       	movw	r20, r4
    34e2:	86 01       	movw	r16, r12
    34e4:	97 01       	movw	r18, r14
    34e6:	e0 dc       	rcall	.-1600   	; 0x2ea8 <put_fat>
    34e8:	88 23       	and	r24, r24
    34ea:	09 f5       	brne	.+66     	; 0x352e <create_chain+0x184>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
    34ec:	ba 86       	std	Y+10, r11	; 0x0a
    34ee:	ab 86       	std	Y+11, r10	; 0x0b
    34f0:	9c 86       	std	Y+12, r9	; 0x0c
    34f2:	8d 86       	std	Y+13, r8	; 0x0d
	if (fs->free_clust != 0xFFFFFFFF) {
    34f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    34f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    34f8:	a8 89       	ldd	r26, Y+16	; 0x10
    34fa:	b9 89       	ldd	r27, Y+17	; 0x11
    34fc:	8f 3f       	cpi	r24, 0xFF	; 255
    34fe:	2f ef       	ldi	r18, 0xFF	; 255
    3500:	92 07       	cpc	r25, r18
    3502:	2f ef       	ldi	r18, 0xFF	; 255
    3504:	a2 07       	cpc	r26, r18
    3506:	2f ef       	ldi	r18, 0xFF	; 255
    3508:	b2 07       	cpc	r27, r18
    350a:	49 f0       	breq	.+18     	; 0x351e <create_chain+0x174>
		fs->free_clust--;
    350c:	01 97       	sbiw	r24, 0x01	; 1
    350e:	a1 09       	sbc	r26, r1
    3510:	b1 09       	sbc	r27, r1
    3512:	8e 87       	std	Y+14, r24	; 0x0e
    3514:	9f 87       	std	Y+15, r25	; 0x0f
    3516:	a8 8b       	std	Y+16, r26	; 0x10
    3518:	b9 8b       	std	Y+17, r27	; 0x11
		fs->fsi_flag = 1;
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	8d 83       	std	Y+5, r24	; 0x05
    351e:	a7 01       	movw	r20, r14
    3520:	96 01       	movw	r18, r12
    3522:	09 c0       	rjmp	.+18     	; 0x3536 <create_chain+0x18c>
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	40 e0       	ldi	r20, 0x00	; 0
    352a:	50 e0       	ldi	r21, 0x00	; 0
    352c:	04 c0       	rjmp	.+8      	; 0x3536 <create_chain+0x18c>
    352e:	2f ef       	ldi	r18, 0xFF	; 255
    3530:	3f ef       	ldi	r19, 0xFF	; 255
    3532:	4f ef       	ldi	r20, 0xFF	; 255
    3534:	5f ef       	ldi	r21, 0xFF	; 255
	}

	return ncl;		/* Return new cluster number */
}
    3536:	b9 01       	movw	r22, r18
    3538:	ca 01       	movw	r24, r20
    353a:	df 91       	pop	r29
    353c:	cf 91       	pop	r28
    353e:	1f 91       	pop	r17
    3540:	0f 91       	pop	r16
    3542:	ff 90       	pop	r15
    3544:	ef 90       	pop	r14
    3546:	df 90       	pop	r13
    3548:	cf 90       	pop	r12
    354a:	bf 90       	pop	r11
    354c:	af 90       	pop	r10
    354e:	9f 90       	pop	r9
    3550:	8f 90       	pop	r8
    3552:	7f 90       	pop	r7
    3554:	6f 90       	pop	r6
    3556:	5f 90       	pop	r5
    3558:	4f 90       	pop	r4
    355a:	08 95       	ret

0000355c <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    355c:	9f 92       	push	r9
    355e:	af 92       	push	r10
    3560:	bf 92       	push	r11
    3562:	cf 92       	push	r12
    3564:	df 92       	push	r13
    3566:	ef 92       	push	r14
    3568:	ff 92       	push	r15
    356a:	0f 93       	push	r16
    356c:	1f 93       	push	r17
    356e:	cf 93       	push	r28
    3570:	df 93       	push	r29
    3572:	ec 01       	movw	r28, r24
    3574:	7a 01       	movw	r14, r20
    3576:	8b 01       	movw	r16, r22
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    3578:	42 30       	cpi	r20, 0x02	; 2
    357a:	51 05       	cpc	r21, r1
    357c:	61 05       	cpc	r22, r1
    357e:	71 05       	cpc	r23, r1
    3580:	08 f4       	brcc	.+2      	; 0x3584 <remove_chain+0x28>
    3582:	56 c0       	rjmp	.+172    	; 0x3630 <remove_chain+0xd4>
    3584:	8e 89       	ldd	r24, Y+22	; 0x16
    3586:	9f 89       	ldd	r25, Y+23	; 0x17
    3588:	a8 8d       	ldd	r26, Y+24	; 0x18
    358a:	b9 8d       	ldd	r27, Y+25	; 0x19
    358c:	48 17       	cp	r20, r24
    358e:	59 07       	cpc	r21, r25
    3590:	6a 07       	cpc	r22, r26
    3592:	7b 07       	cpc	r23, r27
    3594:	08 f4       	brcc	.+2      	; 0x3598 <remove_chain+0x3c>
    3596:	3f c0       	rjmp	.+126    	; 0x3616 <remove_chain+0xba>
    3598:	4b c0       	rjmp	.+150    	; 0x3630 <remove_chain+0xd4>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
    359a:	ce 01       	movw	r24, r28
    359c:	b8 01       	movw	r22, r16
    359e:	a7 01       	movw	r20, r14
    35a0:	76 dd       	rcall	.-1300   	; 0x308e <get_fat>
    35a2:	5b 01       	movw	r10, r22
    35a4:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
    35a6:	61 15       	cp	r22, r1
    35a8:	71 05       	cpc	r23, r1
    35aa:	81 05       	cpc	r24, r1
    35ac:	91 05       	cpc	r25, r1
    35ae:	09 f4       	brne	.+2      	; 0x35b2 <remove_chain+0x56>
    35b0:	41 c0       	rjmp	.+130    	; 0x3634 <remove_chain+0xd8>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	a8 16       	cp	r10, r24
    35b6:	b1 04       	cpc	r11, r1
    35b8:	c1 04       	cpc	r12, r1
    35ba:	d1 04       	cpc	r13, r1
    35bc:	c9 f1       	breq	.+114    	; 0x3630 <remove_chain+0xd4>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    35be:	2f ef       	ldi	r18, 0xFF	; 255
    35c0:	a2 16       	cp	r10, r18
    35c2:	2f ef       	ldi	r18, 0xFF	; 255
    35c4:	b2 06       	cpc	r11, r18
    35c6:	2f ef       	ldi	r18, 0xFF	; 255
    35c8:	c2 06       	cpc	r12, r18
    35ca:	2f ef       	ldi	r18, 0xFF	; 255
    35cc:	d2 06       	cpc	r13, r18
    35ce:	11 f4       	brne	.+4      	; 0x35d4 <remove_chain+0x78>
    35d0:	81 e0       	ldi	r24, 0x01	; 1
    35d2:	31 c0       	rjmp	.+98     	; 0x3636 <remove_chain+0xda>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    35d4:	ce 01       	movw	r24, r28
    35d6:	b8 01       	movw	r22, r16
    35d8:	a7 01       	movw	r20, r14
    35da:	00 e0       	ldi	r16, 0x00	; 0
    35dc:	10 e0       	ldi	r17, 0x00	; 0
    35de:	20 e0       	ldi	r18, 0x00	; 0
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	62 dc       	rcall	.-1852   	; 0x2ea8 <put_fat>
			if (res != FR_OK) break;
    35e4:	88 23       	and	r24, r24
    35e6:	39 f5       	brne	.+78     	; 0x3636 <remove_chain+0xda>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    35e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    35ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    35ec:	a8 89       	ldd	r26, Y+16	; 0x10
    35ee:	b9 89       	ldd	r27, Y+17	; 0x11
    35f0:	8f 3f       	cpi	r24, 0xFF	; 255
    35f2:	2f ef       	ldi	r18, 0xFF	; 255
    35f4:	92 07       	cpc	r25, r18
    35f6:	2f ef       	ldi	r18, 0xFF	; 255
    35f8:	a2 07       	cpc	r26, r18
    35fa:	2f ef       	ldi	r18, 0xFF	; 255
    35fc:	b2 07       	cpc	r27, r18
    35fe:	41 f0       	breq	.+16     	; 0x3610 <remove_chain+0xb4>
				fs->free_clust++;
    3600:	01 96       	adiw	r24, 0x01	; 1
    3602:	a1 1d       	adc	r26, r1
    3604:	b1 1d       	adc	r27, r1
    3606:	8e 87       	std	Y+14, r24	; 0x0e
    3608:	9f 87       	std	Y+15, r25	; 0x0f
    360a:	a8 8b       	std	Y+16, r26	; 0x10
    360c:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
    360e:	9d 82       	std	Y+5, r9	; 0x05
    3610:	86 01       	movw	r16, r12
    3612:	75 01       	movw	r14, r10
    3614:	02 c0       	rjmp	.+4      	; 0x361a <remove_chain+0xbe>
    3616:	99 24       	eor	r9, r9
    3618:	93 94       	inc	r9
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
    361a:	8e 89       	ldd	r24, Y+22	; 0x16
    361c:	9f 89       	ldd	r25, Y+23	; 0x17
    361e:	a8 8d       	ldd	r26, Y+24	; 0x18
    3620:	b9 8d       	ldd	r27, Y+25	; 0x19
    3622:	e8 16       	cp	r14, r24
    3624:	f9 06       	cpc	r15, r25
    3626:	0a 07       	cpc	r16, r26
    3628:	1b 07       	cpc	r17, r27
    362a:	08 f4       	brcc	.+2      	; 0x362e <remove_chain+0xd2>
    362c:	b6 cf       	rjmp	.-148    	; 0x359a <remove_chain+0x3e>
    362e:	02 c0       	rjmp	.+4      	; 0x3634 <remove_chain+0xd8>
    3630:	82 e0       	ldi	r24, 0x02	; 2
    3632:	01 c0       	rjmp	.+2      	; 0x3636 <remove_chain+0xda>
    3634:	80 e0       	ldi	r24, 0x00	; 0
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
    3636:	df 91       	pop	r29
    3638:	cf 91       	pop	r28
    363a:	1f 91       	pop	r17
    363c:	0f 91       	pop	r16
    363e:	ff 90       	pop	r15
    3640:	ef 90       	pop	r14
    3642:	df 90       	pop	r13
    3644:	cf 90       	pop	r12
    3646:	bf 90       	pop	r11
    3648:	af 90       	pop	r10
    364a:	9f 90       	pop	r9
    364c:	08 95       	ret

0000364e <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    364e:	2f 92       	push	r2
    3650:	3f 92       	push	r3
    3652:	4f 92       	push	r4
    3654:	5f 92       	push	r5
    3656:	6f 92       	push	r6
    3658:	7f 92       	push	r7
    365a:	8f 92       	push	r8
    365c:	9f 92       	push	r9
    365e:	af 92       	push	r10
    3660:	bf 92       	push	r11
    3662:	cf 92       	push	r12
    3664:	df 92       	push	r13
    3666:	ef 92       	push	r14
    3668:	ff 92       	push	r15
    366a:	0f 93       	push	r16
    366c:	1f 93       	push	r17
    366e:	df 93       	push	r29
    3670:	cf 93       	push	r28
    3672:	00 d0       	rcall	.+0      	; 0x3674 <f_lseek+0x26>
    3674:	00 d0       	rcall	.+0      	; 0x3676 <f_lseek+0x28>
    3676:	0f 92       	push	r0
    3678:	cd b7       	in	r28, 0x3d	; 61
    367a:	de b7       	in	r29, 0x3e	; 62
    367c:	9d 83       	std	Y+5, r25	; 0x05
    367e:	8c 83       	std	Y+4, r24	; 0x04
    3680:	3a 01       	movw	r6, r20
    3682:	4b 01       	movw	r8, r22
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    3684:	dc 01       	movw	r26, r24
    3686:	12 96       	adiw	r26, 0x02	; 2
    3688:	6d 91       	ld	r22, X+
    368a:	7c 91       	ld	r23, X
    368c:	13 97       	sbiw	r26, 0x03	; 3
    368e:	8d 91       	ld	r24, X+
    3690:	9c 91       	ld	r25, X
    3692:	a6 d8       	rcall	.-3764   	; 0x27e0 <validate>
    3694:	8b 83       	std	Y+3, r24	; 0x03
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    3696:	88 23       	and	r24, r24
    3698:	09 f0       	breq	.+2      	; 0x369c <f_lseek+0x4e>
    369a:	7e c1       	rjmp	.+764    	; 0x3998 <f_lseek+0x34a>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    369c:	ec 81       	ldd	r30, Y+4	; 0x04
    369e:	fd 81       	ldd	r31, Y+5	; 0x05
    36a0:	84 81       	ldd	r24, Z+4	; 0x04
    36a2:	87 fd       	sbrc	r24, 7
    36a4:	8f c0       	rjmp	.+286    	; 0x37c4 <f_lseek+0x176>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    36a6:	ac 81       	ldd	r26, Y+4	; 0x04
    36a8:	bd 81       	ldd	r27, Y+5	; 0x05
    36aa:	1a 96       	adiw	r26, 0x0a	; 10
    36ac:	ad 90       	ld	r10, X+
    36ae:	bd 90       	ld	r11, X+
    36b0:	cd 90       	ld	r12, X+
    36b2:	dc 90       	ld	r13, X
    36b4:	1d 97       	sbiw	r26, 0x0d	; 13
    36b6:	a6 14       	cp	r10, r6
    36b8:	b7 04       	cpc	r11, r7
    36ba:	c8 04       	cpc	r12, r8
    36bc:	d9 04       	cpc	r13, r9
    36be:	10 f4       	brcc	.+4      	; 0x36c4 <f_lseek+0x76>
    36c0:	81 ff       	sbrs	r24, 1
    36c2:	02 c0       	rjmp	.+4      	; 0x36c8 <f_lseek+0x7a>
    36c4:	64 01       	movw	r12, r8
    36c6:	53 01       	movw	r10, r6
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
    36c8:	ec 81       	ldd	r30, Y+4	; 0x04
    36ca:	fd 81       	ldd	r31, Y+5	; 0x05
    36cc:	26 81       	ldd	r18, Z+6	; 0x06
    36ce:	37 81       	ldd	r19, Z+7	; 0x07
    36d0:	40 85       	ldd	r20, Z+8	; 0x08
    36d2:	51 85       	ldd	r21, Z+9	; 0x09
		fp->fptr = nsect = 0;
    36d4:	16 82       	std	Z+6, r1	; 0x06
    36d6:	17 82       	std	Z+7, r1	; 0x07
    36d8:	10 86       	std	Z+8, r1	; 0x08
    36da:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
    36dc:	a1 14       	cp	r10, r1
    36de:	b1 04       	cpc	r11, r1
    36e0:	c1 04       	cpc	r12, r1
    36e2:	d1 04       	cpc	r13, r1
    36e4:	09 f4       	brne	.+2      	; 0x36e8 <f_lseek+0x9a>
    36e6:	24 c1       	rjmp	.+584    	; 0x3930 <f_lseek+0x2e2>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    36e8:	01 90       	ld	r0, Z+
    36ea:	f0 81       	ld	r31, Z
    36ec:	e0 2d       	mov	r30, r0
    36ee:	fa 83       	std	Y+2, r31	; 0x02
    36f0:	e9 83       	std	Y+1, r30	; 0x01
    36f2:	82 81       	ldd	r24, Z+2	; 0x02
    36f4:	68 2e       	mov	r6, r24
    36f6:	77 24       	eor	r7, r7
    36f8:	88 24       	eor	r8, r8
    36fa:	99 24       	eor	r9, r9
    36fc:	f9 e0       	ldi	r31, 0x09	; 9
    36fe:	66 0c       	add	r6, r6
    3700:	77 1c       	adc	r7, r7
    3702:	88 1c       	adc	r8, r8
    3704:	99 1c       	adc	r9, r9
    3706:	fa 95       	dec	r31
    3708:	d1 f7       	brne	.-12     	; 0x36fe <f_lseek+0xb0>
			if (ifptr > 0 &&
    370a:	21 15       	cp	r18, r1
    370c:	31 05       	cpc	r19, r1
    370e:	41 05       	cpc	r20, r1
    3710:	51 05       	cpc	r21, r1
    3712:	c1 f1       	breq	.+112    	; 0x3784 <f_lseek+0x136>
    3714:	19 01       	movw	r2, r18
    3716:	2a 01       	movw	r4, r20
    3718:	08 94       	sec
    371a:	21 08       	sbc	r2, r1
    371c:	31 08       	sbc	r3, r1
    371e:	41 08       	sbc	r4, r1
    3720:	51 08       	sbc	r5, r1
    3722:	c6 01       	movw	r24, r12
    3724:	b5 01       	movw	r22, r10
    3726:	61 50       	subi	r22, 0x01	; 1
    3728:	70 40       	sbci	r23, 0x00	; 0
    372a:	80 40       	sbci	r24, 0x00	; 0
    372c:	90 40       	sbci	r25, 0x00	; 0
    372e:	a4 01       	movw	r20, r8
    3730:	93 01       	movw	r18, r6
    3732:	0e 94 28 32 	call	0x6450	; 0x6450 <__udivmodsi4>
    3736:	79 01       	movw	r14, r18
    3738:	8a 01       	movw	r16, r20
    373a:	c2 01       	movw	r24, r4
    373c:	b1 01       	movw	r22, r2
    373e:	a4 01       	movw	r20, r8
    3740:	93 01       	movw	r18, r6
    3742:	0e 94 28 32 	call	0x6450	; 0x6450 <__udivmodsi4>
    3746:	e2 16       	cp	r14, r18
    3748:	f3 06       	cpc	r15, r19
    374a:	04 07       	cpc	r16, r20
    374c:	15 07       	cpc	r17, r21
    374e:	d0 f0       	brcs	.+52     	; 0x3784 <f_lseek+0x136>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    3750:	88 27       	eor	r24, r24
    3752:	99 27       	eor	r25, r25
    3754:	dc 01       	movw	r26, r24
    3756:	86 19       	sub	r24, r6
    3758:	97 09       	sbc	r25, r7
    375a:	a8 09       	sbc	r26, r8
    375c:	b9 09       	sbc	r27, r9
    375e:	82 21       	and	r24, r2
    3760:	93 21       	and	r25, r3
    3762:	a4 21       	and	r26, r4
    3764:	b5 21       	and	r27, r5
    3766:	ec 81       	ldd	r30, Y+4	; 0x04
    3768:	fd 81       	ldd	r31, Y+5	; 0x05
    376a:	86 83       	std	Z+6, r24	; 0x06
    376c:	97 83       	std	Z+7, r25	; 0x07
    376e:	a0 87       	std	Z+8, r26	; 0x08
    3770:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
    3772:	a8 1a       	sub	r10, r24
    3774:	b9 0a       	sbc	r11, r25
    3776:	ca 0a       	sbc	r12, r26
    3778:	db 0a       	sbc	r13, r27
				clst = fp->curr_clust;
    377a:	42 89       	ldd	r20, Z+18	; 0x12
    377c:	53 89       	ldd	r21, Z+19	; 0x13
    377e:	64 89       	ldd	r22, Z+20	; 0x14
    3780:	75 89       	ldd	r23, Z+21	; 0x15
    3782:	39 c0       	rjmp	.+114    	; 0x37f6 <f_lseek+0x1a8>
			} else {									/* When seek to back cluster, */
				clst = fp->org_clust;					/* start from the first cluster */
    3784:	ac 81       	ldd	r26, Y+4	; 0x04
    3786:	bd 81       	ldd	r27, Y+5	; 0x05
    3788:	1e 96       	adiw	r26, 0x0e	; 14
    378a:	4d 91       	ld	r20, X+
    378c:	5d 91       	ld	r21, X+
    378e:	6d 91       	ld	r22, X+
    3790:	7c 91       	ld	r23, X
    3792:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    3794:	41 15       	cp	r20, r1
    3796:	51 05       	cpc	r21, r1
    3798:	61 05       	cpc	r22, r1
    379a:	71 05       	cpc	r23, r1
    379c:	21 f5       	brne	.+72     	; 0x37e6 <f_lseek+0x198>
					clst = create_chain(fp->fs, 0);
    379e:	89 81       	ldd	r24, Y+1	; 0x01
    37a0:	9a 81       	ldd	r25, Y+2	; 0x02
    37a2:	40 e0       	ldi	r20, 0x00	; 0
    37a4:	50 e0       	ldi	r21, 0x00	; 0
    37a6:	60 e0       	ldi	r22, 0x00	; 0
    37a8:	70 e0       	ldi	r23, 0x00	; 0
    37aa:	ff dd       	rcall	.-1026   	; 0x33aa <create_chain>
    37ac:	ab 01       	movw	r20, r22
    37ae:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    37b0:	41 30       	cpi	r20, 0x01	; 1
    37b2:	51 05       	cpc	r21, r1
    37b4:	61 05       	cpc	r22, r1
    37b6:	71 05       	cpc	r23, r1
    37b8:	41 f4       	brne	.+16     	; 0x37ca <f_lseek+0x17c>
    37ba:	ec 81       	ldd	r30, Y+4	; 0x04
    37bc:	fd 81       	ldd	r31, Y+5	; 0x05
    37be:	84 81       	ldd	r24, Z+4	; 0x04
    37c0:	80 68       	ori	r24, 0x80	; 128
    37c2:	84 83       	std	Z+4, r24	; 0x04
    37c4:	f2 e0       	ldi	r31, 0x02	; 2
    37c6:	fb 83       	std	Y+3, r31	; 0x03
    37c8:	e7 c0       	rjmp	.+462    	; 0x3998 <f_lseek+0x34a>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    37ca:	4f 3f       	cpi	r20, 0xFF	; 255
    37cc:	8f ef       	ldi	r24, 0xFF	; 255
    37ce:	58 07       	cpc	r21, r24
    37d0:	8f ef       	ldi	r24, 0xFF	; 255
    37d2:	68 07       	cpc	r22, r24
    37d4:	8f ef       	ldi	r24, 0xFF	; 255
    37d6:	78 07       	cpc	r23, r24
    37d8:	a1 f1       	breq	.+104    	; 0x3842 <f_lseek+0x1f4>
					fp->org_clust = clst;
    37da:	ec 81       	ldd	r30, Y+4	; 0x04
    37dc:	fd 81       	ldd	r31, Y+5	; 0x05
    37de:	46 87       	std	Z+14, r20	; 0x0e
    37e0:	57 87       	std	Z+15, r21	; 0x0f
    37e2:	60 8b       	std	Z+16, r22	; 0x10
    37e4:	71 8b       	std	Z+17, r23	; 0x11
				}
#endif
				fp->curr_clust = clst;
    37e6:	ac 81       	ldd	r26, Y+4	; 0x04
    37e8:	bd 81       	ldd	r27, Y+5	; 0x05
    37ea:	52 96       	adiw	r26, 0x12	; 18
    37ec:	4d 93       	st	X+, r20
    37ee:	5d 93       	st	X+, r21
    37f0:	6d 93       	st	X+, r22
    37f2:	7c 93       	st	X, r23
    37f4:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
    37f6:	41 15       	cp	r20, r1
    37f8:	51 05       	cpc	r21, r1
    37fa:	61 05       	cpc	r22, r1
    37fc:	71 05       	cpc	r23, r1
    37fe:	09 f0       	breq	.+2      	; 0x3802 <f_lseek+0x1b4>
    3800:	58 c0       	rjmp	.+176    	; 0x38b2 <f_lseek+0x264>
    3802:	96 c0       	rjmp	.+300    	; 0x3930 <f_lseek+0x2e2>
				while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    3804:	ec 81       	ldd	r30, Y+4	; 0x04
    3806:	fd 81       	ldd	r31, Y+5	; 0x05
    3808:	84 81       	ldd	r24, Z+4	; 0x04
    380a:	20 81       	ld	r18, Z
    380c:	31 81       	ldd	r19, Z+1	; 0x01
    380e:	81 ff       	sbrs	r24, 1
    3810:	0c c0       	rjmp	.+24     	; 0x382a <f_lseek+0x1dc>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    3812:	c9 01       	movw	r24, r18
    3814:	ca dd       	rcall	.-1132   	; 0x33aa <create_chain>
    3816:	ab 01       	movw	r20, r22
    3818:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
    381a:	41 15       	cp	r20, r1
    381c:	51 05       	cpc	r21, r1
    381e:	61 05       	cpc	r22, r1
    3820:	71 05       	cpc	r23, r1
    3822:	39 f4       	brne	.+14     	; 0x3832 <f_lseek+0x1e4>
    3824:	64 01       	movw	r12, r8
    3826:	53 01       	movw	r10, r6
    3828:	4a c0       	rjmp	.+148    	; 0x38be <f_lseek+0x270>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    382a:	c9 01       	movw	r24, r18
    382c:	30 dc       	rcall	.-1952   	; 0x308e <get_fat>
    382e:	ab 01       	movw	r20, r22
    3830:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    3832:	4f 3f       	cpi	r20, 0xFF	; 255
    3834:	ff ef       	ldi	r31, 0xFF	; 255
    3836:	5f 07       	cpc	r21, r31
    3838:	ff ef       	ldi	r31, 0xFF	; 255
    383a:	6f 07       	cpc	r22, r31
    383c:	ff ef       	ldi	r31, 0xFF	; 255
    383e:	7f 07       	cpc	r23, r31
    3840:	51 f4       	brne	.+20     	; 0x3856 <f_lseek+0x208>
    3842:	ac 81       	ldd	r26, Y+4	; 0x04
    3844:	bd 81       	ldd	r27, Y+5	; 0x05
    3846:	14 96       	adiw	r26, 0x04	; 4
    3848:	8c 91       	ld	r24, X
    384a:	14 97       	sbiw	r26, 0x04	; 4
    384c:	80 68       	ori	r24, 0x80	; 128
    384e:	14 96       	adiw	r26, 0x04	; 4
    3850:	8c 93       	st	X, r24
    3852:	b1 e0       	ldi	r27, 0x01	; 1
    3854:	5d c0       	rjmp	.+186    	; 0x3910 <f_lseek+0x2c2>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    3856:	42 30       	cpi	r20, 0x02	; 2
    3858:	51 05       	cpc	r21, r1
    385a:	61 05       	cpc	r22, r1
    385c:	71 05       	cpc	r23, r1
    385e:	08 f4       	brcc	.+2      	; 0x3862 <f_lseek+0x214>
    3860:	ac cf       	rjmp	.-168    	; 0x37ba <f_lseek+0x16c>
    3862:	ac 81       	ldd	r26, Y+4	; 0x04
    3864:	bd 81       	ldd	r27, Y+5	; 0x05
    3866:	ed 91       	ld	r30, X+
    3868:	fc 91       	ld	r31, X
    386a:	86 89       	ldd	r24, Z+22	; 0x16
    386c:	97 89       	ldd	r25, Z+23	; 0x17
    386e:	a0 8d       	ldd	r26, Z+24	; 0x18
    3870:	b1 8d       	ldd	r27, Z+25	; 0x19
    3872:	48 17       	cp	r20, r24
    3874:	59 07       	cpc	r21, r25
    3876:	6a 07       	cpc	r22, r26
    3878:	7b 07       	cpc	r23, r27
    387a:	08 f0       	brcs	.+2      	; 0x387e <f_lseek+0x230>
    387c:	9e cf       	rjmp	.-196    	; 0x37ba <f_lseek+0x16c>
					fp->curr_clust = clst;
    387e:	ac 81       	ldd	r26, Y+4	; 0x04
    3880:	bd 81       	ldd	r27, Y+5	; 0x05
    3882:	52 96       	adiw	r26, 0x12	; 18
    3884:	4d 93       	st	X+, r20
    3886:	5d 93       	st	X+, r21
    3888:	6d 93       	st	X+, r22
    388a:	7c 93       	st	X, r23
    388c:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
    388e:	ec 81       	ldd	r30, Y+4	; 0x04
    3890:	fd 81       	ldd	r31, Y+5	; 0x05
    3892:	86 81       	ldd	r24, Z+6	; 0x06
    3894:	97 81       	ldd	r25, Z+7	; 0x07
    3896:	a0 85       	ldd	r26, Z+8	; 0x08
    3898:	b1 85       	ldd	r27, Z+9	; 0x09
    389a:	86 0d       	add	r24, r6
    389c:	97 1d       	adc	r25, r7
    389e:	a8 1d       	adc	r26, r8
    38a0:	b9 1d       	adc	r27, r9
    38a2:	86 83       	std	Z+6, r24	; 0x06
    38a4:	97 83       	std	Z+7, r25	; 0x07
    38a6:	a0 87       	std	Z+8, r26	; 0x08
    38a8:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
    38aa:	a6 18       	sub	r10, r6
    38ac:	b7 08       	sbc	r11, r7
    38ae:	c8 08       	sbc	r12, r8
    38b0:	d9 08       	sbc	r13, r9
				}
#endif
				fp->curr_clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    38b2:	6a 14       	cp	r6, r10
    38b4:	7b 04       	cpc	r7, r11
    38b6:	8c 04       	cpc	r8, r12
    38b8:	9d 04       	cpc	r9, r13
    38ba:	08 f4       	brcc	.+2      	; 0x38be <f_lseek+0x270>
    38bc:	a3 cf       	rjmp	.-186    	; 0x3804 <f_lseek+0x1b6>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->curr_clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
    38be:	ec 81       	ldd	r30, Y+4	; 0x04
    38c0:	fd 81       	ldd	r31, Y+5	; 0x05
    38c2:	86 81       	ldd	r24, Z+6	; 0x06
    38c4:	97 81       	ldd	r25, Z+7	; 0x07
    38c6:	a0 85       	ldd	r26, Z+8	; 0x08
    38c8:	b1 85       	ldd	r27, Z+9	; 0x09
    38ca:	8a 0d       	add	r24, r10
    38cc:	9b 1d       	adc	r25, r11
    38ce:	ac 1d       	adc	r26, r12
    38d0:	bd 1d       	adc	r27, r13
    38d2:	86 83       	std	Z+6, r24	; 0x06
    38d4:	97 83       	std	Z+7, r25	; 0x07
    38d6:	a0 87       	std	Z+8, r26	; 0x08
    38d8:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
    38da:	d6 01       	movw	r26, r12
    38dc:	c5 01       	movw	r24, r10
    38de:	91 70       	andi	r25, 0x01	; 1
    38e0:	a0 70       	andi	r26, 0x00	; 0
    38e2:	b0 70       	andi	r27, 0x00	; 0
    38e4:	00 97       	sbiw	r24, 0x00	; 0
    38e6:	a1 05       	cpc	r26, r1
    38e8:	b1 05       	cpc	r27, r1
    38ea:	11 f1       	breq	.+68     	; 0x3930 <f_lseek+0x2e2>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    38ec:	80 81       	ld	r24, Z
    38ee:	91 81       	ldd	r25, Z+1	; 0x01
    38f0:	0e 94 9e 13 	call	0x273c	; 0x273c <clust2sect>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    38f4:	61 15       	cp	r22, r1
    38f6:	71 05       	cpc	r23, r1
    38f8:	81 05       	cpc	r24, r1
    38fa:	91 05       	cpc	r25, r1
    38fc:	59 f4       	brne	.+22     	; 0x3914 <f_lseek+0x2c6>
    38fe:	ac 81       	ldd	r26, Y+4	; 0x04
    3900:	bd 81       	ldd	r27, Y+5	; 0x05
    3902:	14 96       	adiw	r26, 0x04	; 4
    3904:	8c 91       	ld	r24, X
    3906:	14 97       	sbiw	r26, 0x04	; 4
    3908:	80 68       	ori	r24, 0x80	; 128
    390a:	14 96       	adiw	r26, 0x04	; 4
    390c:	8c 93       	st	X, r24
    390e:	b2 e0       	ldi	r27, 0x02	; 2
    3910:	bb 83       	std	Y+3, r27	; 0x03
    3912:	42 c0       	rjmp	.+132    	; 0x3998 <f_lseek+0x34a>
					nsect += ofs / SS(fp->fs);
    3914:	a6 01       	movw	r20, r12
    3916:	95 01       	movw	r18, r10
    3918:	e9 e0       	ldi	r30, 0x09	; 9
    391a:	56 95       	lsr	r21
    391c:	47 95       	ror	r20
    391e:	37 95       	ror	r19
    3920:	27 95       	ror	r18
    3922:	ea 95       	dec	r30
    3924:	d1 f7       	brne	.-12     	; 0x391a <f_lseek+0x2cc>
    3926:	26 0f       	add	r18, r22
    3928:	37 1f       	adc	r19, r23
    392a:	48 1f       	adc	r20, r24
    392c:	59 1f       	adc	r21, r25
    392e:	04 c0       	rjmp	.+8      	; 0x3938 <f_lseek+0x2ea>
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	40 e0       	ldi	r20, 0x00	; 0
    3936:	50 e0       	ldi	r21, 0x00	; 0
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
    3938:	ec 81       	ldd	r30, Y+4	; 0x04
    393a:	fd 81       	ldd	r31, Y+5	; 0x05
    393c:	86 81       	ldd	r24, Z+6	; 0x06
    393e:	97 81       	ldd	r25, Z+7	; 0x07
    3940:	a0 85       	ldd	r26, Z+8	; 0x08
    3942:	b1 85       	ldd	r27, Z+9	; 0x09
    3944:	91 70       	andi	r25, 0x01	; 1
    3946:	a0 70       	andi	r26, 0x00	; 0
    3948:	b0 70       	andi	r27, 0x00	; 0
    394a:	00 97       	sbiw	r24, 0x00	; 0
    394c:	a1 05       	cpc	r26, r1
    394e:	b1 05       	cpc	r27, r1
    3950:	69 f0       	breq	.+26     	; 0x396c <f_lseek+0x31e>
    3952:	86 89       	ldd	r24, Z+22	; 0x16
    3954:	97 89       	ldd	r25, Z+23	; 0x17
    3956:	a0 8d       	ldd	r26, Z+24	; 0x18
    3958:	b1 8d       	ldd	r27, Z+25	; 0x19
    395a:	28 17       	cp	r18, r24
    395c:	39 07       	cpc	r19, r25
    395e:	4a 07       	cpc	r20, r26
    3960:	5b 07       	cpc	r21, r27
    3962:	21 f0       	breq	.+8      	; 0x396c <f_lseek+0x31e>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    3964:	26 8b       	std	Z+22, r18	; 0x16
    3966:	37 8b       	std	Z+23, r19	; 0x17
    3968:	40 8f       	std	Z+24, r20	; 0x18
    396a:	51 8f       	std	Z+25, r21	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
    396c:	ec 81       	ldd	r30, Y+4	; 0x04
    396e:	fd 81       	ldd	r31, Y+5	; 0x05
    3970:	26 81       	ldd	r18, Z+6	; 0x06
    3972:	37 81       	ldd	r19, Z+7	; 0x07
    3974:	40 85       	ldd	r20, Z+8	; 0x08
    3976:	51 85       	ldd	r21, Z+9	; 0x09
    3978:	82 85       	ldd	r24, Z+10	; 0x0a
    397a:	93 85       	ldd	r25, Z+11	; 0x0b
    397c:	a4 85       	ldd	r26, Z+12	; 0x0c
    397e:	b5 85       	ldd	r27, Z+13	; 0x0d
    3980:	82 17       	cp	r24, r18
    3982:	93 07       	cpc	r25, r19
    3984:	a4 07       	cpc	r26, r20
    3986:	b5 07       	cpc	r27, r21
    3988:	38 f4       	brcc	.+14     	; 0x3998 <f_lseek+0x34a>
			fp->fsize = fp->fptr;
    398a:	22 87       	std	Z+10, r18	; 0x0a
    398c:	33 87       	std	Z+11, r19	; 0x0b
    398e:	44 87       	std	Z+12, r20	; 0x0c
    3990:	55 87       	std	Z+13, r21	; 0x0d
			fp->flag |= FA__WRITTEN;
    3992:	84 81       	ldd	r24, Z+4	; 0x04
    3994:	80 62       	ori	r24, 0x20	; 32
    3996:	84 83       	std	Z+4, r24	; 0x04
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    3998:	8b 81       	ldd	r24, Y+3	; 0x03
    399a:	0f 90       	pop	r0
    399c:	0f 90       	pop	r0
    399e:	0f 90       	pop	r0
    39a0:	0f 90       	pop	r0
    39a2:	0f 90       	pop	r0
    39a4:	cf 91       	pop	r28
    39a6:	df 91       	pop	r29
    39a8:	1f 91       	pop	r17
    39aa:	0f 91       	pop	r16
    39ac:	ff 90       	pop	r15
    39ae:	ef 90       	pop	r14
    39b0:	df 90       	pop	r13
    39b2:	cf 90       	pop	r12
    39b4:	bf 90       	pop	r11
    39b6:	af 90       	pop	r10
    39b8:	9f 90       	pop	r9
    39ba:	8f 90       	pop	r8
    39bc:	7f 90       	pop	r7
    39be:	6f 90       	pop	r6
    39c0:	5f 90       	pop	r5
    39c2:	4f 90       	pop	r4
    39c4:	3f 90       	pop	r3
    39c6:	2f 90       	pop	r2
    39c8:	08 95       	ret

000039ca <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    39ca:	8f 92       	push	r8
    39cc:	9f 92       	push	r9
    39ce:	af 92       	push	r10
    39d0:	bf 92       	push	r11
    39d2:	cf 92       	push	r12
    39d4:	df 92       	push	r13
    39d6:	ef 92       	push	r14
    39d8:	ff 92       	push	r15
    39da:	0f 93       	push	r16
    39dc:	1f 93       	push	r17
    39de:	cf 93       	push	r28
    39e0:	df 93       	push	r29
    39e2:	ec 01       	movw	r28, r24
    39e4:	8b 01       	movw	r16, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
    39e6:	ac 80       	ldd	r10, Y+4	; 0x04
    39e8:	bd 80       	ldd	r11, Y+5	; 0x05
    39ea:	08 94       	sec
    39ec:	a1 1c       	adc	r10, r1
    39ee:	b1 1c       	adc	r11, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    39f0:	a1 14       	cp	r10, r1
    39f2:	b1 04       	cpc	r11, r1
    39f4:	09 f4       	brne	.+2      	; 0x39f8 <dir_next+0x2e>
    39f6:	e8 c0       	rjmp	.+464    	; 0x3bc8 <dir_next+0x1fe>
    39f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    39fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    39fc:	a8 89       	ldd	r26, Y+16	; 0x10
    39fe:	b9 89       	ldd	r27, Y+17	; 0x11
    3a00:	00 97       	sbiw	r24, 0x00	; 0
    3a02:	a1 05       	cpc	r26, r1
    3a04:	b1 05       	cpc	r27, r1
    3a06:	09 f4       	brne	.+2      	; 0x3a0a <dir_next+0x40>
    3a08:	df c0       	rjmp	.+446    	; 0x3bc8 <dir_next+0x1fe>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
    3a0a:	2f e0       	ldi	r18, 0x0F	; 15
    3a0c:	82 2e       	mov	r8, r18
    3a0e:	91 2c       	mov	r9, r1
    3a10:	8a 20       	and	r8, r10
    3a12:	9b 20       	and	r9, r11
    3a14:	81 14       	cp	r8, r1
    3a16:	91 04       	cpc	r9, r1
    3a18:	09 f0       	breq	.+2      	; 0x3a1c <dir_next+0x52>
    3a1a:	c3 c0       	rjmp	.+390    	; 0x3ba2 <dir_next+0x1d8>
		dj->sect++;					/* Next sector */
    3a1c:	01 96       	adiw	r24, 0x01	; 1
    3a1e:	a1 1d       	adc	r26, r1
    3a20:	b1 1d       	adc	r27, r1
    3a22:	8e 87       	std	Y+14, r24	; 0x0e
    3a24:	9f 87       	std	Y+15, r25	; 0x0f
    3a26:	a8 8b       	std	Y+16, r26	; 0x10
    3a28:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
    3a2a:	4a 85       	ldd	r20, Y+10	; 0x0a
    3a2c:	5b 85       	ldd	r21, Y+11	; 0x0b
    3a2e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3a30:	7d 85       	ldd	r23, Y+13	; 0x0d
    3a32:	e8 81       	ld	r30, Y
    3a34:	f9 81       	ldd	r31, Y+1	; 0x01
    3a36:	41 15       	cp	r20, r1
    3a38:	51 05       	cpc	r21, r1
    3a3a:	61 05       	cpc	r22, r1
    3a3c:	71 05       	cpc	r23, r1
    3a3e:	39 f4       	brne	.+14     	; 0x3a4e <dir_next+0x84>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    3a40:	80 85       	ldd	r24, Z+8	; 0x08
    3a42:	91 85       	ldd	r25, Z+9	; 0x09
    3a44:	a8 16       	cp	r10, r24
    3a46:	b9 06       	cpc	r11, r25
    3a48:	08 f4       	brcc	.+2      	; 0x3a4c <dir_next+0x82>
    3a4a:	ab c0       	rjmp	.+342    	; 0x3ba2 <dir_next+0x1d8>
    3a4c:	bd c0       	rjmp	.+378    	; 0x3bc8 <dir_next+0x1fe>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    3a4e:	82 81       	ldd	r24, Z+2	; 0x02
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	01 97       	sbiw	r24, 0x01	; 1
    3a54:	95 01       	movw	r18, r10
    3a56:	b4 e0       	ldi	r27, 0x04	; 4
    3a58:	36 95       	lsr	r19
    3a5a:	27 95       	ror	r18
    3a5c:	ba 95       	dec	r27
    3a5e:	e1 f7       	brne	.-8      	; 0x3a58 <dir_next+0x8e>
    3a60:	82 23       	and	r24, r18
    3a62:	93 23       	and	r25, r19
    3a64:	89 2b       	or	r24, r25
    3a66:	09 f0       	breq	.+2      	; 0x3a6a <dir_next+0xa0>
    3a68:	9c c0       	rjmp	.+312    	; 0x3ba2 <dir_next+0x1d8>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    3a6a:	cf 01       	movw	r24, r30
    3a6c:	10 db       	rcall	.-2528   	; 0x308e <get_fat>
    3a6e:	6b 01       	movw	r12, r22
    3a70:	7c 01       	movw	r14, r24
				if (clst <= 1) return FR_INT_ERR;
    3a72:	82 e0       	ldi	r24, 0x02	; 2
    3a74:	c8 16       	cp	r12, r24
    3a76:	d1 04       	cpc	r13, r1
    3a78:	e1 04       	cpc	r14, r1
    3a7a:	f1 04       	cpc	r15, r1
    3a7c:	08 f4       	brcc	.+2      	; 0x3a80 <dir_next+0xb6>
    3a7e:	a6 c0       	rjmp	.+332    	; 0x3bcc <dir_next+0x202>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    3a80:	9f ef       	ldi	r25, 0xFF	; 255
    3a82:	c9 16       	cp	r12, r25
    3a84:	9f ef       	ldi	r25, 0xFF	; 255
    3a86:	d9 06       	cpc	r13, r25
    3a88:	9f ef       	ldi	r25, 0xFF	; 255
    3a8a:	e9 06       	cpc	r14, r25
    3a8c:	9f ef       	ldi	r25, 0xFF	; 255
    3a8e:	f9 06       	cpc	r15, r25
    3a90:	09 f4       	brne	.+2      	; 0x3a94 <dir_next+0xca>
    3a92:	9e c0       	rjmp	.+316    	; 0x3bd0 <dir_next+0x206>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    3a94:	e8 81       	ld	r30, Y
    3a96:	f9 81       	ldd	r31, Y+1	; 0x01
    3a98:	86 89       	ldd	r24, Z+22	; 0x16
    3a9a:	97 89       	ldd	r25, Z+23	; 0x17
    3a9c:	a0 8d       	ldd	r26, Z+24	; 0x18
    3a9e:	b1 8d       	ldd	r27, Z+25	; 0x19
    3aa0:	c8 16       	cp	r12, r24
    3aa2:	d9 06       	cpc	r13, r25
    3aa4:	ea 06       	cpc	r14, r26
    3aa6:	fb 06       	cpc	r15, r27
    3aa8:	08 f4       	brcc	.+2      	; 0x3aac <dir_next+0xe2>
    3aaa:	6d c0       	rjmp	.+218    	; 0x3b86 <dir_next+0x1bc>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    3aac:	01 2b       	or	r16, r17
    3aae:	09 f4       	brne	.+2      	; 0x3ab2 <dir_next+0xe8>
    3ab0:	8b c0       	rjmp	.+278    	; 0x3bc8 <dir_next+0x1fe>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    3ab2:	4a 85       	ldd	r20, Y+10	; 0x0a
    3ab4:	5b 85       	ldd	r21, Y+11	; 0x0b
    3ab6:	6c 85       	ldd	r22, Y+12	; 0x0c
    3ab8:	7d 85       	ldd	r23, Y+13	; 0x0d
    3aba:	cf 01       	movw	r24, r30
    3abc:	76 dc       	rcall	.-1812   	; 0x33aa <create_chain>
    3abe:	6b 01       	movw	r12, r22
    3ac0:	7c 01       	movw	r14, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    3ac2:	61 15       	cp	r22, r1
    3ac4:	71 05       	cpc	r23, r1
    3ac6:	81 05       	cpc	r24, r1
    3ac8:	91 05       	cpc	r25, r1
    3aca:	11 f4       	brne	.+4      	; 0x3ad0 <dir_next+0x106>
    3acc:	87 e0       	ldi	r24, 0x07	; 7
    3ace:	81 c0       	rjmp	.+258    	; 0x3bd2 <dir_next+0x208>
					if (clst == 1) return FR_INT_ERR;
    3ad0:	61 30       	cpi	r22, 0x01	; 1
    3ad2:	71 05       	cpc	r23, r1
    3ad4:	81 05       	cpc	r24, r1
    3ad6:	91 05       	cpc	r25, r1
    3ad8:	09 f4       	brne	.+2      	; 0x3adc <dir_next+0x112>
    3ada:	78 c0       	rjmp	.+240    	; 0x3bcc <dir_next+0x202>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    3adc:	6f 3f       	cpi	r22, 0xFF	; 255
    3ade:	ff ef       	ldi	r31, 0xFF	; 255
    3ae0:	7f 07       	cpc	r23, r31
    3ae2:	ff ef       	ldi	r31, 0xFF	; 255
    3ae4:	8f 07       	cpc	r24, r31
    3ae6:	ff ef       	ldi	r31, 0xFF	; 255
    3ae8:	9f 07       	cpc	r25, r31
    3aea:	09 f4       	brne	.+2      	; 0x3aee <dir_next+0x124>
    3aec:	71 c0       	rjmp	.+226    	; 0x3bd0 <dir_next+0x206>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    3aee:	88 81       	ld	r24, Y
    3af0:	99 81       	ldd	r25, Y+1	; 0x01
    3af2:	40 e0       	ldi	r20, 0x00	; 0
    3af4:	50 e0       	ldi	r21, 0x00	; 0
    3af6:	60 e0       	ldi	r22, 0x00	; 0
    3af8:	70 e0       	ldi	r23, 0x00	; 0
    3afa:	60 d9       	rcall	.-3392   	; 0x2dbc <move_window>
    3afc:	88 23       	and	r24, r24
    3afe:	09 f0       	breq	.+2      	; 0x3b02 <dir_next+0x138>
    3b00:	67 c0       	rjmp	.+206    	; 0x3bd0 <dir_next+0x206>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    3b02:	88 81       	ld	r24, Y
    3b04:	99 81       	ldd	r25, Y+1	; 0x01
    3b06:	8e 96       	adiw	r24, 0x2e	; 46
    3b08:	60 e0       	ldi	r22, 0x00	; 0
    3b0a:	70 e0       	ldi	r23, 0x00	; 0
    3b0c:	40 e0       	ldi	r20, 0x00	; 0
    3b0e:	52 e0       	ldi	r21, 0x02	; 2
    3b10:	0e 94 94 13 	call	0x2728	; 0x2728 <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    3b14:	08 81       	ld	r16, Y
    3b16:	19 81       	ldd	r17, Y+1	; 0x01
    3b18:	c8 01       	movw	r24, r16
    3b1a:	b7 01       	movw	r22, r14
    3b1c:	a6 01       	movw	r20, r12
    3b1e:	0e 94 9e 13 	call	0x273c	; 0x273c <clust2sect>
    3b22:	f8 01       	movw	r30, r16
    3b24:	62 a7       	std	Z+42, r22	; 0x2a
    3b26:	73 a7       	std	Z+43, r23	; 0x2b
    3b28:	84 a7       	std	Z+44, r24	; 0x2c
    3b2a:	95 a7       	std	Z+45, r25	; 0x2d
    3b2c:	00 e0       	ldi	r16, 0x00	; 0
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
    3b2e:	11 e0       	ldi	r17, 0x01	; 1
    3b30:	19 c0       	rjmp	.+50     	; 0x3b64 <dir_next+0x19a>
    3b32:	14 83       	std	Z+4, r17	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    3b34:	88 81       	ld	r24, Y
    3b36:	99 81       	ldd	r25, Y+1	; 0x01
    3b38:	40 e0       	ldi	r20, 0x00	; 0
    3b3a:	50 e0       	ldi	r21, 0x00	; 0
    3b3c:	60 e0       	ldi	r22, 0x00	; 0
    3b3e:	70 e0       	ldi	r23, 0x00	; 0
    3b40:	3d d9       	rcall	.-3462   	; 0x2dbc <move_window>
    3b42:	88 23       	and	r24, r24
    3b44:	09 f0       	breq	.+2      	; 0x3b48 <dir_next+0x17e>
    3b46:	44 c0       	rjmp	.+136    	; 0x3bd0 <dir_next+0x206>
						dj->fs->winsect++;
    3b48:	e8 81       	ld	r30, Y
    3b4a:	f9 81       	ldd	r31, Y+1	; 0x01
    3b4c:	82 a5       	ldd	r24, Z+42	; 0x2a
    3b4e:	93 a5       	ldd	r25, Z+43	; 0x2b
    3b50:	a4 a5       	ldd	r26, Z+44	; 0x2c
    3b52:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3b54:	01 96       	adiw	r24, 0x01	; 1
    3b56:	a1 1d       	adc	r26, r1
    3b58:	b1 1d       	adc	r27, r1
    3b5a:	82 a7       	std	Z+42, r24	; 0x2a
    3b5c:	93 a7       	std	Z+43, r25	; 0x2b
    3b5e:	a4 a7       	std	Z+44, r26	; 0x2c
    3b60:	b5 a7       	std	Z+45, r27	; 0x2d
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    3b62:	0f 5f       	subi	r16, 0xFF	; 255
    3b64:	e8 81       	ld	r30, Y
    3b66:	f9 81       	ldd	r31, Y+1	; 0x01
    3b68:	82 81       	ldd	r24, Z+2	; 0x02
    3b6a:	08 17       	cp	r16, r24
    3b6c:	10 f3       	brcs	.-60     	; 0x3b32 <dir_next+0x168>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    3b6e:	82 a5       	ldd	r24, Z+42	; 0x2a
    3b70:	93 a5       	ldd	r25, Z+43	; 0x2b
    3b72:	a4 a5       	ldd	r26, Z+44	; 0x2c
    3b74:	b5 a5       	ldd	r27, Z+45	; 0x2d
    3b76:	80 1b       	sub	r24, r16
    3b78:	91 09       	sbc	r25, r1
    3b7a:	a1 09       	sbc	r26, r1
    3b7c:	b1 09       	sbc	r27, r1
    3b7e:	82 a7       	std	Z+42, r24	; 0x2a
    3b80:	93 a7       	std	Z+43, r25	; 0x2b
    3b82:	a4 a7       	std	Z+44, r26	; 0x2c
    3b84:	b5 a7       	std	Z+45, r27	; 0x2d
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    3b86:	ca 86       	std	Y+10, r12	; 0x0a
    3b88:	db 86       	std	Y+11, r13	; 0x0b
    3b8a:	ec 86       	std	Y+12, r14	; 0x0c
    3b8c:	fd 86       	std	Y+13, r15	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
    3b8e:	88 81       	ld	r24, Y
    3b90:	99 81       	ldd	r25, Y+1	; 0x01
    3b92:	b7 01       	movw	r22, r14
    3b94:	a6 01       	movw	r20, r12
    3b96:	0e 94 9e 13 	call	0x273c	; 0x273c <clust2sect>
    3b9a:	6e 87       	std	Y+14, r22	; 0x0e
    3b9c:	7f 87       	std	Y+15, r23	; 0x0f
    3b9e:	88 8b       	std	Y+16, r24	; 0x10
    3ba0:	99 8b       	std	Y+17, r25	; 0x11
			}
		}
	}

	dj->index = i;
    3ba2:	bd 82       	std	Y+5, r11	; 0x05
    3ba4:	ac 82       	std	Y+4, r10	; 0x04
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
    3ba6:	a5 e0       	ldi	r26, 0x05	; 5
    3ba8:	88 0c       	add	r8, r8
    3baa:	99 1c       	adc	r9, r9
    3bac:	aa 95       	dec	r26
    3bae:	e1 f7       	brne	.-8      	; 0x3ba8 <dir_next+0x1de>
    3bb0:	8e e2       	ldi	r24, 0x2E	; 46
    3bb2:	90 e0       	ldi	r25, 0x00	; 0
    3bb4:	88 0e       	add	r8, r24
    3bb6:	99 1e       	adc	r9, r25
    3bb8:	88 81       	ld	r24, Y
    3bba:	99 81       	ldd	r25, Y+1	; 0x01
    3bbc:	88 0d       	add	r24, r8
    3bbe:	99 1d       	adc	r25, r9
    3bc0:	9b 8b       	std	Y+19, r25	; 0x13
    3bc2:	8a 8b       	std	Y+18, r24	; 0x12
    3bc4:	80 e0       	ldi	r24, 0x00	; 0
    3bc6:	05 c0       	rjmp	.+10     	; 0x3bd2 <dir_next+0x208>

	return FR_OK;
    3bc8:	84 e0       	ldi	r24, 0x04	; 4
    3bca:	03 c0       	rjmp	.+6      	; 0x3bd2 <dir_next+0x208>
    3bcc:	82 e0       	ldi	r24, 0x02	; 2
    3bce:	01 c0       	rjmp	.+2      	; 0x3bd2 <dir_next+0x208>
    3bd0:	81 e0       	ldi	r24, 0x01	; 1
}
    3bd2:	df 91       	pop	r29
    3bd4:	cf 91       	pop	r28
    3bd6:	1f 91       	pop	r17
    3bd8:	0f 91       	pop	r16
    3bda:	ff 90       	pop	r15
    3bdc:	ef 90       	pop	r14
    3bde:	df 90       	pop	r13
    3be0:	cf 90       	pop	r12
    3be2:	bf 90       	pop	r11
    3be4:	af 90       	pop	r10
    3be6:	9f 90       	pop	r9
    3be8:	8f 90       	pop	r8
    3bea:	08 95       	ret

00003bec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    3bec:	9f 92       	push	r9
    3bee:	af 92       	push	r10
    3bf0:	bf 92       	push	r11
    3bf2:	cf 92       	push	r12
    3bf4:	df 92       	push	r13
    3bf6:	ef 92       	push	r14
    3bf8:	ff 92       	push	r15
    3bfa:	0f 93       	push	r16
    3bfc:	1f 93       	push	r17
    3bfe:	cf 93       	push	r28
    3c00:	df 93       	push	r29
    3c02:	ec 01       	movw	r28, r24
    3c04:	5b 01       	movw	r10, r22
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    3c06:	fb 01       	movw	r30, r22
    3c08:	80 81       	ld	r24, Z
    3c0a:	8f 32       	cpi	r24, 0x2F	; 47
    3c0c:	11 f0       	breq	.+4      	; 0x3c12 <follow_path+0x26>
    3c0e:	8c 35       	cpi	r24, 0x5C	; 92
    3c10:	19 f4       	brne	.+6      	; 0x3c18 <follow_path+0x2c>
		path++;
    3c12:	08 94       	sec
    3c14:	a1 1c       	adc	r10, r1
    3c16:	b1 1c       	adc	r11, r1
	dj->sclust = 0;						/* Start from the root dir */
    3c18:	1e 82       	std	Y+6, r1	; 0x06
    3c1a:	1f 82       	std	Y+7, r1	; 0x07
    3c1c:	18 86       	std	Y+8, r1	; 0x08
    3c1e:	19 86       	std	Y+9, r1	; 0x09
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
    3c20:	f5 01       	movw	r30, r10
    3c22:	80 81       	ld	r24, Z
    3c24:	80 32       	cpi	r24, 0x20	; 32
    3c26:	38 f4       	brcc	.+14     	; 0x3c36 <follow_path+0x4a>
		res = dir_sdi(dj, 0);
    3c28:	ce 01       	movw	r24, r28
    3c2a:	60 e0       	ldi	r22, 0x00	; 0
    3c2c:	70 e0       	ldi	r23, 0x00	; 0
    3c2e:	fe da       	rcall	.-2564   	; 0x322c <dir_sdi>
		dj->dir = 0;
    3c30:	1b 8a       	std	Y+19, r1	; 0x13
    3c32:	1a 8a       	std	Y+18, r1	; 0x12
    3c34:	02 c1       	rjmp	.+516    	; 0x3e3a <follow_path+0x24e>
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    3c36:	e5 e0       	ldi	r30, 0x05	; 5
    3c38:	9e 2e       	mov	r9, r30
	BYTE b, c, d, *sfn;
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
    3c3a:	0c 89       	ldd	r16, Y+20	; 0x14
    3c3c:	1d 89       	ldd	r17, Y+21	; 0x15
	mem_set(sfn, ' ', 11);
    3c3e:	c8 01       	movw	r24, r16
    3c40:	60 e2       	ldi	r22, 0x20	; 32
    3c42:	70 e0       	ldi	r23, 0x00	; 0
    3c44:	4b e0       	ldi	r20, 0x0B	; 11
    3c46:	50 e0       	ldi	r21, 0x00	; 0
    3c48:	0e 94 94 13 	call	0x2728	; 0x2728 <mem_set>
    3c4c:	40 e0       	ldi	r20, 0x00	; 0
    3c4e:	50 e0       	ldi	r21, 0x00	; 0
    3c50:	ee 24       	eor	r14, r14
    3c52:	ff 24       	eor	r15, r15
    3c54:	78 e0       	ldi	r23, 0x08	; 8
    3c56:	c7 2e       	mov	r12, r23
    3c58:	d1 2c       	mov	r13, r1
    3c5a:	a0 e0       	ldi	r26, 0x00	; 0
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    3c5c:	f5 01       	movw	r30, r10
    3c5e:	ee 0d       	add	r30, r14
    3c60:	ff 1d       	adc	r31, r15
    3c62:	20 81       	ld	r18, Z
    3c64:	08 94       	sec
    3c66:	e1 1c       	adc	r14, r1
    3c68:	f1 1c       	adc	r15, r1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    3c6a:	21 32       	cpi	r18, 0x21	; 33
    3c6c:	08 f4       	brcc	.+2      	; 0x3c70 <follow_path+0x84>
    3c6e:	66 c0       	rjmp	.+204    	; 0x3d3c <follow_path+0x150>
    3c70:	2f 32       	cpi	r18, 0x2F	; 47
    3c72:	09 f4       	brne	.+2      	; 0x3c76 <follow_path+0x8a>
    3c74:	ee c0       	rjmp	.+476    	; 0x3e52 <follow_path+0x266>
    3c76:	2c 35       	cpi	r18, 0x5C	; 92
    3c78:	09 f4       	brne	.+2      	; 0x3c7c <follow_path+0x90>
    3c7a:	eb c0       	rjmp	.+470    	; 0x3e52 <follow_path+0x266>
		if (c == '.' || i >= ni) {
    3c7c:	2e 32       	cpi	r18, 0x2E	; 46
    3c7e:	19 f0       	breq	.+6      	; 0x3c86 <follow_path+0x9a>
    3c80:	4c 15       	cp	r20, r12
    3c82:	5d 05       	cpc	r21, r13
    3c84:	84 f0       	brlt	.+32     	; 0x3ca6 <follow_path+0xba>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    3c86:	f8 e0       	ldi	r31, 0x08	; 8
    3c88:	cf 16       	cp	r12, r31
    3c8a:	d1 04       	cpc	r13, r1
    3c8c:	09 f0       	breq	.+2      	; 0x3c90 <follow_path+0xa4>
    3c8e:	d0 c0       	rjmp	.+416    	; 0x3e30 <follow_path+0x244>
    3c90:	2e 32       	cpi	r18, 0x2E	; 46
    3c92:	09 f0       	breq	.+2      	; 0x3c96 <follow_path+0xaa>
    3c94:	cd c0       	rjmp	.+410    	; 0x3e30 <follow_path+0x244>
			i = 8; ni = 11;
			b <<= 2; continue;
    3c96:	aa 0f       	add	r26, r26
    3c98:	aa 0f       	add	r26, r26
    3c9a:	48 e0       	ldi	r20, 0x08	; 8
    3c9c:	50 e0       	ldi	r21, 0x00	; 0
    3c9e:	6b e0       	ldi	r22, 0x0B	; 11
    3ca0:	c6 2e       	mov	r12, r22
    3ca2:	d1 2c       	mov	r13, r1
    3ca4:	db cf       	rjmp	.-74     	; 0x3c5c <follow_path+0x70>
		}
		if (c >= 0x80) {				/* Extended char */
    3ca6:	27 fd       	sbrc	r18, 7
#ifdef _EXCVT
			c = excvt[c - 0x80];		/* Convert extend char (SBCS) */
#else
			b |= 3;						/* Eliminate NT flag if extended char is exist */
    3ca8:	a3 60       	ori	r26, 0x03	; 3
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
    3caa:	82 2f       	mov	r24, r18
    3cac:	81 58       	subi	r24, 0x81	; 129
    3cae:	8f 31       	cpi	r24, 0x1F	; 31
    3cb0:	18 f0       	brcs	.+6      	; 0x3cb8 <follow_path+0xcc>
    3cb2:	8f 55       	subi	r24, 0x5F	; 95
    3cb4:	8d 31       	cpi	r24, 0x1D	; 29
    3cb6:	08 f5       	brcc	.+66     	; 0x3cfa <follow_path+0x10e>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    3cb8:	f5 01       	movw	r30, r10
    3cba:	ee 0d       	add	r30, r14
    3cbc:	ff 1d       	adc	r31, r15
    3cbe:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
    3cc0:	83 2f       	mov	r24, r19
    3cc2:	80 54       	subi	r24, 0x40	; 64
    3cc4:	8f 33       	cpi	r24, 0x3F	; 63
    3cc6:	20 f0       	brcs	.+8      	; 0x3cd0 <follow_path+0xe4>
    3cc8:	80 54       	subi	r24, 0x40	; 64
    3cca:	8d 37       	cpi	r24, 0x7D	; 125
    3ccc:	08 f0       	brcs	.+2      	; 0x3cd0 <follow_path+0xe4>
    3cce:	b0 c0       	rjmp	.+352    	; 0x3e30 <follow_path+0x244>
    3cd0:	c6 01       	movw	r24, r12
    3cd2:	01 97       	sbiw	r24, 0x01	; 1
    3cd4:	48 17       	cp	r20, r24
    3cd6:	59 07       	cpc	r21, r25
    3cd8:	0c f0       	brlt	.+2      	; 0x3cdc <follow_path+0xf0>
    3cda:	aa c0       	rjmp	.+340    	; 0x3e30 <follow_path+0x244>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* DBC 1st byte? */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    3cdc:	08 94       	sec
    3cde:	e1 1c       	adc	r14, r1
    3ce0:	f1 1c       	adc	r15, r1
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
    3ce2:	f8 01       	movw	r30, r16
    3ce4:	e4 0f       	add	r30, r20
    3ce6:	f5 1f       	adc	r31, r21
    3ce8:	20 83       	st	Z, r18
    3cea:	ca 01       	movw	r24, r20
    3cec:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
    3cee:	f8 01       	movw	r30, r16
    3cf0:	e8 0f       	add	r30, r24
    3cf2:	f9 1f       	adc	r31, r25
    3cf4:	30 83       	st	Z, r19
    3cf6:	ac 01       	movw	r20, r24
    3cf8:	1e c0       	rjmp	.+60     	; 0x3d36 <follow_path+0x14a>
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    3cfa:	62 2f       	mov	r22, r18
    3cfc:	70 e0       	ldi	r23, 0x00	; 0
    3cfe:	ea e7       	ldi	r30, 0x7A	; 122
    3d00:	f3 e0       	ldi	r31, 0x03	; 3
    3d02:	01 c0       	rjmp	.+2      	; 0x3d06 <follow_path+0x11a>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
    3d04:	31 96       	adiw	r30, 0x01	; 1
    3d06:	80 81       	ld	r24, Z
    3d08:	88 23       	and	r24, r24
    3d0a:	29 f0       	breq	.+10     	; 0x3d16 <follow_path+0x12a>
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	86 17       	cp	r24, r22
    3d10:	97 07       	cpc	r25, r23
    3d12:	c1 f7       	brne	.-16     	; 0x3d04 <follow_path+0x118>
    3d14:	8d c0       	rjmp	.+282    	; 0x3e30 <follow_path+0x244>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
    3d16:	82 2f       	mov	r24, r18
    3d18:	81 54       	subi	r24, 0x41	; 65
    3d1a:	8a 31       	cpi	r24, 0x1A	; 26
    3d1c:	10 f4       	brcc	.+4      	; 0x3d22 <follow_path+0x136>
				b |= 2;
    3d1e:	a2 60       	ori	r26, 0x02	; 2
    3d20:	06 c0       	rjmp	.+12     	; 0x3d2e <follow_path+0x142>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    3d22:	82 2f       	mov	r24, r18
    3d24:	81 56       	subi	r24, 0x61	; 97
    3d26:	8a 31       	cpi	r24, 0x1A	; 26
    3d28:	10 f4       	brcc	.+4      	; 0x3d2e <follow_path+0x142>
					b |= 1; c -= 0x20;
    3d2a:	a1 60       	ori	r26, 0x01	; 1
    3d2c:	20 52       	subi	r18, 0x20	; 32
				}
			}
			sfn[i++] = c;
    3d2e:	f8 01       	movw	r30, r16
    3d30:	e4 0f       	add	r30, r20
    3d32:	f5 1f       	adc	r31, r21
    3d34:	20 83       	st	Z, r18
    3d36:	4f 5f       	subi	r20, 0xFF	; 255
    3d38:	5f 4f       	sbci	r21, 0xFF	; 255
    3d3a:	90 cf       	rjmp	.-224    	; 0x3c5c <follow_path+0x70>
    3d3c:	64 e0       	ldi	r22, 0x04	; 4
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
    3d3e:	45 2b       	or	r20, r21
    3d40:	09 f4       	brne	.+2      	; 0x3d44 <follow_path+0x158>
    3d42:	76 c0       	rjmp	.+236    	; 0x3e30 <follow_path+0x244>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
    3d44:	f8 01       	movw	r30, r16
    3d46:	80 81       	ld	r24, Z
    3d48:	85 3e       	cpi	r24, 0xE5	; 229
    3d4a:	09 f4       	brne	.+2      	; 0x3d4e <follow_path+0x162>
    3d4c:	90 82       	st	Z, r9

	if (ni == 8) b <<= 2;
    3d4e:	f8 e0       	ldi	r31, 0x08	; 8
    3d50:	cf 16       	cp	r12, r31
    3d52:	d1 04       	cpc	r13, r1
    3d54:	11 f4       	brne	.+4      	; 0x3d5a <follow_path+0x16e>
    3d56:	aa 0f       	add	r26, r26
    3d58:	aa 0f       	add	r26, r26
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    3d5a:	2a 2f       	mov	r18, r26
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	c9 01       	movw	r24, r18
    3d60:	83 70       	andi	r24, 0x03	; 3
    3d62:	90 70       	andi	r25, 0x00	; 0
    3d64:	01 97       	sbiw	r24, 0x01	; 1
    3d66:	09 f4       	brne	.+2      	; 0x3d6a <follow_path+0x17e>
    3d68:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    3d6a:	2c 70       	andi	r18, 0x0C	; 12
    3d6c:	30 70       	andi	r19, 0x00	; 0
    3d6e:	24 30       	cpi	r18, 0x04	; 4
    3d70:	31 05       	cpc	r19, r1
    3d72:	09 f4       	brne	.+2      	; 0x3d76 <follow_path+0x18a>
    3d74:	68 60       	ori	r22, 0x08	; 8

	sfn[NS] = c;		/* Store NT flag, File name is created */
    3d76:	f8 01       	movw	r30, r16
    3d78:	63 87       	std	Z+11, r22	; 0x0b
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    3d7a:	ce 01       	movw	r24, r28
    3d7c:	60 e0       	ldi	r22, 0x00	; 0
    3d7e:	70 e0       	ldi	r23, 0x00	; 0
    3d80:	55 da       	rcall	.-2902   	; 0x322c <dir_sdi>
    3d82:	48 2f       	mov	r20, r24
	if (res != FR_OK) return res;
    3d84:	88 23       	and	r24, r24
    3d86:	61 f5       	brne	.+88     	; 0x3de0 <follow_path+0x1f4>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    3d88:	4e 85       	ldd	r20, Y+14	; 0x0e
    3d8a:	5f 85       	ldd	r21, Y+15	; 0x0f
    3d8c:	68 89       	ldd	r22, Y+16	; 0x10
    3d8e:	79 89       	ldd	r23, Y+17	; 0x11
    3d90:	88 81       	ld	r24, Y
    3d92:	99 81       	ldd	r25, Y+1	; 0x01
    3d94:	13 d8       	rcall	.-4058   	; 0x2dbc <move_window>
    3d96:	48 2f       	mov	r20, r24
		if (res != FR_OK) break;
    3d98:	88 23       	and	r24, r24
    3d9a:	11 f5       	brne	.+68     	; 0x3de0 <follow_path+0x1f4>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    3d9c:	ea 89       	ldd	r30, Y+18	; 0x12
    3d9e:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    3da0:	80 81       	ld	r24, Z
    3da2:	88 23       	and	r24, r24
    3da4:	11 f4       	brne	.+4      	; 0x3daa <follow_path+0x1be>
    3da6:	44 e0       	ldi	r20, 0x04	; 4
    3da8:	1b c0       	rjmp	.+54     	; 0x3de0 <follow_path+0x1f4>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    3daa:	83 85       	ldd	r24, Z+11	; 0x0b
    3dac:	83 fd       	sbrc	r24, 3
    3dae:	13 c0       	rjmp	.+38     	; 0x3dd6 <follow_path+0x1ea>
    3db0:	8c 89       	ldd	r24, Y+20	; 0x14
    3db2:	9d 89       	ldd	r25, Y+21	; 0x15
    3db4:	9c 01       	movw	r18, r24
    3db6:	d9 01       	movw	r26, r18
    3db8:	2b e0       	ldi	r18, 0x0B	; 11
    3dba:	30 e0       	ldi	r19, 0x00	; 0
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    3dbc:	21 50       	subi	r18, 0x01	; 1
    3dbe:	30 40       	sbci	r19, 0x00	; 0
    3dc0:	8f ef       	ldi	r24, 0xFF	; 255
    3dc2:	2f 3f       	cpi	r18, 0xFF	; 255
    3dc4:	38 07       	cpc	r19, r24
    3dc6:	61 f0       	breq	.+24     	; 0x3de0 <follow_path+0x1f4>
    3dc8:	90 81       	ld	r25, Z
    3dca:	8c 91       	ld	r24, X
    3dcc:	98 17       	cp	r25, r24
    3dce:	19 f4       	brne	.+6      	; 0x3dd6 <follow_path+0x1ea>
    3dd0:	31 96       	adiw	r30, 0x01	; 1
    3dd2:	11 96       	adiw	r26, 0x01	; 1
    3dd4:	f3 cf       	rjmp	.-26     	; 0x3dbc <follow_path+0x1d0>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    3dd6:	ce 01       	movw	r24, r28
    3dd8:	60 e0       	ldi	r22, 0x00	; 0
    3dda:	70 e0       	ldi	r23, 0x00	; 0
    3ddc:	f6 dd       	rcall	.-1044   	; 0x39ca <dir_next>
    3dde:	d1 cf       	rjmp	.-94     	; 0x3d82 <follow_path+0x196>
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
    3de0:	ec 89       	ldd	r30, Y+20	; 0x14
    3de2:	fd 89       	ldd	r31, Y+21	; 0x15
    3de4:	93 85       	ldd	r25, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
    3de6:	44 23       	and	r20, r20
    3de8:	31 f0       	breq	.+12     	; 0x3df6 <follow_path+0x20a>
    3dea:	84 2f       	mov	r24, r20
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
    3dec:	44 30       	cpi	r20, 0x04	; 4
    3dee:	11 f5       	brne	.+68     	; 0x3e34 <follow_path+0x248>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    3df0:	92 ff       	sbrs	r25, 2
    3df2:	22 c0       	rjmp	.+68     	; 0x3e38 <follow_path+0x24c>
    3df4:	22 c0       	rjmp	.+68     	; 0x3e3a <follow_path+0x24e>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    3df6:	92 fd       	sbrc	r25, 2
    3df8:	1d c0       	rjmp	.+58     	; 0x3e34 <follow_path+0x248>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    3dfa:	ea 89       	ldd	r30, Y+18	; 0x12
    3dfc:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    3dfe:	83 85       	ldd	r24, Z+11	; 0x0b
    3e00:	84 ff       	sbrs	r24, 4
    3e02:	1a c0       	rjmp	.+52     	; 0x3e38 <follow_path+0x24c>
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    3e04:	ae 0c       	add	r10, r14
    3e06:	bf 1c       	adc	r11, r15
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
    3e08:	84 89       	ldd	r24, Z+20	; 0x14
    3e0a:	95 89       	ldd	r25, Z+21	; 0x15
    3e0c:	a0 e0       	ldi	r26, 0x00	; 0
    3e0e:	b0 e0       	ldi	r27, 0x00	; 0
    3e10:	dc 01       	movw	r26, r24
    3e12:	99 27       	eor	r25, r25
    3e14:	88 27       	eor	r24, r24
    3e16:	22 8d       	ldd	r18, Z+26	; 0x1a
    3e18:	33 8d       	ldd	r19, Z+27	; 0x1b
    3e1a:	40 e0       	ldi	r20, 0x00	; 0
    3e1c:	50 e0       	ldi	r21, 0x00	; 0
    3e1e:	82 2b       	or	r24, r18
    3e20:	93 2b       	or	r25, r19
    3e22:	a4 2b       	or	r26, r20
    3e24:	b5 2b       	or	r27, r21
    3e26:	8e 83       	std	Y+6, r24	; 0x06
    3e28:	9f 83       	std	Y+7, r25	; 0x07
    3e2a:	a8 87       	std	Y+8, r26	; 0x08
    3e2c:	b9 87       	std	Y+9, r27	; 0x09
    3e2e:	05 cf       	rjmp	.-502    	; 0x3c3a <follow_path+0x4e>
		}
    3e30:	86 e0       	ldi	r24, 0x06	; 6
    3e32:	03 c0       	rjmp	.+6      	; 0x3e3a <follow_path+0x24e>
    3e34:	84 2f       	mov	r24, r20
    3e36:	01 c0       	rjmp	.+2      	; 0x3e3a <follow_path+0x24e>
    3e38:	85 e0       	ldi	r24, 0x05	; 5
	}

	return res;
}
    3e3a:	df 91       	pop	r29
    3e3c:	cf 91       	pop	r28
    3e3e:	1f 91       	pop	r17
    3e40:	0f 91       	pop	r16
    3e42:	ff 90       	pop	r15
    3e44:	ef 90       	pop	r14
    3e46:	df 90       	pop	r13
    3e48:	cf 90       	pop	r12
    3e4a:	bf 90       	pop	r11
    3e4c:	af 90       	pop	r10
    3e4e:	9f 90       	pop	r9
    3e50:	08 95       	ret
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
    3e52:	60 e0       	ldi	r22, 0x00	; 0
    3e54:	74 cf       	rjmp	.-280    	; 0x3d3e <follow_path+0x152>

00003e56 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    3e56:	ff 92       	push	r15
    3e58:	0f 93       	push	r16
    3e5a:	1f 93       	push	r17
    3e5c:	cf 93       	push	r28
    3e5e:	df 93       	push	r29
    3e60:	ec 01       	movw	r28, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    3e62:	60 e0       	ldi	r22, 0x00	; 0
    3e64:	70 e0       	ldi	r23, 0x00	; 0
    3e66:	e2 d9       	rcall	.-3132   	; 0x322c <dir_sdi>
    3e68:	f8 2e       	mov	r15, r24
	if (res == FR_OK) {
    3e6a:	88 23       	and	r24, r24
    3e6c:	59 f5       	brne	.+86     	; 0x3ec4 <dir_register+0x6e>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    3e6e:	4e 85       	ldd	r20, Y+14	; 0x0e
    3e70:	5f 85       	ldd	r21, Y+15	; 0x0f
    3e72:	68 89       	ldd	r22, Y+16	; 0x10
    3e74:	79 89       	ldd	r23, Y+17	; 0x11
    3e76:	88 81       	ld	r24, Y
    3e78:	99 81       	ldd	r25, Y+1	; 0x01
    3e7a:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <move_window>
    3e7e:	f8 2e       	mov	r15, r24
			if (res != FR_OK) break;
    3e80:	88 23       	and	r24, r24
    3e82:	01 f5       	brne	.+64     	; 0x3ec4 <dir_register+0x6e>
			c = *dj->dir;
    3e84:	ea 89       	ldd	r30, Y+18	; 0x12
    3e86:	fb 89       	ldd	r31, Y+19	; 0x13
    3e88:	e0 81       	ld	r30, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
    3e8a:	e5 3e       	cpi	r30, 0xE5	; 229
    3e8c:	11 f1       	breq	.+68     	; 0x3ed2 <dir_register+0x7c>
    3e8e:	ee 23       	and	r30, r30
    3e90:	01 f1       	breq	.+64     	; 0x3ed2 <dir_register+0x7c>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    3e92:	ce 01       	movw	r24, r28
    3e94:	61 e0       	ldi	r22, 0x01	; 1
    3e96:	70 e0       	ldi	r23, 0x00	; 0
    3e98:	98 dd       	rcall	.-1232   	; 0x39ca <dir_next>
    3e9a:	e6 cf       	rjmp	.-52     	; 0x3e68 <dir_register+0x12>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
    3e9c:	0a 89       	ldd	r16, Y+18	; 0x12
    3e9e:	1b 89       	ldd	r17, Y+19	; 0x13
			mem_set(dir, 0, 32);		/* Clean the entry */
    3ea0:	c8 01       	movw	r24, r16
    3ea2:	60 e0       	ldi	r22, 0x00	; 0
    3ea4:	70 e0       	ldi	r23, 0x00	; 0
    3ea6:	40 e2       	ldi	r20, 0x20	; 32
    3ea8:	50 e0       	ldi	r21, 0x00	; 0
    3eaa:	0e 94 94 13 	call	0x2728	; 0x2728 <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    3eae:	6c 89       	ldd	r22, Y+20	; 0x14
    3eb0:	7d 89       	ldd	r23, Y+21	; 0x15
    3eb2:	c8 01       	movw	r24, r16
    3eb4:	4b e0       	ldi	r20, 0x0B	; 11
    3eb6:	50 e0       	ldi	r21, 0x00	; 0
    3eb8:	0e 94 60 13 	call	0x26c0	; 0x26c0 <mem_cpy>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
    3ebc:	e8 81       	ld	r30, Y
    3ebe:	f9 81       	ldd	r31, Y+1	; 0x01
    3ec0:	81 e0       	ldi	r24, 0x01	; 1
    3ec2:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
    3ec4:	8f 2d       	mov	r24, r15
    3ec6:	df 91       	pop	r29
    3ec8:	cf 91       	pop	r28
    3eca:	1f 91       	pop	r17
    3ecc:	0f 91       	pop	r16
    3ece:	ff 90       	pop	r15
    3ed0:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
    3ed2:	4e 85       	ldd	r20, Y+14	; 0x0e
    3ed4:	5f 85       	ldd	r21, Y+15	; 0x0f
    3ed6:	68 89       	ldd	r22, Y+16	; 0x10
    3ed8:	79 89       	ldd	r23, Y+17	; 0x11
    3eda:	88 81       	ld	r24, Y
    3edc:	99 81       	ldd	r25, Y+1	; 0x01
    3ede:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <move_window>
    3ee2:	f8 2e       	mov	r15, r24
		if (res == FR_OK) {
    3ee4:	88 23       	and	r24, r24
    3ee6:	71 f7       	brne	.-36     	; 0x3ec4 <dir_register+0x6e>
    3ee8:	d9 cf       	rjmp	.-78     	; 0x3e9c <dir_register+0x46>

00003eea <f_getfree>:
FRESULT f_getfree (
	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
    3eea:	3f 92       	push	r3
    3eec:	4f 92       	push	r4
    3eee:	5f 92       	push	r5
    3ef0:	6f 92       	push	r6
    3ef2:	7f 92       	push	r7
    3ef4:	8f 92       	push	r8
    3ef6:	9f 92       	push	r9
    3ef8:	af 92       	push	r10
    3efa:	bf 92       	push	r11
    3efc:	cf 92       	push	r12
    3efe:	df 92       	push	r13
    3f00:	ef 92       	push	r14
    3f02:	ff 92       	push	r15
    3f04:	0f 93       	push	r16
    3f06:	1f 93       	push	r17
    3f08:	df 93       	push	r29
    3f0a:	cf 93       	push	r28
    3f0c:	00 d0       	rcall	.+0      	; 0x3f0e <f_getfree+0x24>
    3f0e:	00 d0       	rcall	.+0      	; 0x3f10 <f_getfree+0x26>
    3f10:	cd b7       	in	r28, 0x3d	; 61
    3f12:	de b7       	in	r29, 0x3e	; 62
    3f14:	9a 83       	std	Y+2, r25	; 0x02
    3f16:	89 83       	std	Y+1, r24	; 0x01
    3f18:	7c 83       	std	Y+4, r23	; 0x04
    3f1a:	6b 83       	std	Y+3, r22	; 0x03
    3f1c:	2a 01       	movw	r4, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
    3f1e:	ce 01       	movw	r24, r28
    3f20:	01 96       	adiw	r24, 0x01	; 1
    3f22:	ba 01       	movw	r22, r20
    3f24:	40 e0       	ldi	r20, 0x00	; 0
    3f26:	0e 94 43 14 	call	0x2886	; 0x2886 <chk_mounted>
    3f2a:	68 2f       	mov	r22, r24
	if (res == FR_OK) {
    3f2c:	88 23       	and	r24, r24
    3f2e:	09 f0       	breq	.+2      	; 0x3f32 <f_getfree+0x48>
    3f30:	c1 c0       	rjmp	.+386    	; 0x40b4 <f_getfree+0x1ca>
		/* If free_clust is valid, return it without full cluster scan */
		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
    3f32:	d2 01       	movw	r26, r4
    3f34:	ed 91       	ld	r30, X+
    3f36:	fc 91       	ld	r31, X
    3f38:	26 85       	ldd	r18, Z+14	; 0x0e
    3f3a:	37 85       	ldd	r19, Z+15	; 0x0f
    3f3c:	40 89       	ldd	r20, Z+16	; 0x10
    3f3e:	51 89       	ldd	r21, Z+17	; 0x11
    3f40:	e6 88       	ldd	r14, Z+22	; 0x16
    3f42:	f7 88       	ldd	r15, Z+23	; 0x17
    3f44:	00 8d       	ldd	r16, Z+24	; 0x18
    3f46:	11 8d       	ldd	r17, Z+25	; 0x19
    3f48:	d8 01       	movw	r26, r16
    3f4a:	c7 01       	movw	r24, r14
    3f4c:	02 97       	sbiw	r24, 0x02	; 2
    3f4e:	a1 09       	sbc	r26, r1
    3f50:	b1 09       	sbc	r27, r1
    3f52:	82 17       	cp	r24, r18
    3f54:	93 07       	cpc	r25, r19
    3f56:	a4 07       	cpc	r26, r20
    3f58:	b5 07       	cpc	r27, r21
    3f5a:	38 f0       	brcs	.+14     	; 0x3f6a <f_getfree+0x80>
			*nclst = (*fatfs)->free_clust;
    3f5c:	eb 81       	ldd	r30, Y+3	; 0x03
    3f5e:	fc 81       	ldd	r31, Y+4	; 0x04
    3f60:	20 83       	st	Z, r18
    3f62:	31 83       	std	Z+1, r19	; 0x01
    3f64:	42 83       	std	Z+2, r20	; 0x02
    3f66:	53 83       	std	Z+3, r21	; 0x03
    3f68:	a5 c0       	rjmp	.+330    	; 0x40b4 <f_getfree+0x1ca>
		} else {
			/* Get number of free clusters */
			fat = (*fatfs)->fs_type;
    3f6a:	30 80       	ld	r3, Z
			n = 0;
			if (fat == FS_FAT12) {
    3f6c:	21 e0       	ldi	r18, 0x01	; 1
    3f6e:	32 16       	cp	r3, r18
    3f70:	d9 f5       	brne	.+118    	; 0x3fe8 <f_getfree+0xfe>
    3f72:	aa 24       	eor	r10, r10
    3f74:	bb 24       	eor	r11, r11
    3f76:	65 01       	movw	r12, r10
    3f78:	32 e0       	ldi	r19, 0x02	; 2
    3f7a:	e3 2e       	mov	r14, r19
    3f7c:	f1 2c       	mov	r15, r1
    3f7e:	01 2d       	mov	r16, r1
    3f80:	11 2d       	mov	r17, r1
				clst = 2;
				do {
					stat = get_fat(*fatfs, clst);
    3f82:	d2 01       	movw	r26, r4
    3f84:	8d 91       	ld	r24, X+
    3f86:	9c 91       	ld	r25, X
    3f88:	b8 01       	movw	r22, r16
    3f8a:	a7 01       	movw	r20, r14
    3f8c:	80 d8       	rcall	.-3840   	; 0x308e <get_fat>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    3f8e:	6f 3f       	cpi	r22, 0xFF	; 255
    3f90:	bf ef       	ldi	r27, 0xFF	; 255
    3f92:	7b 07       	cpc	r23, r27
    3f94:	bf ef       	ldi	r27, 0xFF	; 255
    3f96:	8b 07       	cpc	r24, r27
    3f98:	bf ef       	ldi	r27, 0xFF	; 255
    3f9a:	9b 07       	cpc	r25, r27
    3f9c:	11 f4       	brne	.+4      	; 0x3fa2 <f_getfree+0xb8>
    3f9e:	91 e0       	ldi	r25, 0x01	; 1
    3fa0:	73 c0       	rjmp	.+230    	; 0x4088 <f_getfree+0x19e>
					if (stat == 1) { res = FR_INT_ERR; break; }
    3fa2:	61 30       	cpi	r22, 0x01	; 1
    3fa4:	71 05       	cpc	r23, r1
    3fa6:	81 05       	cpc	r24, r1
    3fa8:	91 05       	cpc	r25, r1
    3faa:	11 f4       	brne	.+4      	; 0x3fb0 <f_getfree+0xc6>
    3fac:	92 e0       	ldi	r25, 0x02	; 2
    3fae:	6c c0       	rjmp	.+216    	; 0x4088 <f_getfree+0x19e>
					if (stat == 0) n++;
    3fb0:	61 15       	cp	r22, r1
    3fb2:	71 05       	cpc	r23, r1
    3fb4:	81 05       	cpc	r24, r1
    3fb6:	91 05       	cpc	r25, r1
    3fb8:	29 f4       	brne	.+10     	; 0x3fc4 <f_getfree+0xda>
    3fba:	08 94       	sec
    3fbc:	a1 1c       	adc	r10, r1
    3fbe:	b1 1c       	adc	r11, r1
    3fc0:	c1 1c       	adc	r12, r1
    3fc2:	d1 1c       	adc	r13, r1
				} while (++clst < (*fatfs)->n_fatent);
    3fc4:	08 94       	sec
    3fc6:	e1 1c       	adc	r14, r1
    3fc8:	f1 1c       	adc	r15, r1
    3fca:	01 1d       	adc	r16, r1
    3fcc:	11 1d       	adc	r17, r1
    3fce:	d2 01       	movw	r26, r4
    3fd0:	ed 91       	ld	r30, X+
    3fd2:	fc 91       	ld	r31, X
    3fd4:	86 89       	ldd	r24, Z+22	; 0x16
    3fd6:	97 89       	ldd	r25, Z+23	; 0x17
    3fd8:	a0 8d       	ldd	r26, Z+24	; 0x18
    3fda:	b1 8d       	ldd	r27, Z+25	; 0x19
    3fdc:	e8 16       	cp	r14, r24
    3fde:	f9 06       	cpc	r15, r25
    3fe0:	0a 07       	cpc	r16, r26
    3fe2:	1b 07       	cpc	r17, r27
    3fe4:	70 f2       	brcs	.-100    	; 0x3f82 <f_getfree+0x98>
    3fe6:	4f c0       	rjmp	.+158    	; 0x4086 <f_getfree+0x19c>
			} else {
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
    3fe8:	66 8c       	ldd	r6, Z+30	; 0x1e
    3fea:	77 8c       	ldd	r7, Z+31	; 0x1f
    3fec:	80 a0       	ldd	r8, Z+32	; 0x20
    3fee:	91 a0       	ldd	r9, Z+33	; 0x21
    3ff0:	aa 24       	eor	r10, r10
    3ff2:	bb 24       	eor	r11, r11
    3ff4:	65 01       	movw	r12, r10
    3ff6:	20 e0       	ldi	r18, 0x00	; 0
    3ff8:	30 e0       	ldi	r19, 0x00	; 0
    3ffa:	e0 e0       	ldi	r30, 0x00	; 0
    3ffc:	f0 e0       	ldi	r31, 0x00	; 0
				i = 0; p = 0;
				do {
					if (!i) {
    3ffe:	21 15       	cp	r18, r1
    4000:	31 05       	cpc	r19, r1
    4002:	a9 f4       	brne	.+42     	; 0x402e <f_getfree+0x144>
						res = move_window(*fatfs, sect++);
    4004:	f2 01       	movw	r30, r4
    4006:	80 81       	ld	r24, Z
    4008:	91 81       	ldd	r25, Z+1	; 0x01
    400a:	b4 01       	movw	r22, r8
    400c:	a3 01       	movw	r20, r6
    400e:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <move_window>
    4012:	98 2f       	mov	r25, r24
						if (res != FR_OK) break;
    4014:	88 23       	and	r24, r24
    4016:	c1 f5       	brne	.+112    	; 0x4088 <f_getfree+0x19e>
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(*fatfs, sect++);
    4018:	08 94       	sec
    401a:	61 1c       	adc	r6, r1
    401c:	71 1c       	adc	r7, r1
    401e:	81 1c       	adc	r8, r1
    4020:	91 1c       	adc	r9, r1
						if (res != FR_OK) break;
						p = (*fatfs)->win;
    4022:	d2 01       	movw	r26, r4
    4024:	ed 91       	ld	r30, X+
    4026:	fc 91       	ld	r31, X
    4028:	be 96       	adiw	r30, 0x2e	; 46
    402a:	20 e0       	ldi	r18, 0x00	; 0
    402c:	32 e0       	ldi	r19, 0x02	; 2
						i = SS(*fatfs);
					}
					if (fat == FS_FAT16) {
    402e:	b2 e0       	ldi	r27, 0x02	; 2
    4030:	3b 16       	cp	r3, r27
    4032:	69 f4       	brne	.+26     	; 0x404e <f_getfree+0x164>
						if (LD_WORD(p) == 0) n++;
    4034:	80 81       	ld	r24, Z
    4036:	91 81       	ldd	r25, Z+1	; 0x01
    4038:	89 2b       	or	r24, r25
    403a:	29 f4       	brne	.+10     	; 0x4046 <f_getfree+0x15c>
    403c:	08 94       	sec
    403e:	a1 1c       	adc	r10, r1
    4040:	b1 1c       	adc	r11, r1
    4042:	c1 1c       	adc	r12, r1
    4044:	d1 1c       	adc	r13, r1
						p += 2; i -= 2;
    4046:	32 96       	adiw	r30, 0x02	; 2
    4048:	22 50       	subi	r18, 0x02	; 2
    404a:	30 40       	sbci	r19, 0x00	; 0
    404c:	11 c0       	rjmp	.+34     	; 0x4070 <f_getfree+0x186>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
    404e:	80 81       	ld	r24, Z
    4050:	91 81       	ldd	r25, Z+1	; 0x01
    4052:	a2 81       	ldd	r26, Z+2	; 0x02
    4054:	b3 81       	ldd	r27, Z+3	; 0x03
    4056:	bf 70       	andi	r27, 0x0F	; 15
    4058:	00 97       	sbiw	r24, 0x00	; 0
    405a:	a1 05       	cpc	r26, r1
    405c:	b1 05       	cpc	r27, r1
    405e:	29 f4       	brne	.+10     	; 0x406a <f_getfree+0x180>
    4060:	08 94       	sec
    4062:	a1 1c       	adc	r10, r1
    4064:	b1 1c       	adc	r11, r1
    4066:	c1 1c       	adc	r12, r1
    4068:	d1 1c       	adc	r13, r1
						p += 4; i -= 4;
    406a:	34 96       	adiw	r30, 0x04	; 4
    406c:	24 50       	subi	r18, 0x04	; 4
    406e:	30 40       	sbci	r19, 0x00	; 0
					}
				} while (--clst);
    4070:	08 94       	sec
    4072:	e1 08       	sbc	r14, r1
    4074:	f1 08       	sbc	r15, r1
    4076:	01 09       	sbc	r16, r1
    4078:	11 09       	sbc	r17, r1
    407a:	e1 14       	cp	r14, r1
    407c:	f1 04       	cpc	r15, r1
    407e:	01 05       	cpc	r16, r1
    4080:	11 05       	cpc	r17, r1
    4082:	09 f0       	breq	.+2      	; 0x4086 <f_getfree+0x19c>
    4084:	bc cf       	rjmp	.-136    	; 0x3ffe <f_getfree+0x114>
    4086:	90 e0       	ldi	r25, 0x00	; 0
			}
			(*fatfs)->free_clust = n;
    4088:	d2 01       	movw	r26, r4
    408a:	ed 91       	ld	r30, X+
    408c:	fc 91       	ld	r31, X
    408e:	a6 86       	std	Z+14, r10	; 0x0e
    4090:	b7 86       	std	Z+15, r11	; 0x0f
    4092:	c0 8a       	std	Z+16, r12	; 0x10
    4094:	d1 8a       	std	Z+17, r13	; 0x11
			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
    4096:	b3 e0       	ldi	r27, 0x03	; 3
    4098:	3b 16       	cp	r3, r27
    409a:	29 f4       	brne	.+10     	; 0x40a6 <f_getfree+0x1bc>
    409c:	d2 01       	movw	r26, r4
    409e:	ed 91       	ld	r30, X+
    40a0:	fc 91       	ld	r31, X
    40a2:	81 e0       	ldi	r24, 0x01	; 1
    40a4:	85 83       	std	Z+5, r24	; 0x05
			*nclst = n;
    40a6:	eb 81       	ldd	r30, Y+3	; 0x03
    40a8:	fc 81       	ldd	r31, Y+4	; 0x04
    40aa:	a0 82       	st	Z, r10
    40ac:	b1 82       	std	Z+1, r11	; 0x01
    40ae:	c2 82       	std	Z+2, r12	; 0x02
    40b0:	d3 82       	std	Z+3, r13	; 0x03
    40b2:	69 2f       	mov	r22, r25
		}
	}
	LEAVE_FF(*fatfs, res);
}
    40b4:	86 2f       	mov	r24, r22
    40b6:	0f 90       	pop	r0
    40b8:	0f 90       	pop	r0
    40ba:	0f 90       	pop	r0
    40bc:	0f 90       	pop	r0
    40be:	cf 91       	pop	r28
    40c0:	df 91       	pop	r29
    40c2:	1f 91       	pop	r17
    40c4:	0f 91       	pop	r16
    40c6:	ff 90       	pop	r15
    40c8:	ef 90       	pop	r14
    40ca:	df 90       	pop	r13
    40cc:	cf 90       	pop	r12
    40ce:	bf 90       	pop	r11
    40d0:	af 90       	pop	r10
    40d2:	9f 90       	pop	r9
    40d4:	8f 90       	pop	r8
    40d6:	7f 90       	pop	r7
    40d8:	6f 90       	pop	r6
    40da:	5f 90       	pop	r5
    40dc:	4f 90       	pop	r4
    40de:	3f 90       	pop	r3
    40e0:	08 95       	ret

000040e2 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    40e2:	2f 92       	push	r2
    40e4:	3f 92       	push	r3
    40e6:	4f 92       	push	r4
    40e8:	5f 92       	push	r5
    40ea:	6f 92       	push	r6
    40ec:	7f 92       	push	r7
    40ee:	8f 92       	push	r8
    40f0:	9f 92       	push	r9
    40f2:	af 92       	push	r10
    40f4:	bf 92       	push	r11
    40f6:	cf 92       	push	r12
    40f8:	df 92       	push	r13
    40fa:	ef 92       	push	r14
    40fc:	ff 92       	push	r15
    40fe:	0f 93       	push	r16
    4100:	1f 93       	push	r17
    4102:	cf 93       	push	r28
    4104:	df 93       	push	r29
    4106:	ec 01       	movw	r28, r24
    4108:	16 2f       	mov	r17, r22
    410a:	07 2f       	mov	r16, r23
    410c:	3a 01       	movw	r6, r20
    410e:	19 01       	movw	r2, r18
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    4110:	f9 01       	movw	r30, r18
    4112:	11 82       	std	Z+1, r1	; 0x01
    4114:	10 82       	st	Z, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
    4116:	6a 81       	ldd	r22, Y+2	; 0x02
    4118:	7b 81       	ldd	r23, Y+3	; 0x03
    411a:	88 81       	ld	r24, Y
    411c:	99 81       	ldd	r25, Y+1	; 0x01
    411e:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <validate>
    4122:	88 2e       	mov	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    4124:	88 23       	and	r24, r24
    4126:	09 f0       	breq	.+2      	; 0x412a <f_write+0x48>
    4128:	74 c1       	rjmp	.+744    	; 0x4412 <f_write+0x330>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
    412a:	8c 81       	ldd	r24, Y+4	; 0x04
    412c:	87 fd       	sbrc	r24, 7
    412e:	67 c0       	rjmp	.+206    	; 0x41fe <f_write+0x11c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
    4130:	81 fd       	sbrc	r24, 1
    4132:	03 c0       	rjmp	.+6      	; 0x413a <f_write+0x58>
    4134:	77 e0       	ldi	r23, 0x07	; 7
    4136:	87 2e       	mov	r8, r23
    4138:	6c c1       	rjmp	.+728    	; 0x4412 <f_write+0x330>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
    413a:	2a 85       	ldd	r18, Y+10	; 0x0a
    413c:	3b 85       	ldd	r19, Y+11	; 0x0b
    413e:	4c 85       	ldd	r20, Y+12	; 0x0c
    4140:	5d 85       	ldd	r21, Y+13	; 0x0d
    4142:	c3 01       	movw	r24, r6
    4144:	a0 e0       	ldi	r26, 0x00	; 0
    4146:	b0 e0       	ldi	r27, 0x00	; 0
    4148:	82 0f       	add	r24, r18
    414a:	93 1f       	adc	r25, r19
    414c:	a4 1f       	adc	r26, r20
    414e:	b5 1f       	adc	r27, r21
    4150:	82 17       	cp	r24, r18
    4152:	93 07       	cpc	r25, r19
    4154:	a4 07       	cpc	r26, r20
    4156:	b5 07       	cpc	r27, r21
    4158:	10 f4       	brcc	.+4      	; 0x415e <f_write+0x7c>
    415a:	66 24       	eor	r6, r6
    415c:	77 24       	eor	r7, r7
)
{
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    415e:	81 2f       	mov	r24, r17
    4160:	90 2f       	mov	r25, r16
    4162:	9c 01       	movw	r18, r24
    4164:	29 01       	movw	r4, r18
    4166:	3d c1       	rjmp	.+634    	; 0x43e2 <f_write+0x300>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
    4168:	2e 81       	ldd	r18, Y+6	; 0x06
    416a:	3f 81       	ldd	r19, Y+7	; 0x07
    416c:	48 85       	ldd	r20, Y+8	; 0x08
    416e:	59 85       	ldd	r21, Y+9	; 0x09
    4170:	da 01       	movw	r26, r20
    4172:	c9 01       	movw	r24, r18
    4174:	91 70       	andi	r25, 0x01	; 1
    4176:	a0 70       	andi	r26, 0x00	; 0
    4178:	b0 70       	andi	r27, 0x00	; 0
    417a:	00 97       	sbiw	r24, 0x00	; 0
    417c:	a1 05       	cpc	r26, r1
    417e:	b1 05       	cpc	r27, r1
    4180:	09 f0       	breq	.+2      	; 0x4184 <f_write+0xa2>
    4182:	e5 c0       	rjmp	.+458    	; 0x434e <f_write+0x26c>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    4184:	e8 81       	ld	r30, Y
    4186:	f9 81       	ldd	r31, Y+1	; 0x01
    4188:	da 01       	movw	r26, r20
    418a:	c9 01       	movw	r24, r18
    418c:	69 e0       	ldi	r22, 0x09	; 9
    418e:	b6 95       	lsr	r27
    4190:	a7 95       	ror	r26
    4192:	97 95       	ror	r25
    4194:	87 95       	ror	r24
    4196:	6a 95       	dec	r22
    4198:	d1 f7       	brne	.-12     	; 0x418e <f_write+0xac>
    419a:	92 80       	ldd	r9, Z+2	; 0x02
    419c:	9a 94       	dec	r9
    419e:	98 22       	and	r9, r24
			if (!csect) {							/* On the cluster boundary? */
    41a0:	09 f0       	breq	.+2      	; 0x41a4 <f_write+0xc2>
    41a2:	3d c0       	rjmp	.+122    	; 0x421e <f_write+0x13c>
				if (fp->fptr == 0) {				/* On the top of the file? */
    41a4:	21 15       	cp	r18, r1
    41a6:	31 05       	cpc	r19, r1
    41a8:	41 05       	cpc	r20, r1
    41aa:	51 05       	cpc	r21, r1
    41ac:	a1 f4       	brne	.+40     	; 0x41d6 <f_write+0xf4>
					clst = fp->org_clust;			/* Follow from the origin */
    41ae:	6e 85       	ldd	r22, Y+14	; 0x0e
    41b0:	7f 85       	ldd	r23, Y+15	; 0x0f
    41b2:	88 89       	ldd	r24, Y+16	; 0x10
    41b4:	99 89       	ldd	r25, Y+17	; 0x11
					if (clst == 0)					/* When there is no cluster chain, */
    41b6:	61 15       	cp	r22, r1
    41b8:	71 05       	cpc	r23, r1
    41ba:	81 05       	cpc	r24, r1
    41bc:	91 05       	cpc	r25, r1
    41be:	b9 f4       	brne	.+46     	; 0x41ee <f_write+0x10c>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    41c0:	cf 01       	movw	r24, r30
    41c2:	40 e0       	ldi	r20, 0x00	; 0
    41c4:	50 e0       	ldi	r21, 0x00	; 0
    41c6:	60 e0       	ldi	r22, 0x00	; 0
    41c8:	70 e0       	ldi	r23, 0x00	; 0
    41ca:	ef d8       	rcall	.-3618   	; 0x33aa <create_chain>
    41cc:	6e 87       	std	Y+14, r22	; 0x0e
    41ce:	7f 87       	std	Y+15, r23	; 0x0f
    41d0:	88 8b       	std	Y+16, r24	; 0x10
    41d2:	99 8b       	std	Y+17, r25	; 0x11
    41d4:	06 c0       	rjmp	.+12     	; 0x41e2 <f_write+0x100>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or stretch cluster chain */
    41d6:	4a 89       	ldd	r20, Y+18	; 0x12
    41d8:	5b 89       	ldd	r21, Y+19	; 0x13
    41da:	6c 89       	ldd	r22, Y+20	; 0x14
    41dc:	7d 89       	ldd	r23, Y+21	; 0x15
    41de:	cf 01       	movw	r24, r30
    41e0:	e4 d8       	rcall	.-3640   	; 0x33aa <create_chain>
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
    41e2:	61 15       	cp	r22, r1
    41e4:	71 05       	cpc	r23, r1
    41e6:	81 05       	cpc	r24, r1
    41e8:	91 05       	cpc	r25, r1
    41ea:	09 f4       	brne	.+2      	; 0x41ee <f_write+0x10c>
    41ec:	fe c0       	rjmp	.+508    	; 0x43ea <f_write+0x308>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    41ee:	61 30       	cpi	r22, 0x01	; 1
    41f0:	71 05       	cpc	r23, r1
    41f2:	81 05       	cpc	r24, r1
    41f4:	91 05       	cpc	r25, r1
    41f6:	31 f4       	brne	.+12     	; 0x4204 <f_write+0x122>
    41f8:	8c 81       	ldd	r24, Y+4	; 0x04
    41fa:	80 68       	ori	r24, 0x80	; 128
    41fc:	8c 83       	std	Y+4, r24	; 0x04
    41fe:	32 e0       	ldi	r19, 0x02	; 2
    4200:	83 2e       	mov	r8, r19
    4202:	07 c1       	rjmp	.+526    	; 0x4412 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    4204:	6f 3f       	cpi	r22, 0xFF	; 255
    4206:	ff ef       	ldi	r31, 0xFF	; 255
    4208:	7f 07       	cpc	r23, r31
    420a:	ff ef       	ldi	r31, 0xFF	; 255
    420c:	8f 07       	cpc	r24, r31
    420e:	ff ef       	ldi	r31, 0xFF	; 255
    4210:	9f 07       	cpc	r25, r31
    4212:	09 f4       	brne	.+2      	; 0x4216 <f_write+0x134>
    4214:	aa c0       	rjmp	.+340    	; 0x436a <f_write+0x288>
				fp->curr_clust = clst;				/* Update current cluster */
    4216:	6a 8b       	std	Y+18, r22	; 0x12
    4218:	7b 8b       	std	Y+19, r23	; 0x13
    421a:	8c 8b       	std	Y+20, r24	; 0x14
    421c:	9d 8b       	std	Y+21, r25	; 0x15
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
    421e:	e8 81       	ld	r30, Y
    4220:	f9 81       	ldd	r31, Y+1	; 0x01
    4222:	22 a5       	ldd	r18, Z+42	; 0x2a
    4224:	33 a5       	ldd	r19, Z+43	; 0x2b
    4226:	44 a5       	ldd	r20, Z+44	; 0x2c
    4228:	55 a5       	ldd	r21, Z+45	; 0x2d
    422a:	8e 89       	ldd	r24, Y+22	; 0x16
    422c:	9f 89       	ldd	r25, Y+23	; 0x17
    422e:	a8 8d       	ldd	r26, Y+24	; 0x18
    4230:	b9 8d       	ldd	r27, Y+25	; 0x19
    4232:	28 17       	cp	r18, r24
    4234:	39 07       	cpc	r19, r25
    4236:	4a 07       	cpc	r20, r26
    4238:	5b 07       	cpc	r21, r27
    423a:	51 f4       	brne	.+20     	; 0x4250 <f_write+0x16e>
    423c:	cf 01       	movw	r24, r30
    423e:	40 e0       	ldi	r20, 0x00	; 0
    4240:	50 e0       	ldi	r21, 0x00	; 0
    4242:	60 e0       	ldi	r22, 0x00	; 0
    4244:	70 e0       	ldi	r23, 0x00	; 0
    4246:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <move_window>
    424a:	88 23       	and	r24, r24
    424c:	09 f0       	breq	.+2      	; 0x4250 <f_write+0x16e>
    424e:	8d c0       	rjmp	.+282    	; 0x436a <f_write+0x288>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
    4250:	08 81       	ld	r16, Y
    4252:	19 81       	ldd	r17, Y+1	; 0x01
    4254:	4a 89       	ldd	r20, Y+18	; 0x12
    4256:	5b 89       	ldd	r21, Y+19	; 0x13
    4258:	6c 89       	ldd	r22, Y+20	; 0x14
    425a:	7d 89       	ldd	r23, Y+21	; 0x15
    425c:	c8 01       	movw	r24, r16
    425e:	0e 94 9e 13 	call	0x273c	; 0x273c <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    4262:	61 15       	cp	r22, r1
    4264:	71 05       	cpc	r23, r1
    4266:	81 05       	cpc	r24, r1
    4268:	91 05       	cpc	r25, r1
    426a:	31 f2       	breq	.-116    	; 0x41f8 <f_write+0x116>
			sect += csect;
    426c:	6b 01       	movw	r12, r22
    426e:	7c 01       	movw	r14, r24
    4270:	c9 0c       	add	r12, r9
    4272:	d1 1c       	adc	r13, r1
    4274:	e1 1c       	adc	r14, r1
    4276:	f1 1c       	adc	r15, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
    4278:	53 01       	movw	r10, r6
    427a:	ab 2c       	mov	r10, r11
    427c:	bb 24       	eor	r11, r11
    427e:	a6 94       	lsr	r10
			if (cc) {								/* Write maximum contiguous sectors directly */
    4280:	a1 14       	cp	r10, r1
    4282:	b1 04       	cpc	r11, r1
    4284:	09 f4       	brne	.+2      	; 0x4288 <f_write+0x1a6>
    4286:	43 c0       	rjmp	.+134    	; 0x430e <f_write+0x22c>
				if (csect + cc > fp->fs->csize)		/* Clip at cluster boundary */
    4288:	f8 01       	movw	r30, r16
    428a:	22 81       	ldd	r18, Z+2	; 0x02
    428c:	49 2d       	mov	r20, r9
    428e:	50 e0       	ldi	r21, 0x00	; 0
    4290:	c5 01       	movw	r24, r10
    4292:	84 0f       	add	r24, r20
    4294:	95 1f       	adc	r25, r21
    4296:	30 e0       	ldi	r19, 0x00	; 0
    4298:	28 17       	cp	r18, r24
    429a:	39 07       	cpc	r19, r25
    429c:	18 f4       	brcc	.+6      	; 0x42a4 <f_write+0x1c2>
					cc = fp->fs->csize - csect;
    429e:	59 01       	movw	r10, r18
    42a0:	a4 1a       	sub	r10, r20
    42a2:	b5 0a       	sbc	r11, r21
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    42a4:	f8 01       	movw	r30, r16
    42a6:	81 81       	ldd	r24, Z+1	; 0x01
    42a8:	b2 01       	movw	r22, r4
    42aa:	a7 01       	movw	r20, r14
    42ac:	96 01       	movw	r18, r12
    42ae:	0a 2d       	mov	r16, r10
    42b0:	0e 94 49 13 	call	0x2692	; 0x2692 <disk_write>
    42b4:	88 23       	and	r24, r24
    42b6:	09 f0       	breq	.+2      	; 0x42ba <f_write+0x1d8>
    42b8:	58 c0       	rjmp	.+176    	; 0x436a <f_write+0x288>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
    42ba:	e8 81       	ld	r30, Y
    42bc:	f9 81       	ldd	r31, Y+1	; 0x01
    42be:	22 a5       	ldd	r18, Z+42	; 0x2a
    42c0:	33 a5       	ldd	r19, Z+43	; 0x2b
    42c2:	44 a5       	ldd	r20, Z+44	; 0x2c
    42c4:	55 a5       	ldd	r21, Z+45	; 0x2d
    42c6:	2c 19       	sub	r18, r12
    42c8:	3d 09       	sbc	r19, r13
    42ca:	4e 09       	sbc	r20, r14
    42cc:	5f 09       	sbc	r21, r15
    42ce:	c5 01       	movw	r24, r10
    42d0:	a0 e0       	ldi	r26, 0x00	; 0
    42d2:	b0 e0       	ldi	r27, 0x00	; 0
    42d4:	28 17       	cp	r18, r24
    42d6:	39 07       	cpc	r19, r25
    42d8:	4a 07       	cpc	r20, r26
    42da:	5b 07       	cpc	r21, r27
    42dc:	98 f4       	brcc	.+38     	; 0x4304 <f_write+0x222>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    42de:	99 e0       	ldi	r25, 0x09	; 9
    42e0:	22 0f       	add	r18, r18
    42e2:	33 1f       	adc	r19, r19
    42e4:	44 1f       	adc	r20, r20
    42e6:	55 1f       	adc	r21, r21
    42e8:	9a 95       	dec	r25
    42ea:	d1 f7       	brne	.-12     	; 0x42e0 <f_write+0x1fe>
    42ec:	b2 01       	movw	r22, r4
    42ee:	62 0f       	add	r22, r18
    42f0:	73 1f       	adc	r23, r19
    42f2:	cf 01       	movw	r24, r30
    42f4:	8e 96       	adiw	r24, 0x2e	; 46
    42f6:	40 e0       	ldi	r20, 0x00	; 0
    42f8:	52 e0       	ldi	r21, 0x02	; 2
    42fa:	0e 94 60 13 	call	0x26c0	; 0x26c0 <mem_cpy>
					fp->fs->wflag = 0;
    42fe:	e8 81       	ld	r30, Y
    4300:	f9 81       	ldd	r31, Y+1	; 0x01
    4302:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
    4304:	85 01       	movw	r16, r10
    4306:	10 2f       	mov	r17, r16
    4308:	00 27       	eor	r16, r16
    430a:	11 0f       	add	r17, r17
    430c:	50 c0       	rjmp	.+160    	; 0x43ae <f_write+0x2cc>
				continue;
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
    430e:	2e 81       	ldd	r18, Y+6	; 0x06
    4310:	3f 81       	ldd	r19, Y+7	; 0x07
    4312:	48 85       	ldd	r20, Y+8	; 0x08
    4314:	59 85       	ldd	r21, Y+9	; 0x09
    4316:	8a 85       	ldd	r24, Y+10	; 0x0a
    4318:	9b 85       	ldd	r25, Y+11	; 0x0b
    431a:	ac 85       	ldd	r26, Y+12	; 0x0c
    431c:	bd 85       	ldd	r27, Y+13	; 0x0d
    431e:	28 17       	cp	r18, r24
    4320:	39 07       	cpc	r19, r25
    4322:	4a 07       	cpc	r20, r26
    4324:	5b 07       	cpc	r21, r27
    4326:	78 f0       	brcs	.+30     	; 0x4346 <f_write+0x264>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    4328:	c8 01       	movw	r24, r16
    432a:	40 e0       	ldi	r20, 0x00	; 0
    432c:	50 e0       	ldi	r21, 0x00	; 0
    432e:	60 e0       	ldi	r22, 0x00	; 0
    4330:	70 e0       	ldi	r23, 0x00	; 0
    4332:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <move_window>
    4336:	88 23       	and	r24, r24
    4338:	c1 f4       	brne	.+48     	; 0x436a <f_write+0x288>
				fp->fs->winsect = sect;
    433a:	e8 81       	ld	r30, Y
    433c:	f9 81       	ldd	r31, Y+1	; 0x01
    433e:	c2 a6       	std	Z+42, r12	; 0x2a
    4340:	d3 a6       	std	Z+43, r13	; 0x2b
    4342:	e4 a6       	std	Z+44, r14	; 0x2c
    4344:	f5 a6       	std	Z+45, r15	; 0x2d
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    4346:	ce 8a       	std	Y+22, r12	; 0x16
    4348:	df 8a       	std	Y+23, r13	; 0x17
    434a:	e8 8e       	std	Y+24, r14	; 0x18
    434c:	f9 8e       	std	Y+25, r15	; 0x19
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    434e:	ee 80       	ldd	r14, Y+6	; 0x06
    4350:	ff 80       	ldd	r15, Y+7	; 0x07
    4352:	08 85       	ldd	r16, Y+8	; 0x08
    4354:	19 85       	ldd	r17, Y+9	; 0x09
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
    4356:	4e 89       	ldd	r20, Y+22	; 0x16
    4358:	5f 89       	ldd	r21, Y+23	; 0x17
    435a:	68 8d       	ldd	r22, Y+24	; 0x18
    435c:	79 8d       	ldd	r23, Y+25	; 0x19
    435e:	88 81       	ld	r24, Y
    4360:	99 81       	ldd	r25, Y+1	; 0x01
    4362:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <move_window>
    4366:	88 23       	and	r24, r24
    4368:	31 f0       	breq	.+12     	; 0x4376 <f_write+0x294>
			ABORT(fp->fs, FR_DISK_ERR);
    436a:	8c 81       	ldd	r24, Y+4	; 0x04
    436c:	80 68       	ori	r24, 0x80	; 128
    436e:	8c 83       	std	Y+4, r24	; 0x04
    4370:	88 24       	eor	r8, r8
    4372:	83 94       	inc	r8
    4374:	4e c0       	rjmp	.+156    	; 0x4412 <f_write+0x330>
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
    4376:	c7 01       	movw	r24, r14
    4378:	91 70       	andi	r25, 0x01	; 1
    437a:	20 e0       	ldi	r18, 0x00	; 0
    437c:	32 e0       	ldi	r19, 0x02	; 2
    437e:	28 1b       	sub	r18, r24
    4380:	39 0b       	sbc	r19, r25
    4382:	83 01       	movw	r16, r6
    4384:	26 15       	cp	r18, r6
    4386:	37 05       	cpc	r19, r7
    4388:	08 f4       	brcc	.+2      	; 0x438c <f_write+0x2aa>
    438a:	89 01       	movw	r16, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    438c:	2e 81       	ldd	r18, Y+6	; 0x06
    438e:	3f 81       	ldd	r19, Y+7	; 0x07
    4390:	31 70       	andi	r19, 0x01	; 1
    4392:	22 5d       	subi	r18, 0xD2	; 210
    4394:	3f 4f       	sbci	r19, 0xFF	; 255
    4396:	88 81       	ld	r24, Y
    4398:	99 81       	ldd	r25, Y+1	; 0x01
    439a:	82 0f       	add	r24, r18
    439c:	93 1f       	adc	r25, r19
    439e:	b2 01       	movw	r22, r4
    43a0:	a8 01       	movw	r20, r16
    43a2:	0e 94 60 13 	call	0x26c0	; 0x26c0 <mem_cpy>
		fp->fs->wflag = 1;
    43a6:	e8 81       	ld	r30, Y
    43a8:	f9 81       	ldd	r31, Y+1	; 0x01
    43aa:	31 e0       	ldi	r19, 0x01	; 1
    43ac:	34 83       	std	Z+4, r19	; 0x04
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    43ae:	40 0e       	add	r4, r16
    43b0:	51 1e       	adc	r5, r17
    43b2:	c8 01       	movw	r24, r16
    43b4:	a0 e0       	ldi	r26, 0x00	; 0
    43b6:	b0 e0       	ldi	r27, 0x00	; 0
    43b8:	2e 81       	ldd	r18, Y+6	; 0x06
    43ba:	3f 81       	ldd	r19, Y+7	; 0x07
    43bc:	48 85       	ldd	r20, Y+8	; 0x08
    43be:	59 85       	ldd	r21, Y+9	; 0x09
    43c0:	28 0f       	add	r18, r24
    43c2:	39 1f       	adc	r19, r25
    43c4:	4a 1f       	adc	r20, r26
    43c6:	5b 1f       	adc	r21, r27
    43c8:	2e 83       	std	Y+6, r18	; 0x06
    43ca:	3f 83       	std	Y+7, r19	; 0x07
    43cc:	48 87       	std	Y+8, r20	; 0x08
    43ce:	59 87       	std	Y+9, r21	; 0x09
    43d0:	f1 01       	movw	r30, r2
    43d2:	80 81       	ld	r24, Z
    43d4:	91 81       	ldd	r25, Z+1	; 0x01
    43d6:	80 0f       	add	r24, r16
    43d8:	91 1f       	adc	r25, r17
    43da:	91 83       	std	Z+1, r25	; 0x01
    43dc:	80 83       	st	Z, r24
    43de:	60 1a       	sub	r6, r16
    43e0:	71 0a       	sbc	r7, r17
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
    43e2:	61 14       	cp	r6, r1
    43e4:	71 04       	cpc	r7, r1
    43e6:	09 f0       	breq	.+2      	; 0x43ea <f_write+0x308>
    43e8:	bf ce       	rjmp	.-642    	; 0x4168 <f_write+0x86>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    43ea:	2e 81       	ldd	r18, Y+6	; 0x06
    43ec:	3f 81       	ldd	r19, Y+7	; 0x07
    43ee:	48 85       	ldd	r20, Y+8	; 0x08
    43f0:	59 85       	ldd	r21, Y+9	; 0x09
    43f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    43f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    43f6:	ac 85       	ldd	r26, Y+12	; 0x0c
    43f8:	bd 85       	ldd	r27, Y+13	; 0x0d
    43fa:	82 17       	cp	r24, r18
    43fc:	93 07       	cpc	r25, r19
    43fe:	a4 07       	cpc	r26, r20
    4400:	b5 07       	cpc	r27, r21
    4402:	20 f4       	brcc	.+8      	; 0x440c <f_write+0x32a>
    4404:	2a 87       	std	Y+10, r18	; 0x0a
    4406:	3b 87       	std	Y+11, r19	; 0x0b
    4408:	4c 87       	std	Y+12, r20	; 0x0c
    440a:	5d 87       	std	Y+13, r21	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
    440c:	8c 81       	ldd	r24, Y+4	; 0x04
    440e:	80 62       	ori	r24, 0x20	; 32
    4410:	8c 83       	std	Y+4, r24	; 0x04

	LEAVE_FF(fp->fs, FR_OK);
}
    4412:	88 2d       	mov	r24, r8
    4414:	df 91       	pop	r29
    4416:	cf 91       	pop	r28
    4418:	1f 91       	pop	r17
    441a:	0f 91       	pop	r16
    441c:	ff 90       	pop	r15
    441e:	ef 90       	pop	r14
    4420:	df 90       	pop	r13
    4422:	cf 90       	pop	r12
    4424:	bf 90       	pop	r11
    4426:	af 90       	pop	r10
    4428:	9f 90       	pop	r9
    442a:	8f 90       	pop	r8
    442c:	7f 90       	pop	r7
    442e:	6f 90       	pop	r6
    4430:	5f 90       	pop	r5
    4432:	4f 90       	pop	r4
    4434:	3f 90       	pop	r3
    4436:	2f 90       	pop	r2
    4438:	08 95       	ret

0000443a <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    443a:	0f 93       	push	r16
    443c:	1f 93       	push	r17
    443e:	cf 93       	push	r28
    4440:	df 93       	push	r29
    4442:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
    4444:	40 e0       	ldi	r20, 0x00	; 0
    4446:	50 e0       	ldi	r21, 0x00	; 0
    4448:	60 e0       	ldi	r22, 0x00	; 0
    444a:	70 e0       	ldi	r23, 0x00	; 0
    444c:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <move_window>
	if (res == FR_OK) {
    4450:	88 23       	and	r24, r24
    4452:	09 f0       	breq	.+2      	; 0x4456 <sync+0x1c>
    4454:	5c c0       	rjmp	.+184    	; 0x450e <sync+0xd4>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    4456:	88 81       	ld	r24, Y
    4458:	83 30       	cpi	r24, 0x03	; 3
    445a:	09 f0       	breq	.+2      	; 0x445e <sync+0x24>
    445c:	50 c0       	rjmp	.+160    	; 0x44fe <sync+0xc4>
    445e:	8d 81       	ldd	r24, Y+5	; 0x05
    4460:	88 23       	and	r24, r24
    4462:	09 f4       	brne	.+2      	; 0x4466 <sync+0x2c>
    4464:	4c c0       	rjmp	.+152    	; 0x44fe <sync+0xc4>
			fs->winsect = 0;
    4466:	1a a6       	std	Y+42, r1	; 0x2a
    4468:	1b a6       	std	Y+43, r1	; 0x2b
    446a:	1c a6       	std	Y+44, r1	; 0x2c
    446c:	1d a6       	std	Y+45, r1	; 0x2d
			mem_set(fs->win, 0, 512);
    446e:	8e 01       	movw	r16, r28
    4470:	02 5d       	subi	r16, 0xD2	; 210
    4472:	1f 4f       	sbci	r17, 0xFF	; 255
    4474:	c8 01       	movw	r24, r16
    4476:	60 e0       	ldi	r22, 0x00	; 0
    4478:	70 e0       	ldi	r23, 0x00	; 0
    447a:	40 e0       	ldi	r20, 0x00	; 0
    447c:	52 e0       	ldi	r21, 0x02	; 2
    447e:	0e 94 94 13 	call	0x2728	; 0x2728 <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    4482:	c4 5d       	subi	r28, 0xD4	; 212
    4484:	dd 4f       	sbci	r29, 0xFD	; 253
    4486:	85 e5       	ldi	r24, 0x55	; 85
    4488:	9a ea       	ldi	r25, 0xAA	; 170
    448a:	99 83       	std	Y+1, r25	; 0x01
    448c:	88 83       	st	Y, r24
    448e:	cc 52       	subi	r28, 0x2C	; 44
    4490:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    4492:	82 e5       	ldi	r24, 0x52	; 82
    4494:	92 e5       	ldi	r25, 0x52	; 82
    4496:	a1 e6       	ldi	r26, 0x61	; 97
    4498:	b1 e4       	ldi	r27, 0x41	; 65
    449a:	8e a7       	std	Y+46, r24	; 0x2e
    449c:	9f a7       	std	Y+47, r25	; 0x2f
    449e:	a8 ab       	std	Y+48, r26	; 0x30
    44a0:	b9 ab       	std	Y+49, r27	; 0x31
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    44a2:	ce 5e       	subi	r28, 0xEE	; 238
    44a4:	dd 4f       	sbci	r29, 0xFD	; 253
    44a6:	82 e7       	ldi	r24, 0x72	; 114
    44a8:	92 e7       	ldi	r25, 0x72	; 114
    44aa:	a1 e4       	ldi	r26, 0x41	; 65
    44ac:	b1 e6       	ldi	r27, 0x61	; 97
    44ae:	88 83       	st	Y, r24
    44b0:	99 83       	std	Y+1, r25	; 0x01
    44b2:	aa 83       	std	Y+2, r26	; 0x02
    44b4:	bb 83       	std	Y+3, r27	; 0x03
    44b6:	c2 51       	subi	r28, 0x12	; 18
    44b8:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    44ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    44bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    44be:	a8 89       	ldd	r26, Y+16	; 0x10
    44c0:	b9 89       	ldd	r27, Y+17	; 0x11
    44c2:	ca 5e       	subi	r28, 0xEA	; 234
    44c4:	dd 4f       	sbci	r29, 0xFD	; 253
    44c6:	88 83       	st	Y, r24
    44c8:	99 83       	std	Y+1, r25	; 0x01
    44ca:	aa 83       	std	Y+2, r26	; 0x02
    44cc:	bb 83       	std	Y+3, r27	; 0x03
    44ce:	c6 51       	subi	r28, 0x16	; 22
    44d0:	d2 40       	sbci	r29, 0x02	; 2
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    44d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    44d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    44d6:	ac 85       	ldd	r26, Y+12	; 0x0c
    44d8:	bd 85       	ldd	r27, Y+13	; 0x0d
    44da:	c6 5e       	subi	r28, 0xE6	; 230
    44dc:	dd 4f       	sbci	r29, 0xFD	; 253
    44de:	88 83       	st	Y, r24
    44e0:	99 83       	std	Y+1, r25	; 0x01
    44e2:	aa 83       	std	Y+2, r26	; 0x02
    44e4:	bb 83       	std	Y+3, r27	; 0x03
    44e6:	ca 51       	subi	r28, 0x1A	; 26
    44e8:	d2 40       	sbci	r29, 0x02	; 2
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    44ea:	2a 89       	ldd	r18, Y+18	; 0x12
    44ec:	3b 89       	ldd	r19, Y+19	; 0x13
    44ee:	4c 89       	ldd	r20, Y+20	; 0x14
    44f0:	5d 89       	ldd	r21, Y+21	; 0x15
    44f2:	89 81       	ldd	r24, Y+1	; 0x01
    44f4:	b8 01       	movw	r22, r16
    44f6:	01 e0       	ldi	r16, 0x01	; 1
    44f8:	0e 94 49 13 	call	0x2692	; 0x2692 <disk_write>
			fs->fsi_flag = 0;
    44fc:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
    44fe:	89 81       	ldd	r24, Y+1	; 0x01
    4500:	60 e0       	ldi	r22, 0x00	; 0
    4502:	40 e0       	ldi	r20, 0x00	; 0
    4504:	50 e0       	ldi	r21, 0x00	; 0
    4506:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <disk_ioctl>
    450a:	81 11       	cpse	r24, r1
    450c:	81 e0       	ldi	r24, 0x01	; 1
			res = FR_DISK_ERR;
	}

	return res;
}
    450e:	df 91       	pop	r29
    4510:	cf 91       	pop	r28
    4512:	1f 91       	pop	r17
    4514:	0f 91       	pop	r16
    4516:	08 95       	ret

00004518 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    4518:	0f 93       	push	r16
    451a:	1f 93       	push	r17
    451c:	cf 93       	push	r28
    451e:	df 93       	push	r29
    4520:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    4522:	6a 81       	ldd	r22, Y+2	; 0x02
    4524:	7b 81       	ldd	r23, Y+3	; 0x03
    4526:	88 81       	ld	r24, Y
    4528:	99 81       	ldd	r25, Y+1	; 0x01
    452a:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <validate>
    452e:	98 2f       	mov	r25, r24
	if (res == FR_OK) {
    4530:	88 23       	and	r24, r24
    4532:	d9 f5       	brne	.+118    	; 0x45aa <f_sync+0x92>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    4534:	8c 81       	ldd	r24, Y+4	; 0x04
    4536:	85 ff       	sbrs	r24, 5
    4538:	38 c0       	rjmp	.+112    	; 0x45aa <f_sync+0x92>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    453a:	4a 8d       	ldd	r20, Y+26	; 0x1a
    453c:	5b 8d       	ldd	r21, Y+27	; 0x1b
    453e:	6c 8d       	ldd	r22, Y+28	; 0x1c
    4540:	7d 8d       	ldd	r23, Y+29	; 0x1d
    4542:	88 81       	ld	r24, Y
    4544:	99 81       	ldd	r25, Y+1	; 0x01
    4546:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <move_window>
    454a:	98 2f       	mov	r25, r24
			if (res == FR_OK) {
    454c:	88 23       	and	r24, r24
    454e:	69 f5       	brne	.+90     	; 0x45aa <f_sync+0x92>
				dir = fp->dir_ptr;
    4550:	0e 8d       	ldd	r16, Y+30	; 0x1e
    4552:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    4554:	f8 01       	movw	r30, r16
    4556:	83 85       	ldd	r24, Z+11	; 0x0b
    4558:	80 62       	ori	r24, 0x20	; 32
    455a:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    455c:	8a 85       	ldd	r24, Y+10	; 0x0a
    455e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4560:	ac 85       	ldd	r26, Y+12	; 0x0c
    4562:	bd 85       	ldd	r27, Y+13	; 0x0d
    4564:	84 8f       	std	Z+28, r24	; 0x1c
    4566:	95 8f       	std	Z+29, r25	; 0x1d
    4568:	a6 8f       	std	Z+30, r26	; 0x1e
    456a:	b7 8f       	std	Z+31, r27	; 0x1f
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
    456c:	8e 85       	ldd	r24, Y+14	; 0x0e
    456e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4570:	93 8f       	std	Z+27, r25	; 0x1b
    4572:	82 8f       	std	Z+26, r24	; 0x1a
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
    4574:	8e 85       	ldd	r24, Y+14	; 0x0e
    4576:	9f 85       	ldd	r25, Y+15	; 0x0f
    4578:	a8 89       	ldd	r26, Y+16	; 0x10
    457a:	b9 89       	ldd	r27, Y+17	; 0x11
    457c:	cd 01       	movw	r24, r26
    457e:	aa 27       	eor	r26, r26
    4580:	bb 27       	eor	r27, r27
    4582:	95 8b       	std	Z+21, r25	; 0x15
    4584:	84 8b       	std	Z+20, r24	; 0x14
				tim = get_fattime();						/* Update updated time */
    4586:	0e 94 d6 12 	call	0x25ac	; 0x25ac <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
    458a:	f8 01       	movw	r30, r16
    458c:	66 8b       	std	Z+22, r22	; 0x16
    458e:	77 8b       	std	Z+23, r23	; 0x17
    4590:	80 8f       	std	Z+24, r24	; 0x18
    4592:	91 8f       	std	Z+25, r25	; 0x19
				fp->flag &= ~FA__WRITTEN;
    4594:	8c 81       	ldd	r24, Y+4	; 0x04
    4596:	8f 7d       	andi	r24, 0xDF	; 223
    4598:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
    459a:	e8 81       	ld	r30, Y
    459c:	f9 81       	ldd	r31, Y+1	; 0x01
    459e:	81 e0       	ldi	r24, 0x01	; 1
    45a0:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
    45a2:	88 81       	ld	r24, Y
    45a4:	99 81       	ldd	r25, Y+1	; 0x01
    45a6:	49 df       	rcall	.-366    	; 0x443a <sync>
    45a8:	98 2f       	mov	r25, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    45aa:	89 2f       	mov	r24, r25
    45ac:	df 91       	pop	r29
    45ae:	cf 91       	pop	r28
    45b0:	1f 91       	pop	r17
    45b2:	0f 91       	pop	r16
    45b4:	08 95       	ret

000045b6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    45b6:	cf 93       	push	r28
    45b8:	df 93       	push	r29
    45ba:	ec 01       	movw	r28, r24
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    45bc:	ad df       	rcall	.-166    	; 0x4518 <f_sync>
#else
		res = dec_lock(fp->fs, fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    45be:	88 23       	and	r24, r24
    45c0:	11 f4       	brne	.+4      	; 0x45c6 <f_close+0x10>
    45c2:	19 82       	std	Y+1, r1	; 0x01
    45c4:	18 82       	st	Y, r1
	return res;
#endif
}
    45c6:	df 91       	pop	r29
    45c8:	cf 91       	pop	r28
    45ca:	08 95       	ret

000045cc <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    45cc:	5f 92       	push	r5
    45ce:	6f 92       	push	r6
    45d0:	7f 92       	push	r7
    45d2:	8f 92       	push	r8
    45d4:	9f 92       	push	r9
    45d6:	af 92       	push	r10
    45d8:	bf 92       	push	r11
    45da:	cf 92       	push	r12
    45dc:	df 92       	push	r13
    45de:	ef 92       	push	r14
    45e0:	ff 92       	push	r15
    45e2:	0f 93       	push	r16
    45e4:	1f 93       	push	r17
    45e6:	df 93       	push	r29
    45e8:	cf 93       	push	r28
    45ea:	cd b7       	in	r28, 0x3d	; 61
    45ec:	de b7       	in	r29, 0x3e	; 62
    45ee:	a4 97       	sbiw	r28, 0x24	; 36
    45f0:	0f b6       	in	r0, 0x3f	; 63
    45f2:	f8 94       	cli
    45f4:	de bf       	out	0x3e, r29	; 62
    45f6:	0f be       	out	0x3f, r0	; 63
    45f8:	cd bf       	out	0x3d, r28	; 61
    45fa:	3c 01       	movw	r6, r24
    45fc:	7c a3       	std	Y+36, r23	; 0x24
    45fe:	6b a3       	std	Y+35, r22	; 0x23
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    4600:	dc 01       	movw	r26, r24
    4602:	1d 92       	st	X+, r1
    4604:	1c 92       	st	X, r1

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    4606:	5f e1       	ldi	r21, 0x1F	; 31
    4608:	55 2e       	mov	r5, r21
    460a:	54 22       	and	r5, r20
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    460c:	8e 01       	movw	r16, r28
    460e:	03 5f       	subi	r16, 0xF3	; 243
    4610:	1f 4f       	sbci	r17, 0xFF	; 255
    4612:	4e 71       	andi	r20, 0x1E	; 30
    4614:	ce 01       	movw	r24, r28
    4616:	83 96       	adiw	r24, 0x23	; 35
    4618:	b8 01       	movw	r22, r16
    461a:	0e 94 43 14 	call	0x2886	; 0x2886 <chk_mounted>
    461e:	28 2f       	mov	r18, r24
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    4620:	ce 01       	movw	r24, r28
    4622:	01 96       	adiw	r24, 0x01	; 1
    4624:	9a a3       	std	Y+34, r25	; 0x22
    4626:	89 a3       	std	Y+33, r24	; 0x21
	if (res == FR_OK)
    4628:	22 23       	and	r18, r18
    462a:	29 f4       	brne	.+10     	; 0x4636 <f_open+0x6a>
		res = follow_path(&dj, path);	/* Follow the file path */
    462c:	6b a1       	ldd	r22, Y+35	; 0x23
    462e:	7c a1       	ldd	r23, Y+36	; 0x24
    4630:	c8 01       	movw	r24, r16
    4632:	dc da       	rcall	.-2632   	; 0x3bec <follow_path>
    4634:	28 2f       	mov	r18, r24
	dir = dj.dir;
    4636:	cf 8c       	ldd	r12, Y+31	; 0x1f
    4638:	d8 a0       	ldd	r13, Y+32	; 0x20

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    463a:	22 23       	and	r18, r18
    463c:	21 f4       	brne	.+8      	; 0x4646 <f_open+0x7a>
		if (!dir)	/* Current dir itself */
    463e:	c1 14       	cp	r12, r1
    4640:	d1 04       	cpc	r13, r1
    4642:	09 f4       	brne	.+2      	; 0x4646 <f_open+0x7a>
    4644:	26 e0       	ldi	r18, 0x06	; 6
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4646:	45 2d       	mov	r20, r5
    4648:	50 e0       	ldi	r21, 0x00	; 0
    464a:	ca 01       	movw	r24, r20
    464c:	8c 71       	andi	r24, 0x1C	; 28
    464e:	90 70       	andi	r25, 0x00	; 0
    4650:	89 2b       	or	r24, r25
    4652:	09 f4       	brne	.+2      	; 0x4656 <f_open+0x8a>
    4654:	68 c0       	rjmp	.+208    	; 0x4726 <f_open+0x15a>
		DWORD dw, cl;

		if (res != FR_OK) {				/* No file, create new */
    4656:	22 23       	and	r18, r18
    4658:	71 f0       	breq	.+28     	; 0x4676 <f_open+0xaa>
			if (res == FR_NO_FILE)		/* There is no file to open, create a new entry */
    465a:	24 30       	cpi	r18, 0x04	; 4
    465c:	21 f4       	brne	.+8      	; 0x4666 <f_open+0x9a>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    465e:	ce 01       	movw	r24, r28
    4660:	0d 96       	adiw	r24, 0x0d	; 13
    4662:	f9 db       	rcall	.-2062   	; 0x3e56 <dir_register>
    4664:	28 2f       	mov	r18, r24
#endif
			mode |= FA_CREATE_ALWAYS;
			dir = dj.dir;				/* New entry */
    4666:	cf 8c       	ldd	r12, Y+31	; 0x1f
    4668:	d8 a0       	ldd	r13, Y+32	; 0x20
			} else {
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR))	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    466a:	22 23       	and	r18, r18
    466c:	09 f0       	breq	.+2      	; 0x4670 <f_open+0xa4>
    466e:	b6 c0       	rjmp	.+364    	; 0x47dc <f_open+0x210>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;
    4670:	b8 e0       	ldi	r27, 0x08	; 8
    4672:	5b 2a       	or	r5, r27
    4674:	09 c0       	rjmp	.+18     	; 0x4688 <f_open+0xbc>
			dir = dj.dir;				/* New entry */
		}
		else {							/* Any object is already existing */
			if (mode & FA_CREATE_NEW) {			/* Cannot create new */
    4676:	52 fe       	sbrs	r5, 2
    4678:	02 c0       	rjmp	.+4      	; 0x467e <f_open+0xb2>
    467a:	28 e0       	ldi	r18, 0x08	; 8
    467c:	af c0       	rjmp	.+350    	; 0x47dc <f_open+0x210>
				res = FR_EXIST;
			} else {
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR))	/* Cannot overwrite it (R/O or DIR) */
    467e:	f6 01       	movw	r30, r12
    4680:	83 85       	ldd	r24, Z+11	; 0x0b
    4682:	81 71       	andi	r24, 0x11	; 17
    4684:	09 f0       	breq	.+2      	; 0x4688 <f_open+0xbc>
    4686:	c1 c0       	rjmp	.+386    	; 0x480a <f_open+0x23e>
					res = FR_DENIED;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    4688:	53 fe       	sbrs	r5, 3
    468a:	5b c0       	rjmp	.+182    	; 0x4742 <f_open+0x176>
			dw = get_fattime();						/* Created time */
    468c:	0e 94 d6 12 	call	0x25ac	; 0x25ac <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, dw);
    4690:	d6 01       	movw	r26, r12
    4692:	1e 96       	adiw	r26, 0x0e	; 14
    4694:	6d 93       	st	X+, r22
    4696:	7d 93       	st	X+, r23
    4698:	8d 93       	st	X+, r24
    469a:	9c 93       	st	X, r25
    469c:	51 97       	sbiw	r26, 0x11	; 17
			dir[DIR_Attr] = 0;					/* Reset attribute */
    469e:	1b 96       	adiw	r26, 0x0b	; 11
    46a0:	1c 92       	st	X, r1
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    46a2:	f6 01       	movw	r30, r12
    46a4:	14 8e       	std	Z+28, r1	; 0x1c
    46a6:	15 8e       	std	Z+29, r1	; 0x1d
    46a8:	16 8e       	std	Z+30, r1	; 0x1e
    46aa:	17 8e       	std	Z+31, r1	; 0x1f
			cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
    46ac:	84 89       	ldd	r24, Z+20	; 0x14
    46ae:	95 89       	ldd	r25, Z+21	; 0x15
    46b0:	a0 e0       	ldi	r26, 0x00	; 0
    46b2:	b0 e0       	ldi	r27, 0x00	; 0
    46b4:	8c 01       	movw	r16, r24
    46b6:	ff 24       	eor	r15, r15
    46b8:	ee 24       	eor	r14, r14
    46ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    46bc:	93 8d       	ldd	r25, Z+27	; 0x1b
    46be:	a0 e0       	ldi	r26, 0x00	; 0
    46c0:	b0 e0       	ldi	r27, 0x00	; 0
    46c2:	e8 2a       	or	r14, r24
    46c4:	f9 2a       	or	r15, r25
    46c6:	0a 2b       	or	r16, r26
    46c8:	1b 2b       	or	r17, r27
			ST_WORD(dir+DIR_FstClusHI, 0);		/* cluster = 0 */
    46ca:	15 8a       	std	Z+21, r1	; 0x15
    46cc:	14 8a       	std	Z+20, r1	; 0x14
			ST_WORD(dir+DIR_FstClusLO, 0);
    46ce:	13 8e       	std	Z+27, r1	; 0x1b
    46d0:	12 8e       	std	Z+26, r1	; 0x1a
			dj.fs->wflag = 1;
    46d2:	ed 85       	ldd	r30, Y+13	; 0x0d
    46d4:	fe 85       	ldd	r31, Y+14	; 0x0e
    46d6:	81 e0       	ldi	r24, 0x01	; 1
    46d8:	84 83       	std	Z+4, r24	; 0x04
			if (cl) {							/* Remove the cluster chain if exist */
    46da:	e1 14       	cp	r14, r1
    46dc:	f1 04       	cpc	r15, r1
    46de:	01 05       	cpc	r16, r1
    46e0:	11 05       	cpc	r17, r1
    46e2:	79 f1       	breq	.+94     	; 0x4742 <f_open+0x176>
				dw = dj.fs->winsect;
    46e4:	82 a4       	ldd	r8, Z+42	; 0x2a
    46e6:	93 a4       	ldd	r9, Z+43	; 0x2b
    46e8:	a4 a4       	ldd	r10, Z+44	; 0x2c
    46ea:	b5 a4       	ldd	r11, Z+45	; 0x2d
				res = remove_chain(dj.fs, cl);
    46ec:	cf 01       	movw	r24, r30
    46ee:	b8 01       	movw	r22, r16
    46f0:	a7 01       	movw	r20, r14
    46f2:	0e 94 ae 1a 	call	0x355c	; 0x355c <remove_chain>
    46f6:	28 2f       	mov	r18, r24
				if (res == FR_OK) {
    46f8:	88 23       	and	r24, r24
    46fa:	09 f0       	breq	.+2      	; 0x46fe <f_open+0x132>
    46fc:	6f c0       	rjmp	.+222    	; 0x47dc <f_open+0x210>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    46fe:	ed 85       	ldd	r30, Y+13	; 0x0d
    4700:	fe 85       	ldd	r31, Y+14	; 0x0e
    4702:	08 94       	sec
    4704:	e1 08       	sbc	r14, r1
    4706:	f1 08       	sbc	r15, r1
    4708:	01 09       	sbc	r16, r1
    470a:	11 09       	sbc	r17, r1
    470c:	e2 86       	std	Z+10, r14	; 0x0a
    470e:	f3 86       	std	Z+11, r15	; 0x0b
    4710:	04 87       	std	Z+12, r16	; 0x0c
    4712:	15 87       	std	Z+13, r17	; 0x0d
					res = move_window(dj.fs, dw);
    4714:	cf 01       	movw	r24, r30
    4716:	b5 01       	movw	r22, r10
    4718:	a4 01       	movw	r20, r8
    471a:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <move_window>
    471e:	28 2f       	mov	r18, r24
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
    4720:	88 23       	and	r24, r24
    4722:	79 f0       	breq	.+30     	; 0x4742 <f_open+0x176>
    4724:	5b c0       	rjmp	.+182    	; 0x47dc <f_open+0x210>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    4726:	22 23       	and	r18, r18
    4728:	09 f0       	breq	.+2      	; 0x472c <f_open+0x160>
    472a:	58 c0       	rjmp	.+176    	; 0x47dc <f_open+0x210>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    472c:	d6 01       	movw	r26, r12
    472e:	1b 96       	adiw	r26, 0x0b	; 11
    4730:	8c 91       	ld	r24, X
    4732:	84 ff       	sbrs	r24, 4
    4734:	02 c0       	rjmp	.+4      	; 0x473a <f_open+0x16e>
    4736:	24 e0       	ldi	r18, 0x04	; 4
    4738:	51 c0       	rjmp	.+162    	; 0x47dc <f_open+0x210>
				res = FR_NO_FILE;
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    473a:	51 fe       	sbrs	r5, 1
    473c:	02 c0       	rjmp	.+4      	; 0x4742 <f_open+0x176>
    473e:	80 fd       	sbrc	r24, 0
    4740:	64 c0       	rjmp	.+200    	; 0x480a <f_open+0x23e>
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
		if (mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW))
    4742:	85 2d       	mov	r24, r5
    4744:	8e 71       	andi	r24, 0x1E	; 30
    4746:	11 f0       	breq	.+4      	; 0x474c <f_open+0x180>
			mode |= FA__WRITTEN;				/* Set file changed flag */
    4748:	b0 e2       	ldi	r27, 0x20	; 32
    474a:	5b 2a       	or	r5, r27
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    474c:	6d 85       	ldd	r22, Y+13	; 0x0d
    474e:	7e 85       	ldd	r23, Y+14	; 0x0e
    4750:	fb 01       	movw	r30, r22
    4752:	22 a5       	ldd	r18, Z+42	; 0x2a
    4754:	33 a5       	ldd	r19, Z+43	; 0x2b
    4756:	44 a5       	ldd	r20, Z+44	; 0x2c
    4758:	55 a5       	ldd	r21, Z+45	; 0x2d
    475a:	d3 01       	movw	r26, r6
    475c:	5a 96       	adiw	r26, 0x1a	; 26
    475e:	2d 93       	st	X+, r18
    4760:	3d 93       	st	X+, r19
    4762:	4d 93       	st	X+, r20
    4764:	5c 93       	st	X, r21
    4766:	5d 97       	sbiw	r26, 0x1d	; 29
		fp->dir_ptr = dir;
    4768:	5f 96       	adiw	r26, 0x1f	; 31
    476a:	dc 92       	st	X, r13
    476c:	ce 92       	st	-X, r12
    476e:	5e 97       	sbiw	r26, 0x1e	; 30
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    4770:	14 96       	adiw	r26, 0x04	; 4
    4772:	5c 92       	st	X, r5
		fp->org_clust =						/* File start cluster */
    4774:	f6 01       	movw	r30, r12
    4776:	84 89       	ldd	r24, Z+20	; 0x14
    4778:	95 89       	ldd	r25, Z+21	; 0x15
    477a:	a0 e0       	ldi	r26, 0x00	; 0
    477c:	b0 e0       	ldi	r27, 0x00	; 0
    477e:	dc 01       	movw	r26, r24
    4780:	99 27       	eor	r25, r25
    4782:	88 27       	eor	r24, r24
    4784:	22 8d       	ldd	r18, Z+26	; 0x1a
    4786:	33 8d       	ldd	r19, Z+27	; 0x1b
    4788:	40 e0       	ldi	r20, 0x00	; 0
    478a:	50 e0       	ldi	r21, 0x00	; 0
    478c:	82 2b       	or	r24, r18
    478e:	93 2b       	or	r25, r19
    4790:	a4 2b       	or	r26, r20
    4792:	b5 2b       	or	r27, r21
    4794:	f3 01       	movw	r30, r6
    4796:	86 87       	std	Z+14, r24	; 0x0e
    4798:	97 87       	std	Z+15, r25	; 0x0f
    479a:	a0 8b       	std	Z+16, r26	; 0x10
    479c:	b1 8b       	std	Z+17, r27	; 0x11
			((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    479e:	f6 01       	movw	r30, r12
    47a0:	84 8d       	ldd	r24, Z+28	; 0x1c
    47a2:	95 8d       	ldd	r25, Z+29	; 0x1d
    47a4:	a6 8d       	ldd	r26, Z+30	; 0x1e
    47a6:	b7 8d       	ldd	r27, Z+31	; 0x1f
    47a8:	f3 01       	movw	r30, r6
    47aa:	82 87       	std	Z+10, r24	; 0x0a
    47ac:	93 87       	std	Z+11, r25	; 0x0b
    47ae:	a4 87       	std	Z+12, r26	; 0x0c
    47b0:	b5 87       	std	Z+13, r27	; 0x0d
		fp->fptr = 0;						/* File pointer */
    47b2:	d3 01       	movw	r26, r6
    47b4:	16 96       	adiw	r26, 0x06	; 6
    47b6:	1d 92       	st	X+, r1
    47b8:	1d 92       	st	X+, r1
    47ba:	1d 92       	st	X+, r1
    47bc:	1c 92       	st	X, r1
    47be:	19 97       	sbiw	r26, 0x09	; 9
		fp->dsect = 0;
    47c0:	16 8a       	std	Z+22, r1	; 0x16
    47c2:	17 8a       	std	Z+23, r1	; 0x17
    47c4:	10 8e       	std	Z+24, r1	; 0x18
    47c6:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* No cluster link map table */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    47c8:	71 83       	std	Z+1, r23	; 0x01
    47ca:	60 83       	st	Z, r22
    47cc:	db 01       	movw	r26, r22
    47ce:	16 96       	adiw	r26, 0x06	; 6
    47d0:	8d 91       	ld	r24, X+
    47d2:	9c 91       	ld	r25, X
    47d4:	17 97       	sbiw	r26, 0x07	; 7
    47d6:	93 83       	std	Z+3, r25	; 0x03
    47d8:	82 83       	std	Z+2, r24	; 0x02
    47da:	20 e0       	ldi	r18, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
    47dc:	82 2f       	mov	r24, r18
    47de:	a4 96       	adiw	r28, 0x24	; 36
    47e0:	0f b6       	in	r0, 0x3f	; 63
    47e2:	f8 94       	cli
    47e4:	de bf       	out	0x3e, r29	; 62
    47e6:	0f be       	out	0x3f, r0	; 63
    47e8:	cd bf       	out	0x3d, r28	; 61
    47ea:	cf 91       	pop	r28
    47ec:	df 91       	pop	r29
    47ee:	1f 91       	pop	r17
    47f0:	0f 91       	pop	r16
    47f2:	ff 90       	pop	r15
    47f4:	ef 90       	pop	r14
    47f6:	df 90       	pop	r13
    47f8:	cf 90       	pop	r12
    47fa:	bf 90       	pop	r11
    47fc:	af 90       	pop	r10
    47fe:	9f 90       	pop	r9
    4800:	8f 90       	pop	r8
    4802:	7f 90       	pop	r7
    4804:	6f 90       	pop	r6
    4806:	5f 90       	pop	r5
    4808:	08 95       	ret
		fp->fptr = 0;						/* File pointer */
		fp->dsect = 0;
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* No cluster link map table */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    480a:	27 e0       	ldi	r18, 0x07	; 7
    480c:	e7 cf       	rjmp	.-50     	; 0x47dc <f_open+0x210>

0000480e <lcd_write>:
    480e:	e8 ec       	ldi	r30, 0xC8	; 200
    4810:	f0 e0       	ldi	r31, 0x00	; 0
    4812:	31 97       	sbiw	r30, 0x01	; 1
    4814:	f1 f7       	brne	.-4      	; 0x4812 <lcd_write+0x4>
    4816:	66 23       	and	r22, r22
    4818:	f9 f0       	breq	.+62     	; 0x4858 <lcd_write+0x4a>
    481a:	83 32       	cpi	r24, 0x23	; 35
    481c:	21 f1       	breq	.+72     	; 0x4866 <lcd_write+0x58>
    481e:	98 2f       	mov	r25, r24
    4820:	92 95       	swap	r25
    4822:	9f 70       	andi	r25, 0x0F	; 15
    4824:	28 2f       	mov	r18, r24
    4826:	2f 70       	andi	r18, 0x0F	; 15
    4828:	44 9a       	sbi	0x08, 4	; 8
    482a:	88 b1       	in	r24, 0x08	; 8
    482c:	80 7f       	andi	r24, 0xF0	; 240
    482e:	98 0f       	add	r25, r24
    4830:	98 b9       	out	0x08, r25	; 8
    4832:	46 9a       	sbi	0x08, 6	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4834:	9d e0       	ldi	r25, 0x0D	; 13
    4836:	89 2f       	mov	r24, r25
    4838:	8a 95       	dec	r24
    483a:	f1 f7       	brne	.-4      	; 0x4838 <lcd_write+0x2a>
    483c:	46 98       	cbi	0x08, 6	; 8
    483e:	88 b1       	in	r24, 0x08	; 8
    4840:	80 7f       	andi	r24, 0xF0	; 240
    4842:	28 0f       	add	r18, r24
    4844:	28 b9       	out	0x08, r18	; 8
    4846:	46 9a       	sbi	0x08, 6	; 8
    4848:	9a 95       	dec	r25
    484a:	f1 f7       	brne	.-4      	; 0x4848 <lcd_write+0x3a>
    484c:	46 98       	cbi	0x08, 6	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    484e:	88 ec       	ldi	r24, 0xC8	; 200
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	01 97       	sbiw	r24, 0x01	; 1
    4854:	f1 f7       	brne	.-4      	; 0x4852 <lcd_write+0x44>
    4856:	08 95       	ret
    4858:	44 98       	cbi	0x08, 4	; 8
    485a:	98 2f       	mov	r25, r24
    485c:	92 95       	swap	r25
    485e:	9f 70       	andi	r25, 0x0F	; 15
    4860:	28 2f       	mov	r18, r24
    4862:	2f 70       	andi	r18, 0x0F	; 15
    4864:	e2 cf       	rjmp	.-60     	; 0x482a <lcd_write+0x1c>
    4866:	90 e0       	ldi	r25, 0x00	; 0
    4868:	22 e0       	ldi	r18, 0x02	; 2
    486a:	de cf       	rjmp	.-68     	; 0x4828 <lcd_write+0x1a>

0000486c <lcd_load_user_chars>:
    486c:	ef 92       	push	r14
    486e:	ff 92       	push	r15
    4870:	1f 93       	push	r17
    4872:	cf 93       	push	r28
    4874:	df 93       	push	r29
    4876:	c8 e8       	ldi	r28, 0x88	; 136
    4878:	d3 e0       	ldi	r29, 0x03	; 3
    487a:	10 e4       	ldi	r17, 0x40	; 64
    487c:	80 ed       	ldi	r24, 0xD0	; 208
    487e:	e8 2e       	mov	r14, r24
    4880:	87 e0       	ldi	r24, 0x07	; 7
    4882:	f8 2e       	mov	r15, r24
    4884:	81 2f       	mov	r24, r17
    4886:	60 e0       	ldi	r22, 0x00	; 0
    4888:	c2 df       	rcall	.-124    	; 0x480e <lcd_write>
    488a:	c7 01       	movw	r24, r14
    488c:	01 97       	sbiw	r24, 0x01	; 1
    488e:	f1 f7       	brne	.-4      	; 0x488c <lcd_load_user_chars+0x20>
    4890:	88 81       	ld	r24, Y
    4892:	61 e0       	ldi	r22, 0x01	; 1
    4894:	bc df       	rcall	.-136    	; 0x480e <lcd_write>
    4896:	89 81       	ldd	r24, Y+1	; 0x01
    4898:	61 e0       	ldi	r22, 0x01	; 1
    489a:	b9 df       	rcall	.-142    	; 0x480e <lcd_write>
    489c:	8a 81       	ldd	r24, Y+2	; 0x02
    489e:	61 e0       	ldi	r22, 0x01	; 1
    48a0:	b6 df       	rcall	.-148    	; 0x480e <lcd_write>
    48a2:	8b 81       	ldd	r24, Y+3	; 0x03
    48a4:	61 e0       	ldi	r22, 0x01	; 1
    48a6:	b3 df       	rcall	.-154    	; 0x480e <lcd_write>
    48a8:	8c 81       	ldd	r24, Y+4	; 0x04
    48aa:	61 e0       	ldi	r22, 0x01	; 1
    48ac:	b0 df       	rcall	.-160    	; 0x480e <lcd_write>
    48ae:	8d 81       	ldd	r24, Y+5	; 0x05
    48b0:	61 e0       	ldi	r22, 0x01	; 1
    48b2:	ad df       	rcall	.-166    	; 0x480e <lcd_write>
    48b4:	8e 81       	ldd	r24, Y+6	; 0x06
    48b6:	61 e0       	ldi	r22, 0x01	; 1
    48b8:	aa df       	rcall	.-172    	; 0x480e <lcd_write>
    48ba:	8f 81       	ldd	r24, Y+7	; 0x07
    48bc:	61 e0       	ldi	r22, 0x01	; 1
    48be:	a7 df       	rcall	.-178    	; 0x480e <lcd_write>
    48c0:	80 e8       	ldi	r24, 0x80	; 128
    48c2:	60 e0       	ldi	r22, 0x00	; 0
    48c4:	a4 df       	rcall	.-184    	; 0x480e <lcd_write>
    48c6:	18 5f       	subi	r17, 0xF8	; 248
    48c8:	28 96       	adiw	r28, 0x08	; 8
    48ca:	18 35       	cpi	r17, 0x58	; 88
    48cc:	d9 f6       	brne	.-74     	; 0x4884 <lcd_load_user_chars+0x18>
    48ce:	df 91       	pop	r29
    48d0:	cf 91       	pop	r28
    48d2:	1f 91       	pop	r17
    48d4:	ff 90       	pop	r15
    48d6:	ef 90       	pop	r14
    48d8:	08 95       	ret

000048da <lcd_print_str>:
    48da:	cf 93       	push	r28
    48dc:	df 93       	push	r29
    48de:	ec 01       	movw	r28, r24
    48e0:	88 81       	ld	r24, Y
    48e2:	88 23       	and	r24, r24
    48e4:	31 f0       	breq	.+12     	; 0x48f2 <lcd_print_str+0x18>
    48e6:	21 96       	adiw	r28, 0x01	; 1
    48e8:	61 e0       	ldi	r22, 0x01	; 1
    48ea:	91 df       	rcall	.-222    	; 0x480e <lcd_write>
    48ec:	88 81       	ld	r24, Y
    48ee:	88 23       	and	r24, r24
    48f0:	d1 f7       	brne	.-12     	; 0x48e6 <lcd_print_str+0xc>
    48f2:	df 91       	pop	r29
    48f4:	cf 91       	pop	r28
    48f6:	08 95       	ret

000048f8 <lcd_pos>:
    48f8:	83 30       	cpi	r24, 0x03	; 3
    48fa:	91 05       	cpc	r25, r1
    48fc:	a0 f0       	brcs	.+40     	; 0x4926 <lcd_pos+0x2e>
    48fe:	6d 56       	subi	r22, 0x6D	; 109
    4900:	83 50       	subi	r24, 0x03	; 3
    4902:	9c 4f       	sbci	r25, 0xFC	; 252
    4904:	00 24       	eor	r0, r0
    4906:	96 95       	lsr	r25
    4908:	87 95       	ror	r24
    490a:	07 94       	ror	r0
    490c:	96 95       	lsr	r25
    490e:	87 95       	ror	r24
    4910:	07 94       	ror	r0
    4912:	98 2f       	mov	r25, r24
    4914:	80 2d       	mov	r24, r0
    4916:	86 0f       	add	r24, r22
    4918:	60 e0       	ldi	r22, 0x00	; 0
    491a:	79 df       	rcall	.-270    	; 0x480e <lcd_write>
    491c:	80 ed       	ldi	r24, 0xD0	; 208
    491e:	97 e0       	ldi	r25, 0x07	; 7
    4920:	01 97       	sbiw	r24, 0x01	; 1
    4922:	f1 f7       	brne	.-4      	; 0x4920 <lcd_pos+0x28>
    4924:	08 95       	ret
    4926:	61 58       	subi	r22, 0x81	; 129
    4928:	81 50       	subi	r24, 0x01	; 1
    492a:	9c 4f       	sbci	r25, 0xFC	; 252
    492c:	00 24       	eor	r0, r0
    492e:	96 95       	lsr	r25
    4930:	87 95       	ror	r24
    4932:	07 94       	ror	r0
    4934:	96 95       	lsr	r25
    4936:	87 95       	ror	r24
    4938:	07 94       	ror	r0
    493a:	98 2f       	mov	r25, r24
    493c:	80 2d       	mov	r24, r0
    493e:	86 0f       	add	r24, r22
    4940:	60 e0       	ldi	r22, 0x00	; 0
    4942:	65 df       	rcall	.-310    	; 0x480e <lcd_write>
    4944:	80 ed       	ldi	r24, 0xD0	; 208
    4946:	97 e0       	ldi	r25, 0x07	; 7
    4948:	01 97       	sbiw	r24, 0x01	; 1
    494a:	f1 f7       	brne	.-4      	; 0x4948 <lcd_pos+0x50>
    494c:	08 95       	ret

0000494e <lcd_clear>:
    494e:	0f 93       	push	r16
    4950:	1f 93       	push	r17
    4952:	81 e0       	ldi	r24, 0x01	; 1
    4954:	60 e0       	ldi	r22, 0x00	; 0
    4956:	5b df       	rcall	.-330    	; 0x480e <lcd_write>
    4958:	00 ed       	ldi	r16, 0xD0	; 208
    495a:	17 e0       	ldi	r17, 0x07	; 7
    495c:	c8 01       	movw	r24, r16
    495e:	01 97       	sbiw	r24, 0x01	; 1
    4960:	f1 f7       	brne	.-4      	; 0x495e <lcd_clear+0x10>
    4962:	81 e0       	ldi	r24, 0x01	; 1
    4964:	90 e0       	ldi	r25, 0x00	; 0
    4966:	61 e0       	ldi	r22, 0x01	; 1
    4968:	70 e0       	ldi	r23, 0x00	; 0
    496a:	c6 df       	rcall	.-116    	; 0x48f8 <lcd_pos>
    496c:	c8 01       	movw	r24, r16
    496e:	01 97       	sbiw	r24, 0x01	; 1
    4970:	f1 f7       	brne	.-4      	; 0x496e <lcd_clear+0x20>
    4972:	1f 91       	pop	r17
    4974:	0f 91       	pop	r16
    4976:	08 95       	ret

00004978 <lcd_init>:
    4978:	0f 93       	push	r16
    497a:	1f 93       	push	r17
    497c:	87 b1       	in	r24, 0x07	; 7
    497e:	8f 65       	ori	r24, 0x5F	; 95
    4980:	87 b9       	out	0x07, r24	; 7
    4982:	00 ed       	ldi	r16, 0xD0	; 208
    4984:	17 e0       	ldi	r17, 0x07	; 7
    4986:	c8 01       	movw	r24, r16
    4988:	01 97       	sbiw	r24, 0x01	; 1
    498a:	f1 f7       	brne	.-4      	; 0x4988 <lcd_init+0x10>
    498c:	88 e2       	ldi	r24, 0x28	; 40
    498e:	60 e0       	ldi	r22, 0x00	; 0
    4990:	3e df       	rcall	.-388    	; 0x480e <lcd_write>
    4992:	c8 01       	movw	r24, r16
    4994:	01 97       	sbiw	r24, 0x01	; 1
    4996:	f1 f7       	brne	.-4      	; 0x4994 <lcd_init+0x1c>
    4998:	88 e2       	ldi	r24, 0x28	; 40
    499a:	60 e0       	ldi	r22, 0x00	; 0
    499c:	38 df       	rcall	.-400    	; 0x480e <lcd_write>
    499e:	80 ea       	ldi	r24, 0xA0	; 160
    49a0:	9f e0       	ldi	r25, 0x0F	; 15
    49a2:	01 97       	sbiw	r24, 0x01	; 1
    49a4:	f1 f7       	brne	.-4      	; 0x49a2 <lcd_init+0x2a>
    49a6:	8c e0       	ldi	r24, 0x0C	; 12
    49a8:	60 e0       	ldi	r22, 0x00	; 0
    49aa:	31 df       	rcall	.-414    	; 0x480e <lcd_write>
    49ac:	c8 01       	movw	r24, r16
    49ae:	01 97       	sbiw	r24, 0x01	; 1
    49b0:	f1 f7       	brne	.-4      	; 0x49ae <lcd_init+0x36>
    49b2:	5c df       	rcall	.-328    	; 0x486c <lcd_load_user_chars>
    49b4:	c8 01       	movw	r24, r16
    49b6:	01 97       	sbiw	r24, 0x01	; 1
    49b8:	f1 f7       	brne	.-4      	; 0x49b6 <lcd_init+0x3e>
    49ba:	81 e0       	ldi	r24, 0x01	; 1
    49bc:	60 e0       	ldi	r22, 0x00	; 0
    49be:	27 df       	rcall	.-434    	; 0x480e <lcd_write>
    49c0:	c8 01       	movw	r24, r16
    49c2:	01 97       	sbiw	r24, 0x01	; 1
    49c4:	f1 f7       	brne	.-4      	; 0x49c2 <lcd_init+0x4a>
    49c6:	81 e0       	ldi	r24, 0x01	; 1
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	61 e0       	ldi	r22, 0x01	; 1
    49cc:	70 e0       	ldi	r23, 0x00	; 0
    49ce:	94 df       	rcall	.-216    	; 0x48f8 <lcd_pos>
    49d0:	c8 01       	movw	r24, r16
    49d2:	01 97       	sbiw	r24, 0x01	; 1
    49d4:	f1 f7       	brne	.-4      	; 0x49d2 <lcd_init+0x5a>
    49d6:	1f 91       	pop	r17
    49d8:	0f 91       	pop	r16
    49da:	08 95       	ret

000049dc <ltoa_format>:
    49dc:	2f 92       	push	r2
    49de:	3f 92       	push	r3
    49e0:	4f 92       	push	r4
    49e2:	5f 92       	push	r5
    49e4:	6f 92       	push	r6
    49e6:	7f 92       	push	r7
    49e8:	8f 92       	push	r8
    49ea:	9f 92       	push	r9
    49ec:	af 92       	push	r10
    49ee:	bf 92       	push	r11
    49f0:	cf 92       	push	r12
    49f2:	df 92       	push	r13
    49f4:	ef 92       	push	r14
    49f6:	ff 92       	push	r15
    49f8:	0f 93       	push	r16
    49fa:	1f 93       	push	r17
    49fc:	df 93       	push	r29
    49fe:	cf 93       	push	r28
    4a00:	cd b7       	in	r28, 0x3d	; 61
    4a02:	de b7       	in	r29, 0x3e	; 62
    4a04:	28 97       	sbiw	r28, 0x08	; 8
    4a06:	0f b6       	in	r0, 0x3f	; 63
    4a08:	f8 94       	cli
    4a0a:	de bf       	out	0x3e, r29	; 62
    4a0c:	0f be       	out	0x3f, r0	; 63
    4a0e:	cd bf       	out	0x3d, r28	; 61
    4a10:	9e 83       	std	Y+6, r25	; 0x06
    4a12:	8d 83       	std	Y+5, r24	; 0x05
    4a14:	4a 01       	movw	r8, r20
    4a16:	5b 01       	movw	r10, r22
    4a18:	29 01       	movw	r4, r18
    4a1a:	ce 2c       	mov	r12, r14
    4a1c:	08 94       	sec
    4a1e:	41 1c       	adc	r4, r1
    4a20:	51 1c       	adc	r5, r1
    4a22:	92 01       	movw	r18, r4
    4a24:	20 0f       	add	r18, r16
    4a26:	31 1f       	adc	r19, r17
    4a28:	3c 83       	std	Y+4, r19	; 0x04
    4a2a:	2b 83       	std	Y+3, r18	; 0x03
    4a2c:	08 94       	sec
    4a2e:	41 08       	sbc	r4, r1
    4a30:	51 08       	sbc	r5, r1
    4a32:	fc 01       	movw	r30, r24
    4a34:	e2 0f       	add	r30, r18
    4a36:	f3 1f       	adc	r31, r19
    4a38:	10 82       	st	Z, r1
    4a3a:	21 50       	subi	r18, 0x01	; 1
    4a3c:	30 40       	sbci	r19, 0x00	; 0
    4a3e:	38 87       	std	Y+8, r19	; 0x08
    4a40:	2f 83       	std	Y+7, r18	; 0x07
    4a42:	41 15       	cp	r20, r1
    4a44:	51 05       	cpc	r21, r1
    4a46:	61 05       	cpc	r22, r1
    4a48:	71 05       	cpc	r23, r1
    4a4a:	09 f0       	breq	.+2      	; 0x4a4e <ltoa_format+0x72>
    4a4c:	7a c0       	rjmp	.+244    	; 0x4b42 <ltoa_format+0x166>
    4a4e:	37 fd       	sbrc	r19, 7
    4a50:	5d c0       	rjmp	.+186    	; 0x4b0c <ltoa_format+0x130>
    4a52:	01 2b       	or	r16, r17
    4a54:	09 f4       	brne	.+2      	; 0x4a58 <ltoa_format+0x7c>
    4a56:	06 c1       	rjmp	.+524    	; 0x4c64 <ltoa_format+0x288>
    4a58:	4b 81       	ldd	r20, Y+3	; 0x03
    4a5a:	5c 81       	ldd	r21, Y+4	; 0x04
    4a5c:	42 50       	subi	r20, 0x02	; 2
    4a5e:	50 40       	sbci	r21, 0x00	; 0
    4a60:	dc 01       	movw	r26, r24
    4a62:	a2 0f       	add	r26, r18
    4a64:	b3 1f       	adc	r27, r19
    4a66:	7e e2       	ldi	r23, 0x2E	; 46
    4a68:	60 e3       	ldi	r22, 0x30	; 48
    4a6a:	81 c0       	rjmp	.+258    	; 0x4b6e <ltoa_format+0x192>
    4a6c:	c5 01       	movw	r24, r10
    4a6e:	b4 01       	movw	r22, r8
    4a70:	2a e0       	ldi	r18, 0x0A	; 10
    4a72:	30 e0       	ldi	r19, 0x00	; 0
    4a74:	40 e0       	ldi	r20, 0x00	; 0
    4a76:	50 e0       	ldi	r21, 0x00	; 0
    4a78:	0e 94 4a 32 	call	0x6494	; 0x6494 <__divmodsi4>
    4a7c:	02 2f       	mov	r16, r18
    4a7e:	f3 2e       	mov	r15, r19
    4a80:	e4 2e       	mov	r14, r20
    4a82:	d5 2e       	mov	r13, r21
    4a84:	18 2d       	mov	r17, r8
    4a86:	10 5d       	subi	r17, 0xD0	; 208
    4a88:	62 2f       	mov	r22, r18
    4a8a:	73 2f       	mov	r23, r19
    4a8c:	84 2f       	mov	r24, r20
    4a8e:	95 2f       	mov	r25, r21
    4a90:	26 ef       	ldi	r18, 0xF6	; 246
    4a92:	3f ef       	ldi	r19, 0xFF	; 255
    4a94:	4f ef       	ldi	r20, 0xFF	; 255
    4a96:	5f ef       	ldi	r21, 0xFF	; 255
    4a98:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__mulsi3>
    4a9c:	16 0f       	add	r17, r22
    4a9e:	d3 01       	movw	r26, r6
    4aa0:	1c 93       	st	X, r17
    4aa2:	ef 81       	ldd	r30, Y+7	; 0x07
    4aa4:	f8 85       	ldd	r31, Y+8	; 0x08
    4aa6:	31 97       	sbiw	r30, 0x01	; 1
    4aa8:	f8 87       	std	Y+8, r31	; 0x08
    4aaa:	ef 83       	std	Y+7, r30	; 0x07
    4aac:	08 94       	sec
    4aae:	61 08       	sbc	r6, r1
    4ab0:	71 08       	sbc	r7, r1
    4ab2:	20 2f       	mov	r18, r16
    4ab4:	3f 2d       	mov	r19, r15
    4ab6:	4e 2d       	mov	r20, r14
    4ab8:	5d 2d       	mov	r21, r13
    4aba:	c9 01       	movw	r24, r18
    4abc:	da 01       	movw	r26, r20
    4abe:	4c 01       	movw	r8, r24
    4ac0:	5d 01       	movw	r10, r26
    4ac2:	ff 23       	and	r31, r31
    4ac4:	1c f1       	brlt	.+70     	; 0x4b0c <ltoa_format+0x130>
    4ac6:	18 14       	cp	r1, r8
    4ac8:	19 04       	cpc	r1, r9
    4aca:	1a 04       	cpc	r1, r10
    4acc:	1b 04       	cpc	r1, r11
    4ace:	74 f2       	brlt	.-100    	; 0x4a6c <ltoa_format+0x90>
    4ad0:	2f 81       	ldd	r18, Y+7	; 0x07
    4ad2:	38 85       	ldd	r19, Y+8	; 0x08
    4ad4:	42 16       	cp	r4, r18
    4ad6:	53 06       	cpc	r5, r19
    4ad8:	48 f2       	brcs	.-110    	; 0x4a6c <ltoa_format+0x90>
    4ada:	ed 81       	ldd	r30, Y+5	; 0x05
    4adc:	fe 81       	ldd	r31, Y+6	; 0x06
    4ade:	8f 81       	ldd	r24, Y+7	; 0x07
    4ae0:	98 85       	ldd	r25, Y+8	; 0x08
    4ae2:	e8 0f       	add	r30, r24
    4ae4:	f9 1f       	adc	r31, r25
    4ae6:	c0 82       	st	Z, r12
    4ae8:	8f 81       	ldd	r24, Y+7	; 0x07
    4aea:	98 85       	ldd	r25, Y+8	; 0x08
    4aec:	01 97       	sbiw	r24, 0x01	; 1
    4aee:	97 fd       	sbrc	r25, 7
    4af0:	0d c0       	rjmp	.+26     	; 0x4b0c <ltoa_format+0x130>
    4af2:	ad 81       	ldd	r26, Y+5	; 0x05
    4af4:	be 81       	ldd	r27, Y+6	; 0x06
    4af6:	a8 0f       	add	r26, r24
    4af8:	b9 1f       	adc	r27, r25
    4afa:	8d 81       	ldd	r24, Y+5	; 0x05
    4afc:	9e 81       	ldd	r25, Y+6	; 0x06
    4afe:	01 97       	sbiw	r24, 0x01	; 1
    4b00:	20 e2       	ldi	r18, 0x20	; 32
    4b02:	2c 93       	st	X, r18
    4b04:	11 97       	sbiw	r26, 0x01	; 1
    4b06:	a8 17       	cp	r26, r24
    4b08:	b9 07       	cpc	r27, r25
    4b0a:	d9 f7       	brne	.-10     	; 0x4b02 <ltoa_format+0x126>
    4b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    4b10:	28 96       	adiw	r28, 0x08	; 8
    4b12:	0f b6       	in	r0, 0x3f	; 63
    4b14:	f8 94       	cli
    4b16:	de bf       	out	0x3e, r29	; 62
    4b18:	0f be       	out	0x3f, r0	; 63
    4b1a:	cd bf       	out	0x3d, r28	; 61
    4b1c:	cf 91       	pop	r28
    4b1e:	df 91       	pop	r29
    4b20:	1f 91       	pop	r17
    4b22:	0f 91       	pop	r16
    4b24:	ff 90       	pop	r15
    4b26:	ef 90       	pop	r14
    4b28:	df 90       	pop	r13
    4b2a:	cf 90       	pop	r12
    4b2c:	bf 90       	pop	r11
    4b2e:	af 90       	pop	r10
    4b30:	9f 90       	pop	r9
    4b32:	8f 90       	pop	r8
    4b34:	7f 90       	pop	r7
    4b36:	6f 90       	pop	r6
    4b38:	5f 90       	pop	r5
    4b3a:	4f 90       	pop	r4
    4b3c:	3f 90       	pop	r3
    4b3e:	2f 90       	pop	r2
    4b40:	08 95       	ret
    4b42:	77 fd       	sbrc	r23, 7
    4b44:	27 c0       	rjmp	.+78     	; 0x4b94 <ltoa_format+0x1b8>
    4b46:	ef 81       	ldd	r30, Y+7	; 0x07
    4b48:	f8 85       	ldd	r31, Y+8	; 0x08
    4b4a:	f7 fd       	sbrc	r31, 7
    4b4c:	df cf       	rjmp	.-66     	; 0x4b0c <ltoa_format+0x130>
    4b4e:	01 2b       	or	r16, r17
    4b50:	81 f5       	brne	.+96     	; 0x4bb2 <ltoa_format+0x1d6>
    4b52:	6d 80       	ldd	r6, Y+5	; 0x05
    4b54:	7e 80       	ldd	r7, Y+6	; 0x06
    4b56:	6e 0e       	add	r6, r30
    4b58:	7f 1e       	adc	r7, r31
    4b5a:	b5 cf       	rjmp	.-150    	; 0x4ac6 <ltoa_format+0xea>
    4b5c:	6c 93       	st	X, r22
    4b5e:	ca 01       	movw	r24, r20
    4b60:	21 50       	subi	r18, 0x01	; 1
    4b62:	30 40       	sbci	r19, 0x00	; 0
    4b64:	41 50       	subi	r20, 0x01	; 1
    4b66:	50 40       	sbci	r21, 0x00	; 0
    4b68:	11 97       	sbiw	r26, 0x01	; 1
    4b6a:	97 fd       	sbrc	r25, 7
    4b6c:	cf cf       	rjmp	.-98     	; 0x4b0c <ltoa_format+0x130>
    4b6e:	38 87       	std	Y+8, r19	; 0x08
    4b70:	2f 83       	std	Y+7, r18	; 0x07
    4b72:	c9 01       	movw	r24, r18
    4b74:	02 96       	adiw	r24, 0x02	; 2
    4b76:	84 15       	cp	r24, r4
    4b78:	95 05       	cpc	r25, r5
    4b7a:	08 f4       	brcc	.+2      	; 0x4b7e <ltoa_format+0x1a2>
    4b7c:	86 c0       	rjmp	.+268    	; 0x4c8a <ltoa_format+0x2ae>
    4b7e:	24 15       	cp	r18, r4
    4b80:	35 05       	cpc	r19, r5
    4b82:	61 f7       	brne	.-40     	; 0x4b5c <ltoa_format+0x180>
    4b84:	8d 81       	ldd	r24, Y+5	; 0x05
    4b86:	9e 81       	ldd	r25, Y+6	; 0x06
    4b88:	82 0f       	add	r24, r18
    4b8a:	93 1f       	adc	r25, r19
    4b8c:	fc 01       	movw	r30, r24
    4b8e:	70 83       	st	Z, r23
    4b90:	ca 01       	movw	r24, r20
    4b92:	e6 cf       	rjmp	.-52     	; 0x4b60 <ltoa_format+0x184>
    4b94:	b0 94       	com	r11
    4b96:	a0 94       	com	r10
    4b98:	90 94       	com	r9
    4b9a:	80 94       	com	r8
    4b9c:	81 1c       	adc	r8, r1
    4b9e:	91 1c       	adc	r9, r1
    4ba0:	a1 1c       	adc	r10, r1
    4ba2:	b1 1c       	adc	r11, r1
    4ba4:	4d e2       	ldi	r20, 0x2D	; 45
    4ba6:	c4 2e       	mov	r12, r20
    4ba8:	ef 81       	ldd	r30, Y+7	; 0x07
    4baa:	f8 85       	ldd	r31, Y+8	; 0x08
    4bac:	f7 fd       	sbrc	r31, 7
    4bae:	ae cf       	rjmp	.-164    	; 0x4b0c <ltoa_format+0x130>
    4bb0:	ce cf       	rjmp	.-100    	; 0x4b4e <ltoa_format+0x172>
    4bb2:	2b 80       	ldd	r2, Y+3	; 0x03
    4bb4:	3c 80       	ldd	r3, Y+4	; 0x04
    4bb6:	2e ef       	ldi	r18, 0xFE	; 254
    4bb8:	3f ef       	ldi	r19, 0xFF	; 255
    4bba:	22 0e       	add	r2, r18
    4bbc:	33 1e       	adc	r3, r19
    4bbe:	6f 80       	ldd	r6, Y+7	; 0x07
    4bc0:	78 84       	ldd	r7, Y+8	; 0x08
    4bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    4bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    4bc6:	86 0d       	add	r24, r6
    4bc8:	97 1d       	adc	r25, r7
    4bca:	9a 83       	std	Y+2, r25	; 0x02
    4bcc:	89 83       	std	Y+1, r24	; 0x01
    4bce:	32 c0       	rjmp	.+100    	; 0x4c34 <ltoa_format+0x258>
    4bd0:	c5 01       	movw	r24, r10
    4bd2:	b4 01       	movw	r22, r8
    4bd4:	2a e0       	ldi	r18, 0x0A	; 10
    4bd6:	30 e0       	ldi	r19, 0x00	; 0
    4bd8:	40 e0       	ldi	r20, 0x00	; 0
    4bda:	50 e0       	ldi	r21, 0x00	; 0
    4bdc:	0e 94 4a 32 	call	0x6494	; 0x6494 <__divmodsi4>
    4be0:	02 2f       	mov	r16, r18
    4be2:	f3 2e       	mov	r15, r19
    4be4:	e4 2e       	mov	r14, r20
    4be6:	d5 2e       	mov	r13, r21
    4be8:	18 2d       	mov	r17, r8
    4bea:	10 5d       	subi	r17, 0xD0	; 208
    4bec:	62 2f       	mov	r22, r18
    4bee:	73 2f       	mov	r23, r19
    4bf0:	84 2f       	mov	r24, r20
    4bf2:	95 2f       	mov	r25, r21
    4bf4:	26 ef       	ldi	r18, 0xF6	; 246
    4bf6:	3f ef       	ldi	r19, 0xFF	; 255
    4bf8:	4f ef       	ldi	r20, 0xFF	; 255
    4bfa:	5f ef       	ldi	r21, 0xFF	; 255
    4bfc:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__mulsi3>
    4c00:	16 0f       	add	r17, r22
    4c02:	a9 81       	ldd	r26, Y+1	; 0x01
    4c04:	ba 81       	ldd	r27, Y+2	; 0x02
    4c06:	1c 93       	st	X, r17
    4c08:	b1 01       	movw	r22, r2
    4c0a:	20 2f       	mov	r18, r16
    4c0c:	3f 2d       	mov	r19, r15
    4c0e:	4e 2d       	mov	r20, r14
    4c10:	5d 2d       	mov	r21, r13
    4c12:	c9 01       	movw	r24, r18
    4c14:	da 01       	movw	r26, r20
    4c16:	4c 01       	movw	r8, r24
    4c18:	5d 01       	movw	r10, r26
    4c1a:	08 94       	sec
    4c1c:	21 08       	sbc	r2, r1
    4c1e:	31 08       	sbc	r3, r1
    4c20:	e9 81       	ldd	r30, Y+1	; 0x01
    4c22:	fa 81       	ldd	r31, Y+2	; 0x02
    4c24:	31 97       	sbiw	r30, 0x01	; 1
    4c26:	fa 83       	std	Y+2, r31	; 0x02
    4c28:	e9 83       	std	Y+1, r30	; 0x01
    4c2a:	08 94       	sec
    4c2c:	61 08       	sbc	r6, r1
    4c2e:	71 08       	sbc	r7, r1
    4c30:	77 fd       	sbrc	r23, 7
    4c32:	6c cf       	rjmp	.-296    	; 0x4b0c <ltoa_format+0x130>
    4c34:	78 86       	std	Y+8, r7	; 0x08
    4c36:	6f 82       	std	Y+7, r6	; 0x07
    4c38:	18 14       	cp	r1, r8
    4c3a:	19 04       	cpc	r1, r9
    4c3c:	1a 04       	cpc	r1, r10
    4c3e:	1b 04       	cpc	r1, r11
    4c40:	5c f4       	brge	.+22     	; 0x4c58 <ltoa_format+0x27c>
    4c42:	64 14       	cp	r6, r4
    4c44:	75 04       	cpc	r7, r5
    4c46:	21 f6       	brne	.-120    	; 0x4bd0 <ltoa_format+0x1f4>
    4c48:	ed 81       	ldd	r30, Y+5	; 0x05
    4c4a:	fe 81       	ldd	r31, Y+6	; 0x06
    4c4c:	e6 0d       	add	r30, r6
    4c4e:	f7 1d       	adc	r31, r7
    4c50:	be e2       	ldi	r27, 0x2E	; 46
    4c52:	b0 83       	st	Z, r27
    4c54:	b1 01       	movw	r22, r2
    4c56:	e1 cf       	rjmp	.-62     	; 0x4c1a <ltoa_format+0x23e>
    4c58:	c3 01       	movw	r24, r6
    4c5a:	02 96       	adiw	r24, 0x02	; 2
    4c5c:	48 16       	cp	r4, r24
    4c5e:	59 06       	cpc	r5, r25
    4c60:	80 f3       	brcs	.-32     	; 0x4c42 <ltoa_format+0x266>
    4c62:	3b cf       	rjmp	.-394    	; 0x4ada <ltoa_format+0xfe>
    4c64:	ed 81       	ldd	r30, Y+5	; 0x05
    4c66:	fe 81       	ldd	r31, Y+6	; 0x06
    4c68:	2f 81       	ldd	r18, Y+7	; 0x07
    4c6a:	38 85       	ldd	r19, Y+8	; 0x08
    4c6c:	e2 0f       	add	r30, r18
    4c6e:	f3 1f       	adc	r31, r19
    4c70:	80 e3       	ldi	r24, 0x30	; 48
    4c72:	d9 01       	movw	r26, r18
    4c74:	a4 15       	cp	r26, r4
    4c76:	b5 05       	cpc	r27, r5
    4c78:	40 f0       	brcs	.+16     	; 0x4c8a <ltoa_format+0x2ae>
    4c7a:	80 83       	st	Z, r24
    4c7c:	11 97       	sbiw	r26, 0x01	; 1
    4c7e:	b8 87       	std	Y+8, r27	; 0x08
    4c80:	af 83       	std	Y+7, r26	; 0x07
    4c82:	31 97       	sbiw	r30, 0x01	; 1
    4c84:	bb 23       	and	r27, r27
    4c86:	b4 f7       	brge	.-20     	; 0x4c74 <ltoa_format+0x298>
    4c88:	41 cf       	rjmp	.-382    	; 0x4b0c <ltoa_format+0x130>
    4c8a:	ed 81       	ldd	r30, Y+5	; 0x05
    4c8c:	fe 81       	ldd	r31, Y+6	; 0x06
    4c8e:	2f 81       	ldd	r18, Y+7	; 0x07
    4c90:	38 85       	ldd	r19, Y+8	; 0x08
    4c92:	e2 0f       	add	r30, r18
    4c94:	f3 1f       	adc	r31, r19
    4c96:	c0 82       	st	Z, r12
    4c98:	c9 01       	movw	r24, r18
    4c9a:	01 97       	sbiw	r24, 0x01	; 1
    4c9c:	28 cf       	rjmp	.-432    	; 0x4aee <ltoa_format+0x112>

00004c9e <lcd_print_value>:
    4c9e:	2f 92       	push	r2
    4ca0:	3f 92       	push	r3
    4ca2:	4f 92       	push	r4
    4ca4:	5f 92       	push	r5
    4ca6:	6f 92       	push	r6
    4ca8:	7f 92       	push	r7
    4caa:	8f 92       	push	r8
    4cac:	9f 92       	push	r9
    4cae:	af 92       	push	r10
    4cb0:	bf 92       	push	r11
    4cb2:	cf 92       	push	r12
    4cb4:	df 92       	push	r13
    4cb6:	ef 92       	push	r14
    4cb8:	ff 92       	push	r15
    4cba:	0f 93       	push	r16
    4cbc:	1f 93       	push	r17
    4cbe:	df 93       	push	r29
    4cc0:	cf 93       	push	r28
    4cc2:	cd b7       	in	r28, 0x3d	; 61
    4cc4:	de b7       	in	r29, 0x3e	; 62
    4cc6:	62 97       	sbiw	r28, 0x12	; 18
    4cc8:	0f b6       	in	r0, 0x3f	; 63
    4cca:	f8 94       	cli
    4ccc:	de bf       	out	0x3e, r29	; 62
    4cce:	0f be       	out	0x3f, r0	; 63
    4cd0:	cd bf       	out	0x3d, r28	; 61
    4cd2:	3b 01       	movw	r6, r22
    4cd4:	4c 01       	movw	r8, r24
    4cd6:	5a 8b       	std	Y+18, r21	; 0x12
    4cd8:	49 8b       	std	Y+17, r20	; 0x11
    4cda:	e2 2f       	mov	r30, r18
    4cdc:	28 01       	movw	r4, r16
    4cde:	17 01       	movw	r2, r14
    4ce0:	96 01       	movw	r18, r12
    4ce2:	85 01       	movw	r16, r10
    4ce4:	6e 01       	movw	r12, r28
    4ce6:	08 94       	sec
    4ce8:	c1 1c       	adc	r12, r1
    4cea:	d1 1c       	adc	r13, r1
    4cec:	c6 01       	movw	r24, r12
    4cee:	b4 01       	movw	r22, r8
    4cf0:	a3 01       	movw	r20, r6
    4cf2:	ee 2e       	mov	r14, r30
    4cf4:	73 de       	rcall	.-794    	; 0x49dc <ltoa_format>
    4cf6:	c2 01       	movw	r24, r4
    4cf8:	b1 01       	movw	r22, r2
    4cfa:	fe dd       	rcall	.-1028   	; 0x48f8 <lcd_pos>
    4cfc:	c6 01       	movw	r24, r12
    4cfe:	ed dd       	rcall	.-1062   	; 0x48da <lcd_print_str>
    4d00:	89 89       	ldd	r24, Y+17	; 0x11
    4d02:	9a 89       	ldd	r25, Y+18	; 0x12
    4d04:	ea dd       	rcall	.-1068   	; 0x48da <lcd_print_str>
    4d06:	62 96       	adiw	r28, 0x12	; 18
    4d08:	0f b6       	in	r0, 0x3f	; 63
    4d0a:	f8 94       	cli
    4d0c:	de bf       	out	0x3e, r29	; 62
    4d0e:	0f be       	out	0x3f, r0	; 63
    4d10:	cd bf       	out	0x3d, r28	; 61
    4d12:	cf 91       	pop	r28
    4d14:	df 91       	pop	r29
    4d16:	1f 91       	pop	r17
    4d18:	0f 91       	pop	r16
    4d1a:	ff 90       	pop	r15
    4d1c:	ef 90       	pop	r14
    4d1e:	df 90       	pop	r13
    4d20:	cf 90       	pop	r12
    4d22:	bf 90       	pop	r11
    4d24:	af 90       	pop	r10
    4d26:	9f 90       	pop	r9
    4d28:	8f 90       	pop	r8
    4d2a:	7f 90       	pop	r7
    4d2c:	6f 90       	pop	r6
    4d2e:	5f 90       	pop	r5
    4d30:	4f 90       	pop	r4
    4d32:	3f 90       	pop	r3
    4d34:	2f 90       	pop	r2
    4d36:	08 95       	ret

00004d38 <Spi16>:
    4d38:	11 98       	cbi	0x02, 1	; 2
    4d3a:	ac 01       	movw	r20, r24
    4d3c:	97 ff       	sbrs	r25, 7
    4d3e:	5a c1       	rjmp	.+692    	; 0x4ff4 <Spi16+0x2bc>
    4d40:	10 9a       	sbi	0x02, 0	; 2
    4d42:	80 b1       	in	r24, 0x00	; 0
    4d44:	28 2f       	mov	r18, r24
    4d46:	30 e0       	ldi	r19, 0x00	; 0
    4d48:	36 95       	lsr	r19
    4d4a:	27 95       	ror	r18
    4d4c:	36 95       	lsr	r19
    4d4e:	27 95       	ror	r18
    4d50:	21 70       	andi	r18, 0x01	; 1
    4d52:	30 70       	andi	r19, 0x00	; 0
    4d54:	13 9a       	sbi	0x02, 3	; 2
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4d56:	8d e0       	ldi	r24, 0x0D	; 13
    4d58:	8a 95       	dec	r24
    4d5a:	f1 f7       	brne	.-4      	; 0x4d58 <Spi16+0x20>
    4d5c:	13 98       	cbi	0x02, 3	; 2
    4d5e:	44 0f       	add	r20, r20
    4d60:	55 1f       	adc	r21, r21
    4d62:	ca 01       	movw	r24, r20
    4d64:	80 70       	andi	r24, 0x00	; 0
    4d66:	90 78       	andi	r25, 0x80	; 128
    4d68:	89 2b       	or	r24, r25
    4d6a:	09 f4       	brne	.+2      	; 0x4d6e <Spi16+0x36>
    4d6c:	41 c1       	rjmp	.+642    	; 0x4ff0 <Spi16+0x2b8>
    4d6e:	10 9a       	sbi	0x02, 0	; 2
    4d70:	22 0f       	add	r18, r18
    4d72:	33 1f       	adc	r19, r19
    4d74:	02 9b       	sbis	0x00, 2	; 0
    4d76:	02 c0       	rjmp	.+4      	; 0x4d7c <Spi16+0x44>
    4d78:	2f 5f       	subi	r18, 0xFF	; 255
    4d7a:	3f 4f       	sbci	r19, 0xFF	; 255
    4d7c:	13 9a       	sbi	0x02, 3	; 2
    4d7e:	8d e0       	ldi	r24, 0x0D	; 13
    4d80:	8a 95       	dec	r24
    4d82:	f1 f7       	brne	.-4      	; 0x4d80 <Spi16+0x48>
    4d84:	13 98       	cbi	0x02, 3	; 2
    4d86:	44 0f       	add	r20, r20
    4d88:	55 1f       	adc	r21, r21
    4d8a:	ca 01       	movw	r24, r20
    4d8c:	80 70       	andi	r24, 0x00	; 0
    4d8e:	90 78       	andi	r25, 0x80	; 128
    4d90:	89 2b       	or	r24, r25
    4d92:	09 f4       	brne	.+2      	; 0x4d96 <Spi16+0x5e>
    4d94:	2b c1       	rjmp	.+598    	; 0x4fec <Spi16+0x2b4>
    4d96:	10 9a       	sbi	0x02, 0	; 2
    4d98:	22 0f       	add	r18, r18
    4d9a:	33 1f       	adc	r19, r19
    4d9c:	02 9b       	sbis	0x00, 2	; 0
    4d9e:	02 c0       	rjmp	.+4      	; 0x4da4 <Spi16+0x6c>
    4da0:	2f 5f       	subi	r18, 0xFF	; 255
    4da2:	3f 4f       	sbci	r19, 0xFF	; 255
    4da4:	13 9a       	sbi	0x02, 3	; 2
    4da6:	8d e0       	ldi	r24, 0x0D	; 13
    4da8:	8a 95       	dec	r24
    4daa:	f1 f7       	brne	.-4      	; 0x4da8 <Spi16+0x70>
    4dac:	13 98       	cbi	0x02, 3	; 2
    4dae:	44 0f       	add	r20, r20
    4db0:	55 1f       	adc	r21, r21
    4db2:	ca 01       	movw	r24, r20
    4db4:	80 70       	andi	r24, 0x00	; 0
    4db6:	90 78       	andi	r25, 0x80	; 128
    4db8:	89 2b       	or	r24, r25
    4dba:	09 f4       	brne	.+2      	; 0x4dbe <Spi16+0x86>
    4dbc:	15 c1       	rjmp	.+554    	; 0x4fe8 <Spi16+0x2b0>
    4dbe:	10 9a       	sbi	0x02, 0	; 2
    4dc0:	22 0f       	add	r18, r18
    4dc2:	33 1f       	adc	r19, r19
    4dc4:	02 9b       	sbis	0x00, 2	; 0
    4dc6:	02 c0       	rjmp	.+4      	; 0x4dcc <Spi16+0x94>
    4dc8:	2f 5f       	subi	r18, 0xFF	; 255
    4dca:	3f 4f       	sbci	r19, 0xFF	; 255
    4dcc:	13 9a       	sbi	0x02, 3	; 2
    4dce:	8d e0       	ldi	r24, 0x0D	; 13
    4dd0:	8a 95       	dec	r24
    4dd2:	f1 f7       	brne	.-4      	; 0x4dd0 <Spi16+0x98>
    4dd4:	13 98       	cbi	0x02, 3	; 2
    4dd6:	44 0f       	add	r20, r20
    4dd8:	55 1f       	adc	r21, r21
    4dda:	ca 01       	movw	r24, r20
    4ddc:	80 70       	andi	r24, 0x00	; 0
    4dde:	90 78       	andi	r25, 0x80	; 128
    4de0:	89 2b       	or	r24, r25
    4de2:	09 f4       	brne	.+2      	; 0x4de6 <Spi16+0xae>
    4de4:	ff c0       	rjmp	.+510    	; 0x4fe4 <Spi16+0x2ac>
    4de6:	10 9a       	sbi	0x02, 0	; 2
    4de8:	22 0f       	add	r18, r18
    4dea:	33 1f       	adc	r19, r19
    4dec:	02 9b       	sbis	0x00, 2	; 0
    4dee:	02 c0       	rjmp	.+4      	; 0x4df4 <Spi16+0xbc>
    4df0:	2f 5f       	subi	r18, 0xFF	; 255
    4df2:	3f 4f       	sbci	r19, 0xFF	; 255
    4df4:	13 9a       	sbi	0x02, 3	; 2
    4df6:	8d e0       	ldi	r24, 0x0D	; 13
    4df8:	8a 95       	dec	r24
    4dfa:	f1 f7       	brne	.-4      	; 0x4df8 <Spi16+0xc0>
    4dfc:	13 98       	cbi	0x02, 3	; 2
    4dfe:	44 0f       	add	r20, r20
    4e00:	55 1f       	adc	r21, r21
    4e02:	ca 01       	movw	r24, r20
    4e04:	80 70       	andi	r24, 0x00	; 0
    4e06:	90 78       	andi	r25, 0x80	; 128
    4e08:	89 2b       	or	r24, r25
    4e0a:	09 f4       	brne	.+2      	; 0x4e0e <Spi16+0xd6>
    4e0c:	e9 c0       	rjmp	.+466    	; 0x4fe0 <Spi16+0x2a8>
    4e0e:	10 9a       	sbi	0x02, 0	; 2
    4e10:	22 0f       	add	r18, r18
    4e12:	33 1f       	adc	r19, r19
    4e14:	02 9b       	sbis	0x00, 2	; 0
    4e16:	02 c0       	rjmp	.+4      	; 0x4e1c <Spi16+0xe4>
    4e18:	2f 5f       	subi	r18, 0xFF	; 255
    4e1a:	3f 4f       	sbci	r19, 0xFF	; 255
    4e1c:	13 9a       	sbi	0x02, 3	; 2
    4e1e:	8d e0       	ldi	r24, 0x0D	; 13
    4e20:	8a 95       	dec	r24
    4e22:	f1 f7       	brne	.-4      	; 0x4e20 <Spi16+0xe8>
    4e24:	13 98       	cbi	0x02, 3	; 2
    4e26:	44 0f       	add	r20, r20
    4e28:	55 1f       	adc	r21, r21
    4e2a:	ca 01       	movw	r24, r20
    4e2c:	80 70       	andi	r24, 0x00	; 0
    4e2e:	90 78       	andi	r25, 0x80	; 128
    4e30:	89 2b       	or	r24, r25
    4e32:	09 f4       	brne	.+2      	; 0x4e36 <Spi16+0xfe>
    4e34:	d3 c0       	rjmp	.+422    	; 0x4fdc <Spi16+0x2a4>
    4e36:	10 9a       	sbi	0x02, 0	; 2
    4e38:	22 0f       	add	r18, r18
    4e3a:	33 1f       	adc	r19, r19
    4e3c:	02 9b       	sbis	0x00, 2	; 0
    4e3e:	02 c0       	rjmp	.+4      	; 0x4e44 <Spi16+0x10c>
    4e40:	2f 5f       	subi	r18, 0xFF	; 255
    4e42:	3f 4f       	sbci	r19, 0xFF	; 255
    4e44:	13 9a       	sbi	0x02, 3	; 2
    4e46:	8d e0       	ldi	r24, 0x0D	; 13
    4e48:	8a 95       	dec	r24
    4e4a:	f1 f7       	brne	.-4      	; 0x4e48 <Spi16+0x110>
    4e4c:	13 98       	cbi	0x02, 3	; 2
    4e4e:	44 0f       	add	r20, r20
    4e50:	55 1f       	adc	r21, r21
    4e52:	ca 01       	movw	r24, r20
    4e54:	80 70       	andi	r24, 0x00	; 0
    4e56:	90 78       	andi	r25, 0x80	; 128
    4e58:	89 2b       	or	r24, r25
    4e5a:	09 f4       	brne	.+2      	; 0x4e5e <Spi16+0x126>
    4e5c:	bd c0       	rjmp	.+378    	; 0x4fd8 <Spi16+0x2a0>
    4e5e:	10 9a       	sbi	0x02, 0	; 2
    4e60:	22 0f       	add	r18, r18
    4e62:	33 1f       	adc	r19, r19
    4e64:	02 9b       	sbis	0x00, 2	; 0
    4e66:	02 c0       	rjmp	.+4      	; 0x4e6c <Spi16+0x134>
    4e68:	2f 5f       	subi	r18, 0xFF	; 255
    4e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    4e6c:	13 9a       	sbi	0x02, 3	; 2
    4e6e:	8d e0       	ldi	r24, 0x0D	; 13
    4e70:	8a 95       	dec	r24
    4e72:	f1 f7       	brne	.-4      	; 0x4e70 <Spi16+0x138>
    4e74:	13 98       	cbi	0x02, 3	; 2
    4e76:	44 0f       	add	r20, r20
    4e78:	55 1f       	adc	r21, r21
    4e7a:	ca 01       	movw	r24, r20
    4e7c:	80 70       	andi	r24, 0x00	; 0
    4e7e:	90 78       	andi	r25, 0x80	; 128
    4e80:	89 2b       	or	r24, r25
    4e82:	09 f4       	brne	.+2      	; 0x4e86 <Spi16+0x14e>
    4e84:	a7 c0       	rjmp	.+334    	; 0x4fd4 <Spi16+0x29c>
    4e86:	10 9a       	sbi	0x02, 0	; 2
    4e88:	22 0f       	add	r18, r18
    4e8a:	33 1f       	adc	r19, r19
    4e8c:	02 9b       	sbis	0x00, 2	; 0
    4e8e:	02 c0       	rjmp	.+4      	; 0x4e94 <Spi16+0x15c>
    4e90:	2f 5f       	subi	r18, 0xFF	; 255
    4e92:	3f 4f       	sbci	r19, 0xFF	; 255
    4e94:	13 9a       	sbi	0x02, 3	; 2
    4e96:	8d e0       	ldi	r24, 0x0D	; 13
    4e98:	8a 95       	dec	r24
    4e9a:	f1 f7       	brne	.-4      	; 0x4e98 <Spi16+0x160>
    4e9c:	13 98       	cbi	0x02, 3	; 2
    4e9e:	44 0f       	add	r20, r20
    4ea0:	55 1f       	adc	r21, r21
    4ea2:	ca 01       	movw	r24, r20
    4ea4:	80 70       	andi	r24, 0x00	; 0
    4ea6:	90 78       	andi	r25, 0x80	; 128
    4ea8:	89 2b       	or	r24, r25
    4eaa:	09 f4       	brne	.+2      	; 0x4eae <Spi16+0x176>
    4eac:	91 c0       	rjmp	.+290    	; 0x4fd0 <Spi16+0x298>
    4eae:	10 9a       	sbi	0x02, 0	; 2
    4eb0:	22 0f       	add	r18, r18
    4eb2:	33 1f       	adc	r19, r19
    4eb4:	02 9b       	sbis	0x00, 2	; 0
    4eb6:	02 c0       	rjmp	.+4      	; 0x4ebc <Spi16+0x184>
    4eb8:	2f 5f       	subi	r18, 0xFF	; 255
    4eba:	3f 4f       	sbci	r19, 0xFF	; 255
    4ebc:	13 9a       	sbi	0x02, 3	; 2
    4ebe:	8d e0       	ldi	r24, 0x0D	; 13
    4ec0:	8a 95       	dec	r24
    4ec2:	f1 f7       	brne	.-4      	; 0x4ec0 <Spi16+0x188>
    4ec4:	13 98       	cbi	0x02, 3	; 2
    4ec6:	44 0f       	add	r20, r20
    4ec8:	55 1f       	adc	r21, r21
    4eca:	ca 01       	movw	r24, r20
    4ecc:	80 70       	andi	r24, 0x00	; 0
    4ece:	90 78       	andi	r25, 0x80	; 128
    4ed0:	89 2b       	or	r24, r25
    4ed2:	09 f4       	brne	.+2      	; 0x4ed6 <Spi16+0x19e>
    4ed4:	7b c0       	rjmp	.+246    	; 0x4fcc <Spi16+0x294>
    4ed6:	10 9a       	sbi	0x02, 0	; 2
    4ed8:	22 0f       	add	r18, r18
    4eda:	33 1f       	adc	r19, r19
    4edc:	02 9b       	sbis	0x00, 2	; 0
    4ede:	02 c0       	rjmp	.+4      	; 0x4ee4 <Spi16+0x1ac>
    4ee0:	2f 5f       	subi	r18, 0xFF	; 255
    4ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    4ee4:	13 9a       	sbi	0x02, 3	; 2
    4ee6:	8d e0       	ldi	r24, 0x0D	; 13
    4ee8:	8a 95       	dec	r24
    4eea:	f1 f7       	brne	.-4      	; 0x4ee8 <Spi16+0x1b0>
    4eec:	13 98       	cbi	0x02, 3	; 2
    4eee:	44 0f       	add	r20, r20
    4ef0:	55 1f       	adc	r21, r21
    4ef2:	ca 01       	movw	r24, r20
    4ef4:	80 70       	andi	r24, 0x00	; 0
    4ef6:	90 78       	andi	r25, 0x80	; 128
    4ef8:	89 2b       	or	r24, r25
    4efa:	09 f4       	brne	.+2      	; 0x4efe <Spi16+0x1c6>
    4efc:	65 c0       	rjmp	.+202    	; 0x4fc8 <Spi16+0x290>
    4efe:	10 9a       	sbi	0x02, 0	; 2
    4f00:	22 0f       	add	r18, r18
    4f02:	33 1f       	adc	r19, r19
    4f04:	02 9b       	sbis	0x00, 2	; 0
    4f06:	02 c0       	rjmp	.+4      	; 0x4f0c <Spi16+0x1d4>
    4f08:	2f 5f       	subi	r18, 0xFF	; 255
    4f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    4f0c:	13 9a       	sbi	0x02, 3	; 2
    4f0e:	8d e0       	ldi	r24, 0x0D	; 13
    4f10:	8a 95       	dec	r24
    4f12:	f1 f7       	brne	.-4      	; 0x4f10 <Spi16+0x1d8>
    4f14:	13 98       	cbi	0x02, 3	; 2
    4f16:	44 0f       	add	r20, r20
    4f18:	55 1f       	adc	r21, r21
    4f1a:	ca 01       	movw	r24, r20
    4f1c:	80 70       	andi	r24, 0x00	; 0
    4f1e:	90 78       	andi	r25, 0x80	; 128
    4f20:	89 2b       	or	r24, r25
    4f22:	09 f4       	brne	.+2      	; 0x4f26 <Spi16+0x1ee>
    4f24:	4f c0       	rjmp	.+158    	; 0x4fc4 <Spi16+0x28c>
    4f26:	10 9a       	sbi	0x02, 0	; 2
    4f28:	22 0f       	add	r18, r18
    4f2a:	33 1f       	adc	r19, r19
    4f2c:	02 9b       	sbis	0x00, 2	; 0
    4f2e:	02 c0       	rjmp	.+4      	; 0x4f34 <Spi16+0x1fc>
    4f30:	2f 5f       	subi	r18, 0xFF	; 255
    4f32:	3f 4f       	sbci	r19, 0xFF	; 255
    4f34:	13 9a       	sbi	0x02, 3	; 2
    4f36:	8d e0       	ldi	r24, 0x0D	; 13
    4f38:	8a 95       	dec	r24
    4f3a:	f1 f7       	brne	.-4      	; 0x4f38 <Spi16+0x200>
    4f3c:	13 98       	cbi	0x02, 3	; 2
    4f3e:	ba 01       	movw	r22, r20
    4f40:	66 0f       	add	r22, r22
    4f42:	77 1f       	adc	r23, r23
    4f44:	cb 01       	movw	r24, r22
    4f46:	80 70       	andi	r24, 0x00	; 0
    4f48:	90 78       	andi	r25, 0x80	; 128
    4f4a:	89 2b       	or	r24, r25
    4f4c:	09 f4       	brne	.+2      	; 0x4f50 <Spi16+0x218>
    4f4e:	38 c0       	rjmp	.+112    	; 0x4fc0 <Spi16+0x288>
    4f50:	10 9a       	sbi	0x02, 0	; 2
    4f52:	a9 01       	movw	r20, r18
    4f54:	44 0f       	add	r20, r20
    4f56:	55 1f       	adc	r21, r21
    4f58:	02 9b       	sbis	0x00, 2	; 0
    4f5a:	02 c0       	rjmp	.+4      	; 0x4f60 <Spi16+0x228>
    4f5c:	4f 5f       	subi	r20, 0xFF	; 255
    4f5e:	5f 4f       	sbci	r21, 0xFF	; 255
    4f60:	13 9a       	sbi	0x02, 3	; 2
    4f62:	8d e0       	ldi	r24, 0x0D	; 13
    4f64:	8a 95       	dec	r24
    4f66:	f1 f7       	brne	.-4      	; 0x4f64 <Spi16+0x22c>
    4f68:	13 98       	cbi	0x02, 3	; 2
    4f6a:	9b 01       	movw	r18, r22
    4f6c:	22 0f       	add	r18, r18
    4f6e:	33 1f       	adc	r19, r19
    4f70:	c9 01       	movw	r24, r18
    4f72:	80 70       	andi	r24, 0x00	; 0
    4f74:	90 78       	andi	r25, 0x80	; 128
    4f76:	89 2b       	or	r24, r25
    4f78:	09 f1       	breq	.+66     	; 0x4fbc <Spi16+0x284>
    4f7a:	10 9a       	sbi	0x02, 0	; 2
    4f7c:	ca 01       	movw	r24, r20
    4f7e:	88 0f       	add	r24, r24
    4f80:	99 1f       	adc	r25, r25
    4f82:	02 99       	sbic	0x00, 2	; 0
    4f84:	01 96       	adiw	r24, 0x01	; 1
    4f86:	13 9a       	sbi	0x02, 3	; 2
    4f88:	4d e0       	ldi	r20, 0x0D	; 13
    4f8a:	4a 95       	dec	r20
    4f8c:	f1 f7       	brne	.-4      	; 0x4f8a <Spi16+0x252>
    4f8e:	13 98       	cbi	0x02, 3	; 2
    4f90:	22 0f       	add	r18, r18
    4f92:	33 1f       	adc	r19, r19
    4f94:	23 2b       	or	r18, r19
    4f96:	81 f4       	brne	.+32     	; 0x4fb8 <Spi16+0x280>
    4f98:	10 98       	cbi	0x02, 0	; 2
    4f9a:	9c 01       	movw	r18, r24
    4f9c:	22 0f       	add	r18, r18
    4f9e:	33 1f       	adc	r19, r19
    4fa0:	02 9b       	sbis	0x00, 2	; 0
    4fa2:	02 c0       	rjmp	.+4      	; 0x4fa8 <Spi16+0x270>
    4fa4:	2f 5f       	subi	r18, 0xFF	; 255
    4fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    4fa8:	13 9a       	sbi	0x02, 3	; 2
    4faa:	8d e0       	ldi	r24, 0x0D	; 13
    4fac:	8a 95       	dec	r24
    4fae:	f1 f7       	brne	.-4      	; 0x4fac <Spi16+0x274>
    4fb0:	13 98       	cbi	0x02, 3	; 2
    4fb2:	11 9a       	sbi	0x02, 1	; 2
    4fb4:	c9 01       	movw	r24, r18
    4fb6:	08 95       	ret
    4fb8:	10 9a       	sbi	0x02, 0	; 2
    4fba:	ef cf       	rjmp	.-34     	; 0x4f9a <Spi16+0x262>
    4fbc:	10 98       	cbi	0x02, 0	; 2
    4fbe:	de cf       	rjmp	.-68     	; 0x4f7c <Spi16+0x244>
    4fc0:	10 98       	cbi	0x02, 0	; 2
    4fc2:	c7 cf       	rjmp	.-114    	; 0x4f52 <Spi16+0x21a>
    4fc4:	10 98       	cbi	0x02, 0	; 2
    4fc6:	b0 cf       	rjmp	.-160    	; 0x4f28 <Spi16+0x1f0>
    4fc8:	10 98       	cbi	0x02, 0	; 2
    4fca:	9a cf       	rjmp	.-204    	; 0x4f00 <Spi16+0x1c8>
    4fcc:	10 98       	cbi	0x02, 0	; 2
    4fce:	84 cf       	rjmp	.-248    	; 0x4ed8 <Spi16+0x1a0>
    4fd0:	10 98       	cbi	0x02, 0	; 2
    4fd2:	6e cf       	rjmp	.-292    	; 0x4eb0 <Spi16+0x178>
    4fd4:	10 98       	cbi	0x02, 0	; 2
    4fd6:	58 cf       	rjmp	.-336    	; 0x4e88 <Spi16+0x150>
    4fd8:	10 98       	cbi	0x02, 0	; 2
    4fda:	42 cf       	rjmp	.-380    	; 0x4e60 <Spi16+0x128>
    4fdc:	10 98       	cbi	0x02, 0	; 2
    4fde:	2c cf       	rjmp	.-424    	; 0x4e38 <Spi16+0x100>
    4fe0:	10 98       	cbi	0x02, 0	; 2
    4fe2:	16 cf       	rjmp	.-468    	; 0x4e10 <Spi16+0xd8>
    4fe4:	10 98       	cbi	0x02, 0	; 2
    4fe6:	00 cf       	rjmp	.-512    	; 0x4de8 <Spi16+0xb0>
    4fe8:	10 98       	cbi	0x02, 0	; 2
    4fea:	ea ce       	rjmp	.-556    	; 0x4dc0 <Spi16+0x88>
    4fec:	10 98       	cbi	0x02, 0	; 2
    4fee:	d4 ce       	rjmp	.-600    	; 0x4d98 <Spi16+0x60>
    4ff0:	10 98       	cbi	0x02, 0	; 2
    4ff2:	be ce       	rjmp	.-644    	; 0x4d70 <Spi16+0x38>
    4ff4:	10 98       	cbi	0x02, 0	; 2
    4ff6:	a5 ce       	rjmp	.-694    	; 0x4d42 <Spi16+0xa>

00004ff8 <RFM12_Init>:
    4ff8:	81 b1       	in	r24, 0x01	; 1
    4ffa:	8b 61       	ori	r24, 0x1B	; 27
    4ffc:	81 b9       	out	0x01, r24	; 1
    4ffe:	14 9a       	sbi	0x02, 4	; 2
    5000:	20 e0       	ldi	r18, 0x00	; 0
    5002:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5004:	48 ec       	ldi	r20, 0xC8	; 200
    5006:	50 e0       	ldi	r21, 0x00	; 0
    5008:	ca 01       	movw	r24, r20
    500a:	01 97       	sbiw	r24, 0x01	; 1
    500c:	f1 f7       	brne	.-4      	; 0x500a <RFM12_Init+0x12>
    500e:	2f 5f       	subi	r18, 0xFF	; 255
    5010:	3f 4f       	sbci	r19, 0xFF	; 255
    5012:	87 e2       	ldi	r24, 0x27	; 39
    5014:	20 31       	cpi	r18, 0x10	; 16
    5016:	38 07       	cpc	r19, r24
    5018:	b9 f7       	brne	.-18     	; 0x5008 <RFM12_Init+0x10>
    501a:	11 9a       	sbi	0x02, 1	; 2
    501c:	13 98       	cbi	0x02, 3	; 2
    501e:	87 ee       	ldi	r24, 0xE7	; 231
    5020:	90 e8       	ldi	r25, 0x80	; 128
    5022:	8a de       	rcall	.-748    	; 0x4d38 <Spi16>
    5024:	89 ed       	ldi	r24, 0xD9	; 217
    5026:	92 e8       	ldi	r25, 0x82	; 130
    5028:	87 de       	rcall	.-754    	; 0x4d38 <Spi16>
    502a:	8c e7       	ldi	r24, 0x7C	; 124
    502c:	96 ea       	ldi	r25, 0xA6	; 166
    502e:	84 de       	rcall	.-760    	; 0x4d38 <Spi16>
    5030:	87 e4       	ldi	r24, 0x47	; 71
    5032:	96 ec       	ldi	r25, 0xC6	; 198
    5034:	81 de       	rcall	.-766    	; 0x4d38 <Spi16>
    5036:	81 ea       	ldi	r24, 0xA1	; 161
    5038:	94 e9       	ldi	r25, 0x94	; 148
    503a:	7e de       	rcall	.-772    	; 0x4d38 <Spi16>
    503c:	89 ea       	ldi	r24, 0xA9	; 169
    503e:	92 ec       	ldi	r25, 0xC2	; 194
    5040:	7b de       	rcall	.-778    	; 0x4d38 <Spi16>
    5042:	81 e8       	ldi	r24, 0x81	; 129
    5044:	9a ec       	ldi	r25, 0xCA	; 202
    5046:	78 de       	rcall	.-784    	; 0x4d38 <Spi16>
    5048:	83 e8       	ldi	r24, 0x83	; 131
    504a:	94 ec       	ldi	r25, 0xC4	; 196
    504c:	75 de       	rcall	.-790    	; 0x4d38 <Spi16>
    504e:	80 e5       	ldi	r24, 0x50	; 80
    5050:	98 e9       	ldi	r25, 0x98	; 152
    5052:	72 de       	rcall	.-796    	; 0x4d38 <Spi16>
    5054:	80 e0       	ldi	r24, 0x00	; 0
    5056:	90 ee       	ldi	r25, 0xE0	; 224
    5058:	6f de       	rcall	.-802    	; 0x4d38 <Spi16>
    505a:	80 e0       	ldi	r24, 0x00	; 0
    505c:	98 ec       	ldi	r25, 0xC8	; 200
    505e:	6c de       	rcall	.-808    	; 0x4d38 <Spi16>
    5060:	80 e0       	ldi	r24, 0x00	; 0
    5062:	90 ec       	ldi	r25, 0xC0	; 192
    5064:	69 de       	rcall	.-814    	; 0x4d38 <Spi16>
    5066:	80 e0       	ldi	r24, 0x00	; 0
    5068:	90 e0       	ldi	r25, 0x00	; 0
    506a:	66 ce       	rjmp	.-820    	; 0x4d38 <Spi16>

0000506c <Enable_receiver>:
    506c:	11 98       	cbi	0x02, 1	; 2
    506e:	88 ec       	ldi	r24, 0xC8	; 200
    5070:	92 e8       	ldi	r25, 0x82	; 130
    5072:	62 de       	rcall	.-828    	; 0x4d38 <Spi16>
    5074:	83 e8       	ldi	r24, 0x83	; 131
    5076:	9a ec       	ldi	r25, 0xCA	; 202
    5078:	5f ce       	rjmp	.-834    	; 0x4d38 <Spi16>

0000507a <RestartFifoFill_receiver>:
    507a:	81 e8       	ldi	r24, 0x81	; 129
    507c:	9a ec       	ldi	r25, 0xCA	; 202
    507e:	5c de       	rcall	.-840    	; 0x4d38 <Spi16>
    5080:	80 e1       	ldi	r24, 0x10	; 16
    5082:	97 e2       	ldi	r25, 0x27	; 39
    5084:	01 97       	sbiw	r24, 0x01	; 1
    5086:	f1 f7       	brne	.-4      	; 0x5084 <RestartFifoFill_receiver+0xa>
    5088:	83 e8       	ldi	r24, 0x83	; 131
    508a:	9a ec       	ldi	r25, 0xCA	; 202
    508c:	55 ce       	rjmp	.-854    	; 0x4d38 <Spi16>

0000508e <HYT321_GetData>:
    508e:	6f 92       	push	r6
    5090:	7f 92       	push	r7
    5092:	9f 92       	push	r9
    5094:	af 92       	push	r10
    5096:	bf 92       	push	r11
    5098:	cf 92       	push	r12
    509a:	df 92       	push	r13
    509c:	ef 92       	push	r14
    509e:	ff 92       	push	r15
    50a0:	0f 93       	push	r16
    50a2:	1f 93       	push	r17
    50a4:	cf 93       	push	r28
    50a6:	df 93       	push	r29
    50a8:	ec 01       	movw	r28, r24
    50aa:	3b 01       	movw	r6, r22
    50ac:	80 e5       	ldi	r24, 0x50	; 80
    50ae:	6a e0       	ldi	r22, 0x0A	; 10
    50b0:	0e 94 92 31 	call	0x6324	; 0x6324 <TWI_StartTransmission>
    50b4:	88 23       	and	r24, r24
    50b6:	19 f0       	breq	.+6      	; 0x50be <HYT321_GetData+0x30>
    50b8:	84 e9       	ldi	r24, 0x94	; 148
    50ba:	80 93 bc 00 	sts	0x00BC, r24
    50be:	80 e2       	ldi	r24, 0x20	; 32
    50c0:	9e e4       	ldi	r25, 0x4E	; 78
    50c2:	01 97       	sbiw	r24, 0x01	; 1
    50c4:	f1 f7       	brne	.-4      	; 0x50c2 <HYT321_GetData+0x34>
    50c6:	81 e5       	ldi	r24, 0x51	; 81
    50c8:	6a e0       	ldi	r22, 0x0A	; 10
    50ca:	0e 94 92 31 	call	0x6324	; 0x6324 <TWI_StartTransmission>
    50ce:	88 23       	and	r24, r24
    50d0:	09 f4       	brne	.+2      	; 0x50d4 <HYT321_GetData+0x46>
    50d2:	96 c0       	rjmp	.+300    	; 0x5200 <HYT321_GetData+0x172>
    50d4:	84 ec       	ldi	r24, 0xC4	; 196
    50d6:	80 93 bc 00 	sts	0x00BC, r24
    50da:	80 91 bc 00 	lds	r24, 0x00BC
    50de:	87 ff       	sbrs	r24, 7
    50e0:	fc cf       	rjmp	.-8      	; 0x50da <HYT321_GetData+0x4c>
    50e2:	90 91 bb 00 	lds	r25, 0x00BB
    50e6:	80 91 b9 00 	lds	r24, 0x00B9
    50ea:	84 ec       	ldi	r24, 0xC4	; 196
    50ec:	80 93 bc 00 	sts	0x00BC, r24
    50f0:	80 91 bc 00 	lds	r24, 0x00BC
    50f4:	87 ff       	sbrs	r24, 7
    50f6:	fc cf       	rjmp	.-8      	; 0x50f0 <HYT321_GetData+0x62>
    50f8:	20 91 bb 00 	lds	r18, 0x00BB
    50fc:	80 91 b9 00 	lds	r24, 0x00B9
    5100:	84 ec       	ldi	r24, 0xC4	; 196
    5102:	80 93 bc 00 	sts	0x00BC, r24
    5106:	80 91 bc 00 	lds	r24, 0x00BC
    510a:	87 ff       	sbrs	r24, 7
    510c:	fc cf       	rjmp	.-8      	; 0x5106 <HYT321_GetData+0x78>
    510e:	60 91 bb 00 	lds	r22, 0x00BB
    5112:	80 91 b9 00 	lds	r24, 0x00B9
    5116:	84 e8       	ldi	r24, 0x84	; 132
    5118:	80 93 bc 00 	sts	0x00BC, r24
    511c:	80 91 bc 00 	lds	r24, 0x00BC
    5120:	87 ff       	sbrs	r24, 7
    5122:	fc cf       	rjmp	.-8      	; 0x511c <HYT321_GetData+0x8e>
    5124:	90 90 bb 00 	lds	r9, 0x00BB
    5128:	80 91 b9 00 	lds	r24, 0x00B9
    512c:	84 e9       	ldi	r24, 0x94	; 148
    512e:	80 93 bc 00 	sts	0x00BC, r24
    5132:	30 e0       	ldi	r19, 0x00	; 0
    5134:	40 e0       	ldi	r20, 0x00	; 0
    5136:	50 e0       	ldi	r21, 0x00	; 0
    5138:	a6 2e       	mov	r10, r22
    513a:	bb 24       	eor	r11, r11
    513c:	cc 24       	eor	r12, r12
    513e:	dd 24       	eor	r13, r13
    5140:	aa 0c       	add	r10, r10
    5142:	bb 1c       	adc	r11, r11
    5144:	cc 1c       	adc	r12, r12
    5146:	dd 1c       	adc	r13, r13
    5148:	aa 0c       	add	r10, r10
    514a:	bb 1c       	adc	r11, r11
    514c:	cc 1c       	adc	r12, r12
    514e:	dd 1c       	adc	r13, r13
    5150:	aa 0c       	add	r10, r10
    5152:	bb 1c       	adc	r11, r11
    5154:	cc 1c       	adc	r12, r12
    5156:	dd 1c       	adc	r13, r13
    5158:	aa 0c       	add	r10, r10
    515a:	bb 1c       	adc	r11, r11
    515c:	cc 1c       	adc	r12, r12
    515e:	dd 1c       	adc	r13, r13
    5160:	aa 0c       	add	r10, r10
    5162:	bb 1c       	adc	r11, r11
    5164:	cc 1c       	adc	r12, r12
    5166:	dd 1c       	adc	r13, r13
    5168:	aa 0c       	add	r10, r10
    516a:	bb 1c       	adc	r11, r11
    516c:	cc 1c       	adc	r12, r12
    516e:	dd 1c       	adc	r13, r13
    5170:	9f 73       	andi	r25, 0x3F	; 63
    5172:	89 2f       	mov	r24, r25
    5174:	90 e0       	ldi	r25, 0x00	; 0
    5176:	a0 e0       	ldi	r26, 0x00	; 0
    5178:	b0 e0       	ldi	r27, 0x00	; 0
    517a:	ba 2f       	mov	r27, r26
    517c:	a9 2f       	mov	r26, r25
    517e:	98 2f       	mov	r25, r24
    5180:	88 27       	eor	r24, r24
    5182:	28 0f       	add	r18, r24
    5184:	39 1f       	adc	r19, r25
    5186:	4a 1f       	adc	r20, r26
    5188:	5b 1f       	adc	r21, r27
    518a:	ca 01       	movw	r24, r20
    518c:	b9 01       	movw	r22, r18
    518e:	24 e6       	ldi	r18, 0x64	; 100
    5190:	30 e0       	ldi	r19, 0x00	; 0
    5192:	40 e0       	ldi	r20, 0x00	; 0
    5194:	50 e0       	ldi	r21, 0x00	; 0
    5196:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__mulsi3>
    519a:	7b 01       	movw	r14, r22
    519c:	8c 01       	movw	r16, r24
    519e:	96 94       	lsr	r9
    51a0:	96 94       	lsr	r9
    51a2:	a9 0c       	add	r10, r9
    51a4:	b1 1c       	adc	r11, r1
    51a6:	c1 1c       	adc	r12, r1
    51a8:	d1 1c       	adc	r13, r1
    51aa:	c6 01       	movw	r24, r12
    51ac:	b5 01       	movw	r22, r10
    51ae:	25 ea       	ldi	r18, 0xA5	; 165
    51b0:	30 e0       	ldi	r19, 0x00	; 0
    51b2:	40 e0       	ldi	r20, 0x00	; 0
    51b4:	50 e0       	ldi	r21, 0x00	; 0
    51b6:	0e 94 fd 31 	call	0x63fa	; 0x63fa <__mulsi3>
    51ba:	20 e0       	ldi	r18, 0x00	; 0
    51bc:	30 e4       	ldi	r19, 0x40	; 64
    51be:	40 e0       	ldi	r20, 0x00	; 0
    51c0:	50 e0       	ldi	r21, 0x00	; 0
    51c2:	0e 94 4a 32 	call	0x6494	; 0x6494 <__divmodsi4>
    51c6:	c9 01       	movw	r24, r18
    51c8:	da 01       	movw	r26, r20
    51ca:	2e e0       	ldi	r18, 0x0E	; 14
    51cc:	16 95       	lsr	r17
    51ce:	07 95       	ror	r16
    51d0:	f7 94       	ror	r15
    51d2:	e7 94       	ror	r14
    51d4:	2a 95       	dec	r18
    51d6:	d1 f7       	brne	.-12     	; 0x51cc <HYT321_GetData+0x13e>
    51d8:	e8 82       	st	Y, r14
    51da:	88 97       	sbiw	r24, 0x28	; 40
    51dc:	a1 09       	sbc	r26, r1
    51de:	b1 09       	sbc	r27, r1
    51e0:	f3 01       	movw	r30, r6
    51e2:	80 83       	st	Z, r24
    51e4:	df 91       	pop	r29
    51e6:	cf 91       	pop	r28
    51e8:	1f 91       	pop	r17
    51ea:	0f 91       	pop	r16
    51ec:	ff 90       	pop	r15
    51ee:	ef 90       	pop	r14
    51f0:	df 90       	pop	r13
    51f2:	cf 90       	pop	r12
    51f4:	bf 90       	pop	r11
    51f6:	af 90       	pop	r10
    51f8:	9f 90       	pop	r9
    51fa:	7f 90       	pop	r7
    51fc:	6f 90       	pop	r6
    51fe:	08 95       	ret
    5200:	20 e0       	ldi	r18, 0x00	; 0
    5202:	30 e0       	ldi	r19, 0x00	; 0
    5204:	40 e0       	ldi	r20, 0x00	; 0
    5206:	50 e0       	ldi	r21, 0x00	; 0
    5208:	aa 24       	eor	r10, r10
    520a:	bb 24       	eor	r11, r11
    520c:	65 01       	movw	r12, r10
    520e:	b0 cf       	rjmp	.-160    	; 0x5170 <HYT321_GetData+0xe2>

00005210 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    5210:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    5214:	80 91 eb 00 	lds	r24, 0x00EB
    5218:	81 60       	ori	r24, 0x01	; 1
    521a:	80 93 eb 00 	sts	0x00EB, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    521e:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
    5222:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    5226:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    522a:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
    522e:	88 1f       	adc	r24, r24
    5230:	88 27       	eor	r24, r24
    5232:	88 1f       	adc	r24, r24
    5234:	08 95       	ret

00005236 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    5236:	80 91 77 06 	lds	r24, 0x0677
    523a:	88 23       	and	r24, r24
    523c:	9c f4       	brge	.+38     	; 0x5264 <Endpoint_ClearStatusStage+0x2e>
    523e:	04 c0       	rjmp	.+8      	; 0x5248 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    5240:	80 91 76 06 	lds	r24, 0x0676
    5244:	88 23       	and	r24, r24
    5246:	b9 f0       	breq	.+46     	; 0x5276 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    5248:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    524c:	82 ff       	sbrs	r24, 2
    524e:	f8 cf       	rjmp	.-16     	; 0x5240 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    5250:	80 91 e8 00 	lds	r24, 0x00E8
    5254:	8b 77       	andi	r24, 0x7B	; 123
    5256:	80 93 e8 00 	sts	0x00E8, r24
    525a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    525c:	80 91 76 06 	lds	r24, 0x0676
    5260:	88 23       	and	r24, r24
    5262:	49 f0       	breq	.+18     	; 0x5276 <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    5264:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    5268:	80 ff       	sbrs	r24, 0
    526a:	f8 cf       	rjmp	.-16     	; 0x525c <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    526c:	80 91 e8 00 	lds	r24, 0x00E8
    5270:	8e 77       	andi	r24, 0x7E	; 126
    5272:	80 93 e8 00 	sts	0x00E8, r24
    5276:	08 95       	ret

00005278 <Endpoint_WaitUntilReady>:
			/** Returns the current USB frame number, when in device mode. Every millisecond the USB bus is active (i.e. enumerated to a host)
			 *  the frame number is incremented by one.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    5278:	40 91 e4 00 	lds	r20, 0x00E4
    527c:	50 91 e5 00 	lds	r21, 0x00E5
    5280:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
    5282:	80 91 ec 00 	lds	r24, 0x00EC

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    5286:	80 ff       	sbrs	r24, 0
    5288:	05 c0       	rjmp	.+10     	; 0x5294 <Endpoint_WaitUntilReady+0x1c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    528a:	80 91 e8 00 	lds	r24, 0x00E8
		{
			if (Endpoint_IsINReady())
    528e:	80 ff       	sbrs	r24, 0
    5290:	05 c0       	rjmp	.+10     	; 0x529c <Endpoint_WaitUntilReady+0x24>
    5292:	22 c0       	rjmp	.+68     	; 0x52d8 <Endpoint_WaitUntilReady+0x60>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    5294:	80 91 e8 00 	lds	r24, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    5298:	82 fd       	sbrc	r24, 2
    529a:	1e c0       	rjmp	.+60     	; 0x52d8 <Endpoint_WaitUntilReady+0x60>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    529c:	80 91 76 06 	lds	r24, 0x0676

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    52a0:	88 23       	and	r24, r24
    52a2:	11 f4       	brne	.+4      	; 0x52a8 <Endpoint_WaitUntilReady+0x30>
    52a4:	82 e0       	ldi	r24, 0x02	; 2
    52a6:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    52a8:	85 30       	cpi	r24, 0x05	; 5
    52aa:	11 f4       	brne	.+4      	; 0x52b0 <Endpoint_WaitUntilReady+0x38>
    52ac:	83 e0       	ldi	r24, 0x03	; 3
    52ae:	08 95       	ret
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    52b0:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    52b4:	85 ff       	sbrs	r24, 5
    52b6:	02 c0       	rjmp	.+4      	; 0x52bc <Endpoint_WaitUntilReady+0x44>
    52b8:	81 e0       	ldi	r24, 0x01	; 1
    52ba:	08 95       	ret
    52bc:	80 91 e4 00 	lds	r24, 0x00E4
    52c0:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    52c4:	84 17       	cp	r24, r20
    52c6:	95 07       	cpc	r25, r21
    52c8:	e1 f2       	breq	.-72     	; 0x5282 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    52ca:	22 23       	and	r18, r18
    52cc:	11 f4       	brne	.+4      	; 0x52d2 <Endpoint_WaitUntilReady+0x5a>
    52ce:	84 e0       	ldi	r24, 0x04	; 4
    52d0:	08 95       	ret
    52d2:	21 50       	subi	r18, 0x01	; 1
    52d4:	ac 01       	movw	r20, r24
    52d6:	d5 cf       	rjmp	.-86     	; 0x5282 <Endpoint_WaitUntilReady+0xa>
    52d8:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    52da:	08 95       	ret

000052dc <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    52dc:	55 d0       	rcall	.+170    	; 0x5388 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    52de:	5c d0       	rcall	.+184    	; 0x5398 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
    52e0:	80 91 d8 00 	lds	r24, 0x00D8

				USBCON = (Temp & ~(1 << USBE));
    52e4:	98 2f       	mov	r25, r24
    52e6:	9f 77       	andi	r25, 0x7F	; 127
    52e8:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
    52ec:	80 68       	ori	r24, 0x80	; 128
    52ee:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
    52f2:	8c e0       	ldi	r24, 0x0C	; 12
    52f4:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
    52f6:	89 b5       	in	r24, 0x29	; 41
    52f8:	82 60       	ori	r24, 0x02	; 2
    52fa:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    52fc:	09 b4       	in	r0, 0x29	; 41
    52fe:	00 fe       	sbrs	r0, 0
    5300:	fd cf       	rjmp	.-6      	; 0x52fc <USB_ResetInterface+0x20>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    5302:	80 91 d8 00 	lds	r24, 0x00D8
    5306:	8f 7d       	andi	r24, 0xDF	; 223
    5308:	80 93 d8 00 	sts	0x00D8, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    530c:	80 91 d7 00 	lds	r24, 0x00D7
    5310:	80 68       	ori	r24, 0x80	; 128
    5312:	80 93 d7 00 	sts	0x00D7, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState          = DEVICE_STATE_Unattached;
    5316:	10 92 76 06 	sts	0x0676, r1
	USB_ConfigurationNumber  = 0;
    531a:	10 92 74 06 	sts	0x0674, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
    531e:	10 92 73 06 	sts	0x0673, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
    5322:	10 92 72 06 	sts	0x0672, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    5326:	80 91 e0 00 	lds	r24, 0x00E0
    532a:	8b 7f       	andi	r24, 0xFB	; 251
    532c:	80 93 e0 00 	sts	0x00E0, r24
	if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
	  USB_Device_SetLowSpeed();
	else
	  USB_Device_SetFullSpeed();

	USB_INT_Enable(USB_INT_VBUS);
    5330:	80 91 d8 00 	lds	r24, 0x00D8
    5334:	81 60       	ori	r24, 0x01	; 1
    5336:	80 93 d8 00 	sts	0x00D8, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
    533a:	80 e0       	ldi	r24, 0x00	; 0
    533c:	60 e0       	ldi	r22, 0x00	; 0
    533e:	42 e0       	ldi	r20, 0x02	; 2
    5340:	67 df       	rcall	.-306    	; 0x5210 <Endpoint_ConfigureEndpoint_Prv>

	Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
							   ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
							   ENDPOINT_BANK_SINGLE);

	USB_INT_Clear(USB_INT_SUSPI);
    5342:	80 91 e1 00 	lds	r24, 0x00E1
    5346:	8e 7f       	andi	r24, 0xFE	; 254
    5348:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPI);
    534c:	80 91 e2 00 	lds	r24, 0x00E2
    5350:	81 60       	ori	r24, 0x01	; 1
    5352:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Enable(USB_INT_EORSTI);
    5356:	80 91 e2 00 	lds	r24, 0x00E2
    535a:	88 60       	ori	r24, 0x08	; 8
    535c:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    5360:	80 91 e0 00 	lds	r24, 0x00E0
    5364:	8e 7f       	andi	r24, 0xFE	; 254
    5366:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    536a:	80 91 d8 00 	lds	r24, 0x00D8
    536e:	80 61       	ori	r24, 0x10	; 16
    5370:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    5374:	08 95       	ret

00005376 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    5376:	e7 ed       	ldi	r30, 0xD7	; 215
    5378:	f0 e0       	ldi	r31, 0x00	; 0
    537a:	80 81       	ld	r24, Z
    537c:	81 60       	ori	r24, 0x01	; 1
    537e:	80 83       	st	Z, r24
	{
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    5380:	81 e0       	ldi	r24, 0x01	; 1
    5382:	80 93 75 06 	sts	0x0675, r24

	USB_ResetInterface();
}
    5386:	aa cf       	rjmp	.-172    	; 0x52dc <USB_ResetInterface>

00005388 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    5388:	e8 ed       	ldi	r30, 0xD8	; 216
    538a:	f0 e0       	ldi	r31, 0x00	; 0
    538c:	80 81       	ld	r24, Z
    538e:	8c 7f       	andi	r24, 0xFC	; 252
    5390:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    5392:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    5396:	08 95       	ret

00005398 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
    5398:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
    539c:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    53a0:	08 95       	ret

000053a2 <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    53a2:	1f 92       	push	r1
    53a4:	0f 92       	push	r0
    53a6:	0f b6       	in	r0, 0x3f	; 63
    53a8:	0f 92       	push	r0
    53aa:	11 24       	eor	r1, r1
    53ac:	1f 93       	push	r17
    53ae:	2f 93       	push	r18
    53b0:	3f 93       	push	r19
    53b2:	4f 93       	push	r20
    53b4:	5f 93       	push	r21
    53b6:	6f 93       	push	r22
    53b8:	7f 93       	push	r23
    53ba:	8f 93       	push	r24
    53bc:	9f 93       	push	r25
    53be:	af 93       	push	r26
    53c0:	bf 93       	push	r27
    53c2:	ef 93       	push	r30
    53c4:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    53c6:	e9 ee       	ldi	r30, 0xE9	; 233
    53c8:	f0 e0       	ldi	r31, 0x00	; 0
    53ca:	10 81       	ld	r17, Z
    53cc:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    53ce:	10 82       	st	Z, r1
	uint8_t PrevSelectedEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);
    53d0:	e0 ef       	ldi	r30, 0xF0	; 240
    53d2:	f0 e0       	ldi	r31, 0x00	; 0
    53d4:	80 81       	ld	r24, Z
    53d6:	87 7f       	andi	r24, 0xF7	; 247
    53d8:	80 83       	st	Z, r24

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    53da:	78 94       	sei

	NONATOMIC_BLOCK(NONATOMIC_FORCEOFF)
	{
		USB_Device_ProcessControlRequest();
    53dc:	e6 d0       	rcall	.+460    	; 0x55aa <USB_Device_ProcessControlRequest>
    (void)__s;
}

static __inline__ void __iCliParam(const uint8_t *__s)
{
    cli();
    53de:	f8 94       	cli
    53e0:	a9 ee       	ldi	r26, 0xE9	; 233
    53e2:	b0 e0       	ldi	r27, 0x00	; 0
    53e4:	1c 92       	st	X, r1
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
    53e6:	e0 ef       	ldi	r30, 0xF0	; 240
    53e8:	f0 e0       	ldi	r31, 0x00	; 0
    53ea:	80 81       	ld	r24, Z
    53ec:	88 60       	ori	r24, 0x08	; 8
    53ee:	80 83       	st	Z, r24
    53f0:	1c 93       	st	X, r17
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    53f2:	ff 91       	pop	r31
    53f4:	ef 91       	pop	r30
    53f6:	bf 91       	pop	r27
    53f8:	af 91       	pop	r26
    53fa:	9f 91       	pop	r25
    53fc:	8f 91       	pop	r24
    53fe:	7f 91       	pop	r23
    5400:	6f 91       	pop	r22
    5402:	5f 91       	pop	r21
    5404:	4f 91       	pop	r20
    5406:	3f 91       	pop	r19
    5408:	2f 91       	pop	r18
    540a:	1f 91       	pop	r17
    540c:	0f 90       	pop	r0
    540e:	0f be       	out	0x3f, r0	; 63
    5410:	0f 90       	pop	r0
    5412:	1f 90       	pop	r1
    5414:	18 95       	reti

00005416 <__vector_10>:
	UDINT   = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    5416:	1f 92       	push	r1
    5418:	0f 92       	push	r0
    541a:	0f b6       	in	r0, 0x3f	; 63
    541c:	0f 92       	push	r0
    541e:	11 24       	eor	r1, r1
    5420:	2f 93       	push	r18
    5422:	3f 93       	push	r19
    5424:	4f 93       	push	r20
    5426:	5f 93       	push	r21
    5428:	6f 93       	push	r22
    542a:	7f 93       	push	r23
    542c:	8f 93       	push	r24
    542e:	9f 93       	push	r25
    5430:	af 93       	push	r26
    5432:	bf 93       	push	r27
    5434:	ef 93       	push	r30
    5436:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
    5438:	80 91 da 00 	lds	r24, 0x00DA
    543c:	80 ff       	sbrs	r24, 0
    543e:	17 c0       	rjmp	.+46     	; 0x546e <__vector_10+0x58>
    5440:	80 91 d8 00 	lds	r24, 0x00D8
    5444:	80 ff       	sbrs	r24, 0
    5446:	13 c0       	rjmp	.+38     	; 0x546e <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_VBUS);
    5448:	80 91 da 00 	lds	r24, 0x00DA
    544c:	8e 7f       	andi	r24, 0xFE	; 254
    544e:	80 93 da 00 	sts	0x00DA, r24
				 *  \note This function is not available on some AVR models which do not support hardware VBUS monitoring.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    5452:	80 91 d9 00 	lds	r24, 0x00D9

		if (USB_VBUS_GetStatus())
    5456:	80 ff       	sbrs	r24, 0
    5458:	06 c0       	rjmp	.+12     	; 0x5466 <__vector_10+0x50>
		{
			USB_DeviceState = DEVICE_STATE_Powered;
    545a:	81 e0       	ldi	r24, 0x01	; 1
    545c:	80 93 76 06 	sts	0x0676, r24
			EVENT_USB_Device_Connect();
    5460:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <EVENT_USB_Device_Connect>
    5464:	04 c0       	rjmp	.+8      	; 0x546e <__vector_10+0x58>
		}
		else
		{
			USB_DeviceState = DEVICE_STATE_Unattached;
    5466:	10 92 76 06 	sts	0x0676, r1
			EVENT_USB_Device_Disconnect();
    546a:	0e 94 85 04 	call	0x90a	; 0x90a <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    546e:	80 91 e1 00 	lds	r24, 0x00E1
    5472:	80 ff       	sbrs	r24, 0
    5474:	1e c0       	rjmp	.+60     	; 0x54b2 <__vector_10+0x9c>
    5476:	80 91 e2 00 	lds	r24, 0x00E2
    547a:	80 ff       	sbrs	r24, 0
    547c:	1a c0       	rjmp	.+52     	; 0x54b2 <__vector_10+0x9c>
	{
		USB_INT_Clear(USB_INT_SUSPI);
    547e:	80 91 e1 00 	lds	r24, 0x00E1
    5482:	8e 7f       	andi	r24, 0xFE	; 254
    5484:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPI);
    5488:	80 91 e2 00 	lds	r24, 0x00E2
    548c:	8e 7f       	andi	r24, 0xFE	; 254
    548e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
    5492:	80 91 e2 00 	lds	r24, 0x00E2
    5496:	80 61       	ori	r24, 0x10	; 16
    5498:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    549c:	80 91 d8 00 	lds	r24, 0x00D8
    54a0:	80 62       	ori	r24, 0x20	; 32
    54a2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
    54a6:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    54a8:	85 e0       	ldi	r24, 0x05	; 5
    54aa:	80 93 76 06 	sts	0x0676, r24
		EVENT_USB_Device_Suspend();
    54ae:	0e 94 0c 02 	call	0x418	; 0x418 <EVENT_USB_Device_Suspend>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    54b2:	80 91 e1 00 	lds	r24, 0x00E1
    54b6:	84 ff       	sbrs	r24, 4
    54b8:	2e c0       	rjmp	.+92     	; 0x5516 <__vector_10+0x100>
    54ba:	80 91 e2 00 	lds	r24, 0x00E2
    54be:	84 ff       	sbrs	r24, 4
    54c0:	2a c0       	rjmp	.+84     	; 0x5516 <__vector_10+0x100>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
    54c2:	8c e0       	ldi	r24, 0x0C	; 12
    54c4:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
    54c6:	89 b5       	in	r24, 0x29	; 41
    54c8:	82 60       	ori	r24, 0x02	; 2
    54ca:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    54cc:	09 b4       	in	r0, 0x29	; 41
    54ce:	00 fe       	sbrs	r0, 0
    54d0:	fd cf       	rjmp	.-6      	; 0x54cc <__vector_10+0xb6>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    54d2:	80 91 d8 00 	lds	r24, 0x00D8
    54d6:	8f 7d       	andi	r24, 0xDF	; 223
    54d8:	80 93 d8 00 	sts	0x00D8, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUPI);
    54dc:	80 91 e1 00 	lds	r24, 0x00E1
    54e0:	8f 7e       	andi	r24, 0xEF	; 239
    54e2:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUPI);
    54e6:	80 91 e2 00 	lds	r24, 0x00E2
    54ea:	8f 7e       	andi	r24, 0xEF	; 239
    54ec:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPI);
    54f0:	80 91 e2 00 	lds	r24, 0x00E2
    54f4:	81 60       	ori	r24, 0x01	; 1
    54f6:	80 93 e2 00 	sts	0x00E2, r24

		if (USB_ConfigurationNumber)
    54fa:	80 91 74 06 	lds	r24, 0x0674
    54fe:	88 23       	and	r24, r24
    5500:	31 f4       	brne	.+12     	; 0x550e <__vector_10+0xf8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    5502:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    5506:	87 fd       	sbrc	r24, 7
    5508:	02 c0       	rjmp	.+4      	; 0x550e <__vector_10+0xf8>
    550a:	81 e0       	ldi	r24, 0x01	; 1
    550c:	01 c0       	rjmp	.+2      	; 0x5510 <__vector_10+0xfa>
    550e:	84 e0       	ldi	r24, 0x04	; 4
    5510:	80 93 76 06 	sts	0x0676, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    5514:	b9 d1       	rcall	.+882    	; 0x5888 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    5516:	80 91 e1 00 	lds	r24, 0x00E1
    551a:	83 ff       	sbrs	r24, 3
    551c:	27 c0       	rjmp	.+78     	; 0x556c <__vector_10+0x156>
    551e:	80 91 e2 00 	lds	r24, 0x00E2
    5522:	83 ff       	sbrs	r24, 3
    5524:	23 c0       	rjmp	.+70     	; 0x556c <__vector_10+0x156>
	{
		USB_INT_Clear(USB_INT_EORSTI);
    5526:	80 91 e1 00 	lds	r24, 0x00E1
    552a:	87 7f       	andi	r24, 0xF7	; 247
    552c:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
    5530:	82 e0       	ldi	r24, 0x02	; 2
    5532:	80 93 76 06 	sts	0x0676, r24
		USB_ConfigurationNumber = 0;
    5536:	10 92 74 06 	sts	0x0674, r1

		USB_INT_Clear(USB_INT_SUSPI);
    553a:	80 91 e1 00 	lds	r24, 0x00E1
    553e:	8e 7f       	andi	r24, 0xFE	; 254
    5540:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPI);
    5544:	80 91 e2 00 	lds	r24, 0x00E2
    5548:	8e 7f       	andi	r24, 0xFE	; 254
    554a:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUPI);
    554e:	80 91 e2 00 	lds	r24, 0x00E2
    5552:	80 61       	ori	r24, 0x10	; 16
    5554:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
    5558:	80 e0       	ldi	r24, 0x00	; 0
    555a:	60 e0       	ldi	r22, 0x00	; 0
    555c:	42 e0       	ldi	r20, 0x02	; 2
    555e:	58 de       	rcall	.-848    	; 0x5210 <Endpoint_ConfigureEndpoint_Prv>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
		                           ENDPOINT_BANK_SINGLE);

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
    5560:	80 91 f0 00 	lds	r24, 0x00F0
    5564:	88 60       	ori	r24, 0x08	; 8
    5566:	80 93 f0 00 	sts	0x00F0, r24
		#endif

		EVENT_USB_Device_Reset();
    556a:	8e d1       	rcall	.+796    	; 0x5888 <USB_Event_Stub>
	}

	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    556c:	80 91 e1 00 	lds	r24, 0x00E1
    5570:	82 ff       	sbrs	r24, 2
    5572:	0a c0       	rjmp	.+20     	; 0x5588 <__vector_10+0x172>
    5574:	80 91 e2 00 	lds	r24, 0x00E2
    5578:	82 ff       	sbrs	r24, 2
    557a:	06 c0       	rjmp	.+12     	; 0x5588 <__vector_10+0x172>
	{
		USB_INT_Clear(USB_INT_SOFI);
    557c:	80 91 e1 00 	lds	r24, 0x00E1
    5580:	8b 7f       	andi	r24, 0xFB	; 251
    5582:	80 93 e1 00 	sts	0x00E1, r24

		EVENT_USB_Device_StartOfFrame();
    5586:	80 d1       	rcall	.+768    	; 0x5888 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    5588:	ff 91       	pop	r31
    558a:	ef 91       	pop	r30
    558c:	bf 91       	pop	r27
    558e:	af 91       	pop	r26
    5590:	9f 91       	pop	r25
    5592:	8f 91       	pop	r24
    5594:	7f 91       	pop	r23
    5596:	6f 91       	pop	r22
    5598:	5f 91       	pop	r21
    559a:	4f 91       	pop	r20
    559c:	3f 91       	pop	r19
    559e:	2f 91       	pop	r18
    55a0:	0f 90       	pop	r0
    55a2:	0f be       	out	0x3f, r0	; 63
    55a4:	0f 90       	pop	r0
    55a6:	1f 90       	pop	r1
    55a8:	18 95       	reti

000055aa <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    55aa:	0f 93       	push	r16
    55ac:	1f 93       	push	r17
    55ae:	df 93       	push	r29
    55b0:	cf 93       	push	r28
    55b2:	cd b7       	in	r28, 0x3d	; 61
    55b4:	de b7       	in	r29, 0x3e	; 62
    55b6:	ac 97       	sbiw	r28, 0x2c	; 44
    55b8:	0f b6       	in	r0, 0x3f	; 63
    55ba:	f8 94       	cli
    55bc:	de bf       	out	0x3e, r29	; 62
    55be:	0f be       	out	0x3f, r0	; 63
    55c0:	cd bf       	out	0x3d, r28	; 61
    55c2:	e7 e7       	ldi	r30, 0x77	; 119
    55c4:	f6 e0       	ldi	r31, 0x06	; 6
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    55c6:	80 91 f1 00 	lds	r24, 0x00F1
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
    55ca:	81 93       	st	Z+, r24

void USB_Device_ProcessControlRequest(void)
{
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    55cc:	26 e0       	ldi	r18, 0x06	; 6
    55ce:	ef 37       	cpi	r30, 0x7F	; 127
    55d0:	f2 07       	cpc	r31, r18
    55d2:	c9 f7       	brne	.-14     	; 0x55c6 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_Byte();

	EVENT_USB_Device_ControlRequest();
    55d4:	0e 94 04 02 	call	0x408	; 0x408 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    55d8:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    55dc:	83 ff       	sbrs	r24, 3
    55de:	3b c1       	rjmp	.+630    	; 0x5856 <USB_Device_ProcessControlRequest+0x2ac>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    55e0:	80 91 77 06 	lds	r24, 0x0677

		switch (USB_ControlRequest.bRequest)
    55e4:	30 91 78 06 	lds	r19, 0x0678
    55e8:	35 30       	cpi	r19, 0x05	; 5
    55ea:	09 f4       	brne	.+2      	; 0x55ee <USB_Device_ProcessControlRequest+0x44>
    55ec:	87 c0       	rjmp	.+270    	; 0x56fc <USB_Device_ProcessControlRequest+0x152>
    55ee:	36 30       	cpi	r19, 0x06	; 6
    55f0:	40 f4       	brcc	.+16     	; 0x5602 <USB_Device_ProcessControlRequest+0x58>
    55f2:	31 30       	cpi	r19, 0x01	; 1
    55f4:	c9 f1       	breq	.+114    	; 0x5668 <USB_Device_ProcessControlRequest+0xbe>
    55f6:	31 30       	cpi	r19, 0x01	; 1
    55f8:	70 f0       	brcs	.+28     	; 0x5616 <USB_Device_ProcessControlRequest+0x6c>
    55fa:	33 30       	cpi	r19, 0x03	; 3
    55fc:	09 f0       	breq	.+2      	; 0x5600 <USB_Device_ProcessControlRequest+0x56>
    55fe:	2b c1       	rjmp	.+598    	; 0x5856 <USB_Device_ProcessControlRequest+0x2ac>
    5600:	33 c0       	rjmp	.+102    	; 0x5668 <USB_Device_ProcessControlRequest+0xbe>
    5602:	38 30       	cpi	r19, 0x08	; 8
    5604:	09 f4       	brne	.+2      	; 0x5608 <USB_Device_ProcessControlRequest+0x5e>
    5606:	f8 c0       	rjmp	.+496    	; 0x57f8 <USB_Device_ProcessControlRequest+0x24e>
    5608:	39 30       	cpi	r19, 0x09	; 9
    560a:	09 f4       	brne	.+2      	; 0x560e <USB_Device_ProcessControlRequest+0x64>
    560c:	07 c1       	rjmp	.+526    	; 0x581c <USB_Device_ProcessControlRequest+0x272>
    560e:	36 30       	cpi	r19, 0x06	; 6
    5610:	09 f0       	breq	.+2      	; 0x5614 <USB_Device_ProcessControlRequest+0x6a>
    5612:	21 c1       	rjmp	.+578    	; 0x5856 <USB_Device_ProcessControlRequest+0x2ac>
    5614:	99 c0       	rjmp	.+306    	; 0x5748 <USB_Device_ProcessControlRequest+0x19e>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    5616:	80 38       	cpi	r24, 0x80	; 128
    5618:	21 f0       	breq	.+8      	; 0x5622 <USB_Device_ProcessControlRequest+0x78>
    561a:	82 38       	cpi	r24, 0x82	; 130
    561c:	09 f0       	breq	.+2      	; 0x5620 <USB_Device_ProcessControlRequest+0x76>
    561e:	1b c1       	rjmp	.+566    	; 0x5856 <USB_Device_ProcessControlRequest+0x2ac>
    5620:	08 c0       	rjmp	.+16     	; 0x5632 <USB_Device_ProcessControlRequest+0x88>
    5622:	90 91 72 06 	lds	r25, 0x0672
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_RemoteWakeupEnabled)
    5626:	80 91 73 06 	lds	r24, 0x0673
    562a:	88 23       	and	r24, r24
    562c:	99 f0       	breq	.+38     	; 0x5654 <USB_Device_ProcessControlRequest+0xaa>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    562e:	92 60       	ori	r25, 0x02	; 2
    5630:	11 c0       	rjmp	.+34     	; 0x5654 <USB_Device_ProcessControlRequest+0xaa>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    5632:	80 91 7b 06 	lds	r24, 0x067B
    5636:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    5638:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    563c:	80 91 eb 00 	lds	r24, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
    5640:	90 e0       	ldi	r25, 0x00	; 0
    5642:	25 e0       	ldi	r18, 0x05	; 5
    5644:	96 95       	lsr	r25
    5646:	87 95       	ror	r24
    5648:	2a 95       	dec	r18
    564a:	e1 f7       	brne	.-8      	; 0x5644 <USB_Device_ProcessControlRequest+0x9a>
    564c:	98 2f       	mov	r25, r24
    564e:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    5650:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    5654:	80 91 e8 00 	lds	r24, 0x00E8
    5658:	87 7f       	andi	r24, 0xF7	; 247
    565a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
    565e:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Word >> 8);
    5662:	10 92 f1 00 	sts	0x00F1, r1
    5666:	d3 c0       	rjmp	.+422    	; 0x580e <USB_Device_ProcessControlRequest+0x264>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    5668:	88 23       	and	r24, r24
    566a:	19 f0       	breq	.+6      	; 0x5672 <USB_Device_ProcessControlRequest+0xc8>
    566c:	82 30       	cpi	r24, 0x02	; 2
    566e:	09 f0       	breq	.+2      	; 0x5672 <USB_Device_ProcessControlRequest+0xc8>
    5670:	f2 c0       	rjmp	.+484    	; 0x5856 <USB_Device_ProcessControlRequest+0x2ac>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    5672:	90 e0       	ldi	r25, 0x00	; 0
    5674:	8f 71       	andi	r24, 0x1F	; 31
    5676:	90 70       	andi	r25, 0x00	; 0
    5678:	00 97       	sbiw	r24, 0x00	; 0
    567a:	21 f0       	breq	.+8      	; 0x5684 <USB_Device_ProcessControlRequest+0xda>
    567c:	02 97       	sbiw	r24, 0x02	; 2
    567e:	09 f0       	breq	.+2      	; 0x5682 <USB_Device_ProcessControlRequest+0xd8>
    5680:	ea c0       	rjmp	.+468    	; 0x5856 <USB_Device_ProcessControlRequest+0x2ac>
    5682:	0c c0       	rjmp	.+24     	; 0x569c <USB_Device_ProcessControlRequest+0xf2>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    5684:	80 91 79 06 	lds	r24, 0x0679
    5688:	81 30       	cpi	r24, 0x01	; 1
    568a:	09 f0       	breq	.+2      	; 0x568e <USB_Device_ProcessControlRequest+0xe4>
    568c:	e4 c0       	rjmp	.+456    	; 0x5856 <USB_Device_ProcessControlRequest+0x2ac>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    568e:	10 92 73 06 	sts	0x0673, r1
    5692:	33 30       	cpi	r19, 0x03	; 3
    5694:	69 f5       	brne	.+90     	; 0x56f0 <USB_Device_ProcessControlRequest+0x146>
    5696:	80 93 73 06 	sts	0x0673, r24
    569a:	2a c0       	rjmp	.+84     	; 0x56f0 <USB_Device_ProcessControlRequest+0x146>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    569c:	80 91 79 06 	lds	r24, 0x0679
    56a0:	88 23       	and	r24, r24
    56a2:	31 f5       	brne	.+76     	; 0x56f0 <USB_Device_ProcessControlRequest+0x146>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    56a4:	20 91 7b 06 	lds	r18, 0x067B
    56a8:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    56aa:	09 f4       	brne	.+2      	; 0x56ae <USB_Device_ProcessControlRequest+0x104>
    56ac:	d4 c0       	rjmp	.+424    	; 0x5856 <USB_Device_ProcessControlRequest+0x2ac>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    56ae:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    56b2:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    56b6:	80 ff       	sbrs	r24, 0
    56b8:	1b c0       	rjmp	.+54     	; 0x56f0 <USB_Device_ProcessControlRequest+0x146>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    56ba:	33 30       	cpi	r19, 0x03	; 3
    56bc:	21 f4       	brne	.+8      	; 0x56c6 <USB_Device_ProcessControlRequest+0x11c>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    56be:	80 91 eb 00 	lds	r24, 0x00EB
    56c2:	80 62       	ori	r24, 0x20	; 32
    56c4:	13 c0       	rjmp	.+38     	; 0x56ec <USB_Device_ProcessControlRequest+0x142>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    56c6:	80 91 eb 00 	lds	r24, 0x00EB
    56ca:	80 61       	ori	r24, 0x10	; 16
    56cc:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    56d0:	81 e0       	ldi	r24, 0x01	; 1
    56d2:	90 e0       	ldi	r25, 0x00	; 0
    56d4:	02 c0       	rjmp	.+4      	; 0x56da <USB_Device_ProcessControlRequest+0x130>
    56d6:	88 0f       	add	r24, r24
    56d8:	99 1f       	adc	r25, r25
    56da:	2a 95       	dec	r18
    56dc:	e2 f7       	brpl	.-8      	; 0x56d6 <USB_Device_ProcessControlRequest+0x12c>
    56de:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    56e2:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    56e6:	80 91 eb 00 	lds	r24, 0x00EB
    56ea:	88 60       	ori	r24, 0x08	; 8
    56ec:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    56f0:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    56f4:	80 91 e8 00 	lds	r24, 0x00E8
    56f8:	87 7f       	andi	r24, 0xF7	; 247
    56fa:	8c c0       	rjmp	.+280    	; 0x5814 <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    56fc:	88 23       	and	r24, r24
    56fe:	09 f0       	breq	.+2      	; 0x5702 <USB_Device_ProcessControlRequest+0x158>
    5700:	aa c0       	rjmp	.+340    	; 0x5856 <USB_Device_ProcessControlRequest+0x2ac>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    5702:	10 91 79 06 	lds	r17, 0x0679
    5706:	1f 77       	andi	r17, 0x7F	; 127

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    5708:	0f b7       	in	r16, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    570a:	f8 94       	cli
    570c:	80 91 e8 00 	lds	r24, 0x00E8
    5710:	87 7f       	andi	r24, 0xF7	; 247
    5712:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearSETUP();

		Endpoint_ClearStatusStage();
    5716:	8f dd       	rcall	.-1250   	; 0x5236 <Endpoint_ClearStatusStage>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    5718:	80 91 e8 00 	lds	r24, 0x00E8

		while (!(Endpoint_IsINReady()));
    571c:	80 ff       	sbrs	r24, 0
    571e:	fc cf       	rjmp	.-8      	; 0x5718 <USB_Device_ProcessControlRequest+0x16e>

		USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    5720:	11 23       	and	r17, r17
    5722:	11 f4       	brne	.+4      	; 0x5728 <USB_Device_ProcessControlRequest+0x17e>
    5724:	82 e0       	ldi	r24, 0x02	; 2
    5726:	01 c0       	rjmp	.+2      	; 0x572a <USB_Device_ProcessControlRequest+0x180>
    5728:	83 e0       	ldi	r24, 0x03	; 3
    572a:	80 93 76 06 	sts	0x0676, r24
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR  = ((UDADDR & (1 << ADDEN)) | (Address & 0x7F));
    572e:	80 91 e3 00 	lds	r24, 0x00E3
    5732:	80 78       	andi	r24, 0x80	; 128
    5734:	18 2b       	or	r17, r24
    5736:	10 93 e3 00 	sts	0x00E3, r17
				UDADDR |= (1 << ADDEN);
    573a:	80 91 e3 00 	lds	r24, 0x00E3
    573e:	80 68       	ori	r24, 0x80	; 128
    5740:	80 93 e3 00 	sts	0x00E3, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5744:	0f bf       	out	0x3f, r16	; 63
    __asm__ volatile ("" ::: "memory");
    5746:	87 c0       	rjmp	.+270    	; 0x5856 <USB_Device_ProcessControlRequest+0x2ac>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    5748:	80 58       	subi	r24, 0x80	; 128
    574a:	82 30       	cpi	r24, 0x02	; 2
    574c:	08 f0       	brcs	.+2      	; 0x5750 <USB_Device_ProcessControlRequest+0x1a6>
    574e:	83 c0       	rjmp	.+262    	; 0x5856 <USB_Device_ProcessControlRequest+0x2ac>
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    5750:	80 91 79 06 	lds	r24, 0x0679
    5754:	90 91 7a 06 	lds	r25, 0x067A
    5758:	23 e0       	ldi	r18, 0x03	; 3
    575a:	8c 3d       	cpi	r24, 0xDC	; 220
    575c:	92 07       	cpc	r25, r18
    575e:	99 f5       	brne	.+102    	; 0x57c6 <USB_Device_ProcessControlRequest+0x21c>
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    5760:	7f b7       	in	r23, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5762:	f8 94       	cli
    5764:	de 01       	movw	r26, r28
    5766:	15 96       	adiw	r26, 0x05	; 5
    5768:	6e e0       	ldi	r22, 0x0E	; 14
    576a:	40 e0       	ldi	r20, 0x00	; 0
    576c:	50 e0       	ldi	r21, 0x00	; 0
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    576e:	11 e2       	ldi	r17, 0x21	; 33
    5770:	e6 2f       	mov	r30, r22
    5772:	f0 e0       	ldi	r31, 0x00	; 0
    5774:	10 93 57 00 	sts	0x0057, r17
    5778:	84 91       	lpm	r24, Z+

			if (SerialCharNum & 0x01)
    577a:	40 ff       	sbrs	r20, 0
    577c:	03 c0       	rjmp	.+6      	; 0x5784 <USB_Device_ProcessControlRequest+0x1da>
			{
				SerialByte >>= 4;
    577e:	82 95       	swap	r24
    5780:	8f 70       	andi	r24, 0x0F	; 15
				SigReadAddress++;
    5782:	6f 5f       	subi	r22, 0xFF	; 255
			}

			SerialByte &= 0x0F;
    5784:	8f 70       	andi	r24, 0x0F	; 15
    5786:	28 2f       	mov	r18, r24
    5788:	30 e0       	ldi	r19, 0x00	; 0

			SignatureDescriptor.UnicodeString[SerialCharNum] = (SerialByte >= 10) ?
    578a:	8a 30       	cpi	r24, 0x0A	; 10
    578c:	18 f0       	brcs	.+6      	; 0x5794 <USB_Device_ProcessControlRequest+0x1ea>
    578e:	c9 01       	movw	r24, r18
    5790:	c7 96       	adiw	r24, 0x37	; 55
    5792:	02 c0       	rjmp	.+4      	; 0x5798 <USB_Device_ProcessControlRequest+0x1ee>
    5794:	c9 01       	movw	r24, r18
    5796:	c0 96       	adiw	r24, 0x30	; 48
    5798:	8d 93       	st	X+, r24
    579a:	9d 93       	st	X+, r25
    579c:	4f 5f       	subi	r20, 0xFF	; 255
    579e:	5f 4f       	sbci	r21, 0xFF	; 255

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		uint8_t SigReadAddress = 0x0E;

		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
    57a0:	44 31       	cpi	r20, 0x14	; 20
    57a2:	51 05       	cpc	r21, r1
    57a4:	29 f7       	brne	.-54     	; 0x5770 <USB_Device_ProcessControlRequest+0x1c6>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    57a6:	7f bf       	out	0x3f, r23	; 63
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
    57a8:	8a e2       	ldi	r24, 0x2A	; 42
    57aa:	8b 83       	std	Y+3, r24	; 0x03
	{
		USB_Descriptor_Header_t Header;
		wchar_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    57ac:	83 e0       	ldi	r24, 0x03	; 3
    57ae:	8c 83       	std	Y+4, r24	; 0x04
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    57b0:	80 91 e8 00 	lds	r24, 0x00E8
    57b4:	87 7f       	andi	r24, 0xF7	; 247
    57b6:	80 93 e8 00 	sts	0x00E8, r24
		}
	}

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    57ba:	ce 01       	movw	r24, r28
    57bc:	03 96       	adiw	r24, 0x03	; 3
    57be:	6a e2       	ldi	r22, 0x2A	; 42
    57c0:	70 e0       	ldi	r23, 0x00	; 0
    57c2:	63 d0       	rcall	.+198    	; 0x588a <Endpoint_Write_Control_Stream_LE>
    57c4:	13 c0       	rjmp	.+38     	; 0x57ec <USB_Device_ProcessControlRequest+0x242>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    57c6:	60 91 7b 06 	lds	r22, 0x067B
    57ca:	ae 01       	movw	r20, r28
    57cc:	4f 5f       	subi	r20, 0xFF	; 255
    57ce:	5f 4f       	sbci	r21, 0xFF	; 255
    57d0:	0e 94 38 0a 	call	0x1470	; 0x1470 <CALLBACK_USB_GetDescriptor>
    57d4:	bc 01       	movw	r22, r24
    57d6:	00 97       	sbiw	r24, 0x00	; 0
    57d8:	09 f4       	brne	.+2      	; 0x57dc <USB_Device_ProcessControlRequest+0x232>
    57da:	3d c0       	rjmp	.+122    	; 0x5856 <USB_Device_ProcessControlRequest+0x2ac>
    57dc:	80 91 e8 00 	lds	r24, 0x00E8
    57e0:	87 7f       	andi	r24, 0xF7	; 247
    57e2:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    57e6:	89 81       	ldd	r24, Y+1	; 0x01
    57e8:	9a 81       	ldd	r25, Y+2	; 0x02
    57ea:	ad d0       	rcall	.+346    	; 0x5946 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    57ec:	80 91 e8 00 	lds	r24, 0x00E8
    57f0:	8b 77       	andi	r24, 0x7B	; 123
    57f2:	80 93 e8 00 	sts	0x00E8, r24
    57f6:	2f c0       	rjmp	.+94     	; 0x5856 <USB_Device_ProcessControlRequest+0x2ac>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    57f8:	80 38       	cpi	r24, 0x80	; 128
    57fa:	69 f5       	brne	.+90     	; 0x5856 <USB_Device_ProcessControlRequest+0x2ac>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    57fc:	80 91 e8 00 	lds	r24, 0x00E8
    5800:	87 7f       	andi	r24, 0xF7	; 247
    5802:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
    5806:	80 91 74 06 	lds	r24, 0x0674
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    580a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    580e:	80 91 e8 00 	lds	r24, 0x00E8
    5812:	8e 77       	andi	r24, 0x7E	; 126
    5814:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    5818:	0e dd       	rcall	.-1508   	; 0x5236 <Endpoint_ClearStatusStage>
    581a:	1d c0       	rjmp	.+58     	; 0x5856 <USB_Device_ProcessControlRequest+0x2ac>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    581c:	88 23       	and	r24, r24
    581e:	d9 f4       	brne	.+54     	; 0x5856 <USB_Device_ProcessControlRequest+0x2ac>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    5820:	90 91 79 06 	lds	r25, 0x0679
    5824:	92 30       	cpi	r25, 0x02	; 2
    5826:	b8 f4       	brcc	.+46     	; 0x5856 <USB_Device_ProcessControlRequest+0x2ac>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    5828:	80 91 e8 00 	lds	r24, 0x00E8
    582c:	87 7f       	andi	r24, 0xF7	; 247
    582e:	80 93 e8 00 	sts	0x00E8, r24
	}
	#endif

	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    5832:	90 93 74 06 	sts	0x0674, r25

	Endpoint_ClearStatusStage();
    5836:	ff dc       	rcall	.-1538   	; 0x5236 <Endpoint_ClearStatusStage>

	if (USB_ConfigurationNumber)
    5838:	80 91 74 06 	lds	r24, 0x0674
    583c:	88 23       	and	r24, r24
    583e:	31 f4       	brne	.+12     	; 0x584c <USB_Device_ProcessControlRequest+0x2a2>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    5840:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    5844:	87 fd       	sbrc	r24, 7
    5846:	02 c0       	rjmp	.+4      	; 0x584c <USB_Device_ProcessControlRequest+0x2a2>
    5848:	81 e0       	ldi	r24, 0x01	; 1
    584a:	01 c0       	rjmp	.+2      	; 0x584e <USB_Device_ProcessControlRequest+0x2a4>
    584c:	84 e0       	ldi	r24, 0x04	; 4
    584e:	80 93 76 06 	sts	0x0676, r24

	EVENT_USB_Device_ConfigurationChanged();
    5852:	0e 94 0f 02 	call	0x41e	; 0x41e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    5856:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    585a:	83 ff       	sbrs	r24, 3
    585c:	0a c0       	rjmp	.+20     	; 0x5872 <USB_Device_ProcessControlRequest+0x2c8>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    585e:	80 91 eb 00 	lds	r24, 0x00EB
    5862:	80 62       	ori	r24, 0x20	; 32
    5864:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    5868:	80 91 e8 00 	lds	r24, 0x00E8
    586c:	87 7f       	andi	r24, 0xF7	; 247
    586e:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    5872:	ac 96       	adiw	r28, 0x2c	; 44
    5874:	0f b6       	in	r0, 0x3f	; 63
    5876:	f8 94       	cli
    5878:	de bf       	out	0x3e, r29	; 62
    587a:	0f be       	out	0x3f, r0	; 63
    587c:	cd bf       	out	0x3d, r28	; 61
    587e:	cf 91       	pop	r28
    5880:	df 91       	pop	r29
    5882:	1f 91       	pop	r17
    5884:	0f 91       	pop	r16
    5886:	08 95       	ret

00005888 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    5888:	08 95       	ret

0000588a <Endpoint_Write_Control_Stream_LE>:
    588a:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    588c:	40 91 7d 06 	lds	r20, 0x067D
    5890:	50 91 7e 06 	lds	r21, 0x067E
    5894:	46 17       	cp	r20, r22
    5896:	57 07       	cpc	r21, r23
    5898:	18 f4       	brcc	.+6      	; 0x58a0 <Endpoint_Write_Control_Stream_LE+0x16>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    589a:	f9 01       	movw	r30, r18
    589c:	90 e0       	ldi	r25, 0x00	; 0
    589e:	3d c0       	rjmp	.+122    	; 0x591a <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    58a0:	61 15       	cp	r22, r1
    58a2:	71 05       	cpc	r23, r1
    58a4:	11 f0       	breq	.+4      	; 0x58aa <Endpoint_Write_Control_Stream_LE+0x20>
    58a6:	ab 01       	movw	r20, r22
    58a8:	f8 cf       	rjmp	.-16     	; 0x589a <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    58aa:	80 91 e8 00 	lds	r24, 0x00E8
    58ae:	8e 77       	andi	r24, 0x7E	; 126
    58b0:	80 93 e8 00 	sts	0x00E8, r24
    58b4:	40 e0       	ldi	r20, 0x00	; 0
    58b6:	50 e0       	ldi	r21, 0x00	; 0
    58b8:	f0 cf       	rjmp	.-32     	; 0x589a <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    58ba:	80 91 76 06 	lds	r24, 0x0676

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    58be:	88 23       	and	r24, r24
    58c0:	f1 f1       	breq	.+124    	; 0x593e <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    58c2:	85 30       	cpi	r24, 0x05	; 5
    58c4:	f1 f1       	breq	.+124    	; 0x5942 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    58c6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    58ca:	83 ff       	sbrs	r24, 3
    58cc:	02 c0       	rjmp	.+4      	; 0x58d2 <Endpoint_Write_Control_Stream_LE+0x48>
    58ce:	81 e0       	ldi	r24, 0x01	; 1
    58d0:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    58d2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    58d6:	82 fd       	sbrc	r24, 2
    58d8:	2c c0       	rjmp	.+88     	; 0x5932 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    58da:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    58de:	80 ff       	sbrs	r24, 0
    58e0:	1c c0       	rjmp	.+56     	; 0x591a <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    58e2:	20 91 f2 00 	lds	r18, 0x00F2
    58e6:	30 91 f3 00 	lds	r19, 0x00F3
    58ea:	07 c0       	rjmp	.+14     	; 0x58fa <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    58ec:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    58ee:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
    58f2:	41 50       	subi	r20, 0x01	; 1
    58f4:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    58f6:	2f 5f       	subi	r18, 0xFF	; 255
    58f8:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    58fa:	41 15       	cp	r20, r1
    58fc:	51 05       	cpc	r21, r1
    58fe:	19 f0       	breq	.+6      	; 0x5906 <Endpoint_Write_Control_Stream_LE+0x7c>
    5900:	28 30       	cpi	r18, 0x08	; 8
    5902:	31 05       	cpc	r19, r1
    5904:	98 f3       	brcs	.-26     	; 0x58ec <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    5906:	90 e0       	ldi	r25, 0x00	; 0
    5908:	28 30       	cpi	r18, 0x08	; 8
    590a:	31 05       	cpc	r19, r1
    590c:	09 f4       	brne	.+2      	; 0x5910 <Endpoint_Write_Control_Stream_LE+0x86>
    590e:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5910:	80 91 e8 00 	lds	r24, 0x00E8
    5914:	8e 77       	andi	r24, 0x7E	; 126
    5916:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    591a:	41 15       	cp	r20, r1
    591c:	51 05       	cpc	r21, r1
    591e:	69 f6       	brne	.-102    	; 0x58ba <Endpoint_Write_Control_Stream_LE+0x30>
    5920:	99 23       	and	r25, r25
    5922:	59 f6       	brne	.-106    	; 0x58ba <Endpoint_Write_Control_Stream_LE+0x30>
    5924:	06 c0       	rjmp	.+12     	; 0x5932 <Endpoint_Write_Control_Stream_LE+0xa8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    5926:	80 91 76 06 	lds	r24, 0x0676

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    592a:	88 23       	and	r24, r24
    592c:	41 f0       	breq	.+16     	; 0x593e <Endpoint_Write_Control_Stream_LE+0xb4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    592e:	85 30       	cpi	r24, 0x05	; 5
    5930:	41 f0       	breq	.+16     	; 0x5942 <Endpoint_Write_Control_Stream_LE+0xb8>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    5932:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    5936:	82 ff       	sbrs	r24, 2
    5938:	f6 cf       	rjmp	.-20     	; 0x5926 <Endpoint_Write_Control_Stream_LE+0x9c>
    593a:	80 e0       	ldi	r24, 0x00	; 0
    593c:	08 95       	ret
    593e:	82 e0       	ldi	r24, 0x02	; 2
    5940:	08 95       	ret
    5942:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    5944:	08 95       	ret

00005946 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
    5946:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    5948:	40 91 7d 06 	lds	r20, 0x067D
    594c:	50 91 7e 06 	lds	r21, 0x067E
    5950:	46 17       	cp	r20, r22
    5952:	57 07       	cpc	r21, r23
    5954:	10 f4       	brcc	.+4      	; 0x595a <Endpoint_Write_Control_PStream_LE+0x14>
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    5956:	60 e0       	ldi	r22, 0x00	; 0
    5958:	40 c0       	rjmp	.+128    	; 0x59da <Endpoint_Write_Control_PStream_LE+0x94>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    595a:	61 15       	cp	r22, r1
    595c:	71 05       	cpc	r23, r1
    595e:	11 f0       	breq	.+4      	; 0x5964 <Endpoint_Write_Control_PStream_LE+0x1e>
    5960:	ab 01       	movw	r20, r22
    5962:	f9 cf       	rjmp	.-14     	; 0x5956 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5964:	80 91 e8 00 	lds	r24, 0x00E8
    5968:	8e 77       	andi	r24, 0x7E	; 126
    596a:	80 93 e8 00 	sts	0x00E8, r24
    596e:	40 e0       	ldi	r20, 0x00	; 0
    5970:	50 e0       	ldi	r21, 0x00	; 0
    5972:	f1 cf       	rjmp	.-30     	; 0x5956 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    5974:	80 91 76 06 	lds	r24, 0x0676

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    5978:	88 23       	and	r24, r24
    597a:	09 f4       	brne	.+2      	; 0x597e <Endpoint_Write_Control_PStream_LE+0x38>
    597c:	40 c0       	rjmp	.+128    	; 0x59fe <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    597e:	85 30       	cpi	r24, 0x05	; 5
    5980:	09 f4       	brne	.+2      	; 0x5984 <Endpoint_Write_Control_PStream_LE+0x3e>
    5982:	3f c0       	rjmp	.+126    	; 0x5a02 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    5984:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    5988:	83 ff       	sbrs	r24, 3
    598a:	02 c0       	rjmp	.+4      	; 0x5990 <Endpoint_Write_Control_PStream_LE+0x4a>
    598c:	81 e0       	ldi	r24, 0x01	; 1
    598e:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    5990:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    5994:	82 fd       	sbrc	r24, 2
    5996:	2d c0       	rjmp	.+90     	; 0x59f2 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    5998:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    599c:	80 ff       	sbrs	r24, 0
    599e:	1d c0       	rjmp	.+58     	; 0x59da <Endpoint_Write_Control_PStream_LE+0x94>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    59a0:	80 91 f2 00 	lds	r24, 0x00F2
    59a4:	90 91 f3 00 	lds	r25, 0x00F3
    59a8:	09 c0       	rjmp	.+18     	; 0x59bc <Endpoint_Write_Control_PStream_LE+0x76>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    59aa:	f9 01       	movw	r30, r18
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    59ac:	2f 5f       	subi	r18, 0xFF	; 255
    59ae:	3f 4f       	sbci	r19, 0xFF	; 255
    59b0:	e4 91       	lpm	r30, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    59b2:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
    59b6:	41 50       	subi	r20, 0x01	; 1
    59b8:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    59ba:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    59bc:	41 15       	cp	r20, r1
    59be:	51 05       	cpc	r21, r1
    59c0:	19 f0       	breq	.+6      	; 0x59c8 <Endpoint_Write_Control_PStream_LE+0x82>
    59c2:	88 30       	cpi	r24, 0x08	; 8
    59c4:	91 05       	cpc	r25, r1
    59c6:	88 f3       	brcs	.-30     	; 0x59aa <Endpoint_Write_Control_PStream_LE+0x64>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    59c8:	60 e0       	ldi	r22, 0x00	; 0
    59ca:	08 97       	sbiw	r24, 0x08	; 8
    59cc:	09 f4       	brne	.+2      	; 0x59d0 <Endpoint_Write_Control_PStream_LE+0x8a>
    59ce:	61 e0       	ldi	r22, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    59d0:	80 91 e8 00 	lds	r24, 0x00E8
    59d4:	8e 77       	andi	r24, 0x7E	; 126
    59d6:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    59da:	41 15       	cp	r20, r1
    59dc:	51 05       	cpc	r21, r1
    59de:	51 f6       	brne	.-108    	; 0x5974 <Endpoint_Write_Control_PStream_LE+0x2e>
    59e0:	66 23       	and	r22, r22
    59e2:	41 f6       	brne	.-112    	; 0x5974 <Endpoint_Write_Control_PStream_LE+0x2e>
    59e4:	06 c0       	rjmp	.+12     	; 0x59f2 <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    59e6:	80 91 76 06 	lds	r24, 0x0676

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    59ea:	88 23       	and	r24, r24
    59ec:	41 f0       	breq	.+16     	; 0x59fe <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    59ee:	85 30       	cpi	r24, 0x05	; 5
    59f0:	41 f0       	breq	.+16     	; 0x5a02 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    59f2:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    59f6:	82 ff       	sbrs	r24, 2
    59f8:	f6 cf       	rjmp	.-20     	; 0x59e6 <Endpoint_Write_Control_PStream_LE+0xa0>
    59fa:	80 e0       	ldi	r24, 0x00	; 0
    59fc:	08 95       	ret
    59fe:	82 e0       	ldi	r24, 0x02	; 2
    5a00:	08 95       	ret
    5a02:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    5a04:	08 95       	ret

00005a06 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
    5a06:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    5a08:	61 15       	cp	r22, r1
    5a0a:	71 05       	cpc	r23, r1
    5a0c:	29 f4       	brne	.+10     	; 0x5a18 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    5a0e:	80 91 e8 00 	lds	r24, 0x00E8
    5a12:	8b 77       	andi	r24, 0x7B	; 123
    5a14:	80 93 e8 00 	sts	0x00E8, r24
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    5a18:	f9 01       	movw	r30, r18
    5a1a:	22 c0       	rjmp	.+68     	; 0x5a60 <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    5a1c:	80 91 76 06 	lds	r24, 0x0676

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    5a20:	88 23       	and	r24, r24
    5a22:	71 f1       	breq	.+92     	; 0x5a80 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    5a24:	85 30       	cpi	r24, 0x05	; 5
    5a26:	71 f1       	breq	.+92     	; 0x5a84 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    5a28:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    5a2c:	83 ff       	sbrs	r24, 3
    5a2e:	02 c0       	rjmp	.+4      	; 0x5a34 <Endpoint_Read_Control_Stream_LE+0x2e>
    5a30:	81 e0       	ldi	r24, 0x01	; 1
    5a32:	08 95       	ret
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    5a34:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    5a38:	82 ff       	sbrs	r24, 2
    5a3a:	f0 cf       	rjmp	.-32     	; 0x5a1c <Endpoint_Read_Control_Stream_LE+0x16>
    5a3c:	06 c0       	rjmp	.+12     	; 0x5a4a <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    5a3e:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    5a42:	81 93       	st	Z+, r24
				Length--;
    5a44:	61 50       	subi	r22, 0x01	; 1
    5a46:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    5a48:	31 f0       	breq	.+12     	; 0x5a56 <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
    5a4a:	80 91 f2 00 	lds	r24, 0x00F2
    5a4e:	90 91 f3 00 	lds	r25, 0x00F3
    5a52:	89 2b       	or	r24, r25
    5a54:	a1 f7       	brne	.-24     	; 0x5a3e <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    5a56:	80 91 e8 00 	lds	r24, 0x00E8
    5a5a:	8b 77       	andi	r24, 0x7B	; 123
    5a5c:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    5a60:	61 15       	cp	r22, r1
    5a62:	71 05       	cpc	r23, r1
    5a64:	d9 f6       	brne	.-74     	; 0x5a1c <Endpoint_Read_Control_Stream_LE+0x16>
    5a66:	06 c0       	rjmp	.+12     	; 0x5a74 <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    5a68:	80 91 76 06 	lds	r24, 0x0676

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    5a6c:	88 23       	and	r24, r24
    5a6e:	41 f0       	breq	.+16     	; 0x5a80 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    5a70:	85 30       	cpi	r24, 0x05	; 5
    5a72:	41 f0       	breq	.+16     	; 0x5a84 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    5a74:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    5a78:	80 ff       	sbrs	r24, 0
    5a7a:	f6 cf       	rjmp	.-20     	; 0x5a68 <Endpoint_Read_Control_Stream_LE+0x62>
    5a7c:	80 e0       	ldi	r24, 0x00	; 0
    5a7e:	08 95       	ret
    5a80:	82 e0       	ldi	r24, 0x02	; 2
    5a82:	08 95       	ret
    5a84:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    5a86:	08 95       	ret

00005a88 <Endpoint_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    5a88:	df 92       	push	r13
    5a8a:	ef 92       	push	r14
    5a8c:	ff 92       	push	r15
    5a8e:	0f 93       	push	r16
    5a90:	1f 93       	push	r17
    5a92:	cf 93       	push	r28
    5a94:	df 93       	push	r29
    5a96:	18 2f       	mov	r17, r24
    5a98:	09 2f       	mov	r16, r25
    5a9a:	eb 01       	movw	r28, r22
    5a9c:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    5a9e:	ec db       	rcall	.-2088   	; 0x5278 <Endpoint_WaitUntilReady>
    5aa0:	d8 2e       	mov	r13, r24
    5aa2:	88 23       	and	r24, r24
    5aa4:	19 f5       	brne	.+70     	; 0x5aec <Endpoint_Read_Stream_LE+0x64>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    5aa6:	81 2f       	mov	r24, r17
    5aa8:	90 2f       	mov	r25, r16
    5aaa:	9c 01       	movw	r18, r24
    5aac:	89 01       	movw	r16, r18
    5aae:	1c c0       	rjmp	.+56     	; 0x5ae8 <Endpoint_Read_Stream_LE+0x60>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    5ab0:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    5ab4:	85 fd       	sbrc	r24, 5
    5ab6:	12 c0       	rjmp	.+36     	; 0x5adc <Endpoint_Read_Stream_LE+0x54>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    5ab8:	80 91 e8 00 	lds	r24, 0x00E8
    5abc:	8b 77       	andi	r24, 0x7B	; 123
    5abe:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    5ac2:	e1 14       	cp	r14, r1
    5ac4:	f1 04       	cpc	r15, r1
    5ac6:	31 f0       	breq	.+12     	; 0x5ad4 <Endpoint_Read_Stream_LE+0x4c>
    5ac8:	f7 01       	movw	r30, r14
    5aca:	09 95       	icall
    5acc:	81 30       	cpi	r24, 0x01	; 1
    5ace:	11 f4       	brne	.+4      	; 0x5ad4 <Endpoint_Read_Stream_LE+0x4c>
    5ad0:	85 e0       	ldi	r24, 0x05	; 5
    5ad2:	0d c0       	rjmp	.+26     	; 0x5aee <Endpoint_Read_Stream_LE+0x66>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    5ad4:	d1 db       	rcall	.-2142   	; 0x5278 <Endpoint_WaitUntilReady>
    5ad6:	88 23       	and	r24, r24
    5ad8:	39 f0       	breq	.+14     	; 0x5ae8 <Endpoint_Read_Stream_LE+0x60>
    5ada:	09 c0       	rjmp	.+18     	; 0x5aee <Endpoint_Read_Stream_LE+0x66>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    5adc:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    5ae0:	f8 01       	movw	r30, r16
    5ae2:	81 93       	st	Z+, r24
    5ae4:	8f 01       	movw	r16, r30
			Length--;
    5ae6:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    5ae8:	20 97       	sbiw	r28, 0x00	; 0
    5aea:	11 f7       	brne	.-60     	; 0x5ab0 <Endpoint_Read_Stream_LE+0x28>
    5aec:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    5aee:	df 91       	pop	r29
    5af0:	cf 91       	pop	r28
    5af2:	1f 91       	pop	r17
    5af4:	0f 91       	pop	r16
    5af6:	ff 90       	pop	r15
    5af8:	ef 90       	pop	r14
    5afa:	df 90       	pop	r13
    5afc:	08 95       	ret

00005afe <Endpoint_Write_Stream_BE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    5afe:	df 92       	push	r13
    5b00:	ef 92       	push	r14
    5b02:	ff 92       	push	r15
    5b04:	0f 93       	push	r16
    5b06:	1f 93       	push	r17
    5b08:	cf 93       	push	r28
    5b0a:	df 93       	push	r29
    5b0c:	8c 01       	movw	r16, r24
    5b0e:	eb 01       	movw	r28, r22
    5b10:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    5b12:	b2 db       	rcall	.-2204   	; 0x5278 <Endpoint_WaitUntilReady>
    5b14:	d8 2e       	mov	r13, r24
    5b16:	88 23       	and	r24, r24
    5b18:	21 f5       	brne	.+72     	; 0x5b62 <Endpoint_Write_Stream_BE+0x64>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    5b1a:	21 97       	sbiw	r28, 0x01	; 1
    5b1c:	0c 0f       	add	r16, r28
    5b1e:	1d 1f       	adc	r17, r29
    5b20:	21 96       	adiw	r28, 0x01	; 1
    5b22:	1d c0       	rjmp	.+58     	; 0x5b5e <Endpoint_Write_Stream_BE+0x60>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    5b24:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    5b28:	85 fd       	sbrc	r24, 5
    5b2a:	12 c0       	rjmp	.+36     	; 0x5b50 <Endpoint_Write_Stream_BE+0x52>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5b2c:	80 91 e8 00 	lds	r24, 0x00E8
    5b30:	8e 77       	andi	r24, 0x7E	; 126
    5b32:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    5b36:	e1 14       	cp	r14, r1
    5b38:	f1 04       	cpc	r15, r1
    5b3a:	31 f0       	breq	.+12     	; 0x5b48 <Endpoint_Write_Stream_BE+0x4a>
    5b3c:	f7 01       	movw	r30, r14
    5b3e:	09 95       	icall
    5b40:	81 30       	cpi	r24, 0x01	; 1
    5b42:	11 f4       	brne	.+4      	; 0x5b48 <Endpoint_Write_Stream_BE+0x4a>
    5b44:	85 e0       	ldi	r24, 0x05	; 5
    5b46:	0e c0       	rjmp	.+28     	; 0x5b64 <Endpoint_Write_Stream_BE+0x66>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    5b48:	97 db       	rcall	.-2258   	; 0x5278 <Endpoint_WaitUntilReady>
    5b4a:	88 23       	and	r24, r24
    5b4c:	41 f0       	breq	.+16     	; 0x5b5e <Endpoint_Write_Stream_BE+0x60>
    5b4e:	0a c0       	rjmp	.+20     	; 0x5b64 <Endpoint_Write_Stream_BE+0x66>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    5b50:	f8 01       	movw	r30, r16
    5b52:	80 81       	ld	r24, Z
    5b54:	01 50       	subi	r16, 0x01	; 1
    5b56:	10 40       	sbci	r17, 0x00	; 0
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    5b58:	80 93 f1 00 	sts	0x00F1, r24
			Length--;
    5b5c:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    5b5e:	20 97       	sbiw	r28, 0x00	; 0
    5b60:	09 f7       	brne	.-62     	; 0x5b24 <Endpoint_Write_Stream_BE+0x26>
    5b62:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    5b64:	df 91       	pop	r29
    5b66:	cf 91       	pop	r28
    5b68:	1f 91       	pop	r17
    5b6a:	0f 91       	pop	r16
    5b6c:	ff 90       	pop	r15
    5b6e:	ef 90       	pop	r14
    5b70:	df 90       	pop	r13
    5b72:	08 95       	ret

00005b74 <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
    5b74:	df 92       	push	r13
    5b76:	ef 92       	push	r14
    5b78:	ff 92       	push	r15
    5b7a:	0f 93       	push	r16
    5b7c:	1f 93       	push	r17
    5b7e:	cf 93       	push	r28
    5b80:	df 93       	push	r29
    5b82:	18 2f       	mov	r17, r24
    5b84:	09 2f       	mov	r16, r25
    5b86:	eb 01       	movw	r28, r22
    5b88:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    5b8a:	76 db       	rcall	.-2324   	; 0x5278 <Endpoint_WaitUntilReady>
    5b8c:	d8 2e       	mov	r13, r24
    5b8e:	88 23       	and	r24, r24
    5b90:	19 f5       	brne	.+70     	; 0x5bd8 <Endpoint_Write_Stream_LE+0x64>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    5b92:	81 2f       	mov	r24, r17
    5b94:	90 2f       	mov	r25, r16
    5b96:	9c 01       	movw	r18, r24
    5b98:	89 01       	movw	r16, r18
    5b9a:	1c c0       	rjmp	.+56     	; 0x5bd4 <Endpoint_Write_Stream_LE+0x60>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    5b9c:	80 91 e8 00 	lds	r24, 0x00E8
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    5ba0:	85 fd       	sbrc	r24, 5
    5ba2:	12 c0       	rjmp	.+36     	; 0x5bc8 <Endpoint_Write_Stream_LE+0x54>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5ba4:	80 91 e8 00 	lds	r24, 0x00E8
    5ba8:	8e 77       	andi	r24, 0x7E	; 126
    5baa:	80 93 e8 00 	sts	0x00E8, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    5bae:	e1 14       	cp	r14, r1
    5bb0:	f1 04       	cpc	r15, r1
    5bb2:	31 f0       	breq	.+12     	; 0x5bc0 <Endpoint_Write_Stream_LE+0x4c>
    5bb4:	f7 01       	movw	r30, r14
    5bb6:	09 95       	icall
    5bb8:	81 30       	cpi	r24, 0x01	; 1
    5bba:	11 f4       	brne	.+4      	; 0x5bc0 <Endpoint_Write_Stream_LE+0x4c>
    5bbc:	85 e0       	ldi	r24, 0x05	; 5
    5bbe:	0d c0       	rjmp	.+26     	; 0x5bda <Endpoint_Write_Stream_LE+0x66>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    5bc0:	5b db       	rcall	.-2378   	; 0x5278 <Endpoint_WaitUntilReady>
    5bc2:	88 23       	and	r24, r24
    5bc4:	39 f0       	breq	.+14     	; 0x5bd4 <Endpoint_Write_Stream_LE+0x60>
    5bc6:	09 c0       	rjmp	.+18     	; 0x5bda <Endpoint_Write_Stream_LE+0x66>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    5bc8:	f8 01       	movw	r30, r16
    5bca:	81 91       	ld	r24, Z+
    5bcc:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    5bce:	80 93 f1 00 	sts	0x00F1, r24
			Length--;
    5bd2:	21 97       	sbiw	r28, 0x01	; 1
				} while (Length >= 8);
		}
	}
	#endif

	while (Length)
    5bd4:	20 97       	sbiw	r28, 0x00	; 0
    5bd6:	11 f7       	brne	.-60     	; 0x5b9c <Endpoint_Write_Stream_LE+0x28>
    5bd8:	8d 2d       	mov	r24, r13
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    5bda:	df 91       	pop	r29
    5bdc:	cf 91       	pop	r28
    5bde:	1f 91       	pop	r17
    5be0:	0f 91       	pop	r16
    5be2:	ff 90       	pop	r15
    5be4:	ef 90       	pop	r14
    5be6:	df 90       	pop	r13
    5be8:	08 95       	ret

00005bea <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    5bea:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    5bec:	80 91 76 06 	lds	r24, 0x0676
    5bf0:	88 23       	and	r24, r24
    5bf2:	61 f0       	breq	.+24     	; 0x5c0c <USB_USBTask+0x22>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    5bf4:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    5bf8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    5bfc:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    5c00:	83 ff       	sbrs	r24, 3
    5c02:	01 c0       	rjmp	.+2      	; 0x5c06 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
    5c04:	d2 dc       	rcall	.-1628   	; 0x55aa <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    5c06:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    5c08:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    5c0c:	1f 91       	pop	r17
    5c0e:	08 95       	ret

00005c10 <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    5c10:	4f 92       	push	r4
    5c12:	5f 92       	push	r5
    5c14:	6f 92       	push	r6
    5c16:	7f 92       	push	r7
    5c18:	8f 92       	push	r8
    5c1a:	9f 92       	push	r9
    5c1c:	af 92       	push	r10
    5c1e:	bf 92       	push	r11
    5c20:	cf 92       	push	r12
    5c22:	df 92       	push	r13
    5c24:	ef 92       	push	r14
    5c26:	ff 92       	push	r15
    5c28:	0f 93       	push	r16
    5c2a:	1f 93       	push	r17
    5c2c:	df 93       	push	r29
    5c2e:	cf 93       	push	r28
    5c30:	00 d0       	rcall	.+0      	; 0x5c32 <HID_Device_USBTask+0x22>
    5c32:	0f 92       	push	r0
    5c34:	cd b7       	in	r28, 0x3d	; 61
    5c36:	de b7       	in	r29, 0x3e	; 62
    5c38:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);

			Endpoint_ClearIN();
		}
	}
}
    5c3a:	6d b6       	in	r6, 0x3d	; 61
    5c3c:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    5c3e:	80 91 76 06 	lds	r24, 0x0676
    5c42:	84 30       	cpi	r24, 0x04	; 4
    5c44:	09 f0       	breq	.+2      	; 0x5c48 <HID_Device_USBTask+0x38>
    5c46:	86 c0       	rjmp	.+268    	; 0x5d54 <HID_Device_USBTask+0x144>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    5c48:	f7 01       	movw	r30, r14
    5c4a:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    5c4c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    5c50:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    5c54:	85 ff       	sbrs	r24, 5
    5c56:	7e c0       	rjmp	.+252    	; 0x5d54 <HID_Device_USBTask+0x144>
    5c58:	5d b6       	in	r5, 0x3d	; 61
    5c5a:	4e b6       	in	r4, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    5c5c:	47 81       	ldd	r20, Z+7	; 0x07
    5c5e:	8d b7       	in	r24, 0x3d	; 61
    5c60:	9e b7       	in	r25, 0x3e	; 62
    5c62:	84 1b       	sub	r24, r20
    5c64:	91 09       	sbc	r25, r1
    5c66:	0f b6       	in	r0, 0x3f	; 63
    5c68:	f8 94       	cli
    5c6a:	9e bf       	out	0x3e, r25	; 62
    5c6c:	0f be       	out	0x3f, r0	; 63
    5c6e:	8d bf       	out	0x3d, r24	; 61
    5c70:	0d b7       	in	r16, 0x3d	; 61
    5c72:	1e b7       	in	r17, 0x3e	; 62
    5c74:	0f 5f       	subi	r16, 0xFF	; 255
    5c76:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
    5c78:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    5c7a:	1b 82       	std	Y+3, r1	; 0x03
    5c7c:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    5c7e:	c0 2e       	mov	r12, r16
    5c80:	91 2e       	mov	r9, r17
    5c82:	c8 01       	movw	r24, r16
    5c84:	60 e0       	ldi	r22, 0x00	; 0
    5c86:	70 e0       	ldi	r23, 0x00	; 0
    5c88:	50 e0       	ldi	r21, 0x00	; 0
    5c8a:	52 d4       	rcall	.+2212   	; 0x6530 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
    5c8c:	c7 01       	movw	r24, r14
    5c8e:	be 01       	movw	r22, r28
    5c90:	6f 5f       	subi	r22, 0xFF	; 255
    5c92:	7f 4f       	sbci	r23, 0xFF	; 255
    5c94:	40 e0       	ldi	r20, 0x00	; 0
    5c96:	98 01       	movw	r18, r16
    5c98:	8e 01       	movw	r16, r28
    5c9a:	0e 5f       	subi	r16, 0xFE	; 254
    5c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    5c9e:	0e 94 84 01 	call	0x308	; 0x308 <CALLBACK_HID_Device_CreateHIDReport>
    5ca2:	88 2e       	mov	r8, r24
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    5ca4:	f7 01       	movw	r30, r14
    5ca6:	81 85       	ldd	r24, Z+9	; 0x09
    5ca8:	92 85       	ldd	r25, Z+10	; 0x0a
    5caa:	89 2b       	or	r24, r25
    5cac:	19 f4       	brne	.+6      	; 0x5cb4 <HID_Device_USBTask+0xa4>
    5cae:	aa 24       	eor	r10, r10
    5cb0:	bb 24       	eor	r11, r11
    5cb2:	0b c0       	rjmp	.+22     	; 0x5cca <HID_Device_USBTask+0xba>
    5cb4:	20 e0       	ldi	r18, 0x00	; 0
    5cb6:	f7 01       	movw	r30, r14
    5cb8:	83 85       	ldd	r24, Z+11	; 0x0b
    5cba:	94 85       	ldd	r25, Z+12	; 0x0c
    5cbc:	89 2b       	or	r24, r25
    5cbe:	09 f0       	breq	.+2      	; 0x5cc2 <HID_Device_USBTask+0xb2>
    5cc0:	21 e0       	ldi	r18, 0x01	; 1
    5cc2:	81 e0       	ldi	r24, 0x01	; 1
    5cc4:	28 27       	eor	r18, r24
    5cc6:	a2 2e       	mov	r10, r18
    5cc8:	bb 24       	eor	r11, r11

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    5cca:	f7 01       	movw	r30, r14
    5ccc:	05 81       	ldd	r16, Z+5	; 0x05
    5cce:	16 81       	ldd	r17, Z+6	; 0x06
    5cd0:	01 15       	cp	r16, r1
    5cd2:	11 05       	cpc	r17, r1
    5cd4:	11 f4       	brne	.+4      	; 0x5cda <HID_Device_USBTask+0xca>
    5cd6:	dd 24       	eor	r13, r13
    5cd8:	12 c0       	rjmp	.+36     	; 0x5cfe <HID_Device_USBTask+0xee>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    5cda:	4a 81       	ldd	r20, Y+2	; 0x02
    5cdc:	5b 81       	ldd	r21, Y+3	; 0x03
    5cde:	8c 2d       	mov	r24, r12
    5ce0:	99 2d       	mov	r25, r9
    5ce2:	b8 01       	movw	r22, r16
    5ce4:	0f d4       	rcall	.+2078   	; 0x6504 <memcmp>
    5ce6:	dd 24       	eor	r13, r13
    5ce8:	00 97       	sbiw	r24, 0x00	; 0
    5cea:	11 f0       	breq	.+4      	; 0x5cf0 <HID_Device_USBTask+0xe0>
    5cec:	dd 24       	eor	r13, r13
    5cee:	d3 94       	inc	r13
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    5cf0:	f7 01       	movw	r30, r14
    5cf2:	47 81       	ldd	r20, Z+7	; 0x07
    5cf4:	c8 01       	movw	r24, r16
    5cf6:	6c 2d       	mov	r22, r12
    5cf8:	79 2d       	mov	r23, r9
    5cfa:	50 e0       	ldi	r21, 0x00	; 0
    5cfc:	10 d4       	rcall	.+2080   	; 0x651e <memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    5cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    5d00:	9b 81       	ldd	r25, Y+3	; 0x03
    5d02:	89 2b       	or	r24, r25
    5d04:	f9 f0       	breq	.+62     	; 0x5d44 <HID_Device_USBTask+0x134>
    5d06:	88 20       	and	r8, r8
    5d08:	21 f4       	brne	.+8      	; 0x5d12 <HID_Device_USBTask+0x102>
    5d0a:	dd 20       	and	r13, r13
    5d0c:	11 f4       	brne	.+4      	; 0x5d12 <HID_Device_USBTask+0x102>
    5d0e:	ab 28       	or	r10, r11
    5d10:	c9 f0       	breq	.+50     	; 0x5d44 <HID_Device_USBTask+0x134>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    5d12:	f7 01       	movw	r30, r14
    5d14:	81 85       	ldd	r24, Z+9	; 0x09
    5d16:	92 85       	ldd	r25, Z+10	; 0x0a
    5d18:	94 87       	std	Z+12, r25	; 0x0c
    5d1a:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
    5d1c:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    5d1e:	80 93 e9 00 	sts	0x00E9, r24

			if (ReportID)
    5d22:	89 81       	ldd	r24, Y+1	; 0x01
    5d24:	88 23       	and	r24, r24
    5d26:	11 f0       	breq	.+4      	; 0x5d2c <HID_Device_USBTask+0x11c>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    5d28:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_Byte(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);
    5d2c:	6a 81       	ldd	r22, Y+2	; 0x02
    5d2e:	7b 81       	ldd	r23, Y+3	; 0x03
    5d30:	8c 2d       	mov	r24, r12
    5d32:	99 2d       	mov	r25, r9
    5d34:	40 e0       	ldi	r20, 0x00	; 0
    5d36:	50 e0       	ldi	r21, 0x00	; 0
    5d38:	1d df       	rcall	.-454    	; 0x5b74 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5d3a:	80 91 e8 00 	lds	r24, 0x00E8
    5d3e:	8e 77       	andi	r24, 0x7E	; 126
    5d40:	80 93 e8 00 	sts	0x00E8, r24
    5d44:	85 2d       	mov	r24, r5
    5d46:	94 2d       	mov	r25, r4
    5d48:	9c 01       	movw	r18, r24
    5d4a:	0f b6       	in	r0, 0x3f	; 63
    5d4c:	f8 94       	cli
    5d4e:	3e bf       	out	0x3e, r19	; 62
    5d50:	0f be       	out	0x3f, r0	; 63
    5d52:	2d bf       	out	0x3d, r18	; 61

			Endpoint_ClearIN();
		}
	}
}
    5d54:	0f b6       	in	r0, 0x3f	; 63
    5d56:	f8 94       	cli
    5d58:	7e be       	out	0x3e, r7	; 62
    5d5a:	0f be       	out	0x3f, r0	; 63
    5d5c:	6d be       	out	0x3d, r6	; 61
    5d5e:	0f 90       	pop	r0
    5d60:	0f 90       	pop	r0
    5d62:	0f 90       	pop	r0
    5d64:	cf 91       	pop	r28
    5d66:	df 91       	pop	r29
    5d68:	1f 91       	pop	r17
    5d6a:	0f 91       	pop	r16
    5d6c:	ff 90       	pop	r15
    5d6e:	ef 90       	pop	r14
    5d70:	df 90       	pop	r13
    5d72:	cf 90       	pop	r12
    5d74:	bf 90       	pop	r11
    5d76:	af 90       	pop	r10
    5d78:	9f 90       	pop	r9
    5d7a:	8f 90       	pop	r8
    5d7c:	7f 90       	pop	r7
    5d7e:	6f 90       	pop	r6
    5d80:	5f 90       	pop	r5
    5d82:	4f 90       	pop	r4
    5d84:	08 95       	ret

00005d86 <HID_Device_ConfigureEndpoints>:
			break;
	}
}

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    5d86:	cf 93       	push	r28
    5d88:	df 93       	push	r29
    5d8a:	dc 01       	movw	r26, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    5d8c:	08 96       	adiw	r24, 0x08	; 8
    5d8e:	fc 01       	movw	r30, r24
    5d90:	85 e0       	ldi	r24, 0x05	; 5
    5d92:	ef 01       	movw	r28, r30
    5d94:	19 92       	st	Y+, r1
    5d96:	8a 95       	dec	r24
    5d98:	e9 f7       	brne	.-6      	; 0x5d94 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    5d9a:	81 e0       	ldi	r24, 0x01	; 1
    5d9c:	18 96       	adiw	r26, 0x08	; 8
    5d9e:	8c 93       	st	X, r24
    5da0:	18 97       	sbiw	r26, 0x08	; 8
	HIDInterfaceInfo->State.IdleCount = 500;
    5da2:	84 ef       	ldi	r24, 0xF4	; 244
    5da4:	91 e0       	ldi	r25, 0x01	; 1
    5da6:	1a 96       	adiw	r26, 0x0a	; 10
    5da8:	9c 93       	st	X, r25
    5daa:	8e 93       	st	-X, r24
    5dac:	19 97       	sbiw	r26, 0x09	; 9

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
    5dae:	11 96       	adiw	r26, 0x01	; 1
    5db0:	3c 91       	ld	r19, X
    5db2:	11 97       	sbiw	r26, 0x01	; 1
    5db4:	12 96       	adiw	r26, 0x02	; 2
    5db6:	6d 91       	ld	r22, X+
    5db8:	7c 91       	ld	r23, X
    5dba:	13 97       	sbiw	r26, 0x03	; 3
    5dbc:	14 96       	adiw	r26, 0x04	; 4
    5dbe:	8c 91       	ld	r24, X
    5dc0:	88 23       	and	r24, r24
    5dc2:	11 f4       	brne	.+4      	; 0x5dc8 <HID_Device_ConfigureEndpoints+0x42>
    5dc4:	40 e0       	ldi	r20, 0x00	; 0
    5dc6:	01 c0       	rjmp	.+2      	; 0x5dca <HID_Device_ConfigureEndpoints+0x44>
    5dc8:	44 e0       	ldi	r20, 0x04	; 4
    5dca:	20 e0       	ldi	r18, 0x00	; 0
    5dcc:	88 e0       	ldi	r24, 0x08	; 8
    5dce:	90 e0       	ldi	r25, 0x00	; 0
    5dd0:	03 c0       	rjmp	.+6      	; 0x5dd8 <HID_Device_ConfigureEndpoints+0x52>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    5dd2:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    5dd4:	88 0f       	add	r24, r24
    5dd6:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    5dd8:	86 17       	cp	r24, r22
    5dda:	97 07       	cpc	r25, r23
    5ddc:	d0 f3       	brcs	.-12     	; 0x5dd2 <HID_Device_ConfigureEndpoints+0x4c>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
    5dde:	42 60       	ori	r20, 0x02	; 2
    5de0:	22 95       	swap	r18
    5de2:	20 7f       	andi	r18, 0xF0	; 240
    5de4:	42 2b       	or	r20, r18
    5de6:	83 2f       	mov	r24, r19
    5de8:	61 ec       	ldi	r22, 0xC1	; 193
    5dea:	12 da       	rcall	.-3036   	; 0x5210 <Endpoint_ConfigureEndpoint_Prv>
    5dec:	81 11       	cpse	r24, r1
    5dee:	81 e0       	ldi	r24, 0x01	; 1
	{
		return false;
	}

	return true;
}
    5df0:	df 91       	pop	r29
    5df2:	cf 91       	pop	r28
    5df4:	08 95       	ret

00005df6 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    5df6:	6f 92       	push	r6
    5df8:	7f 92       	push	r7
    5dfa:	8f 92       	push	r8
    5dfc:	9f 92       	push	r9
    5dfe:	af 92       	push	r10
    5e00:	bf 92       	push	r11
    5e02:	cf 92       	push	r12
    5e04:	df 92       	push	r13
    5e06:	ef 92       	push	r14
    5e08:	ff 92       	push	r15
    5e0a:	0f 93       	push	r16
    5e0c:	1f 93       	push	r17
    5e0e:	df 93       	push	r29
    5e10:	cf 93       	push	r28
    5e12:	00 d0       	rcall	.+0      	; 0x5e14 <HID_Device_ProcessControlRequest+0x1e>
    5e14:	0f 92       	push	r0
    5e16:	cd b7       	in	r28, 0x3d	; 61
    5e18:	de b7       	in	r29, 0x3e	; 62
    5e1a:	4c 01       	movw	r8, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    5e1c:	6d b6       	in	r6, 0x3d	; 61
    5e1e:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    5e20:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    5e24:	83 ff       	sbrs	r24, 3
    5e26:	fa c0       	rjmp	.+500    	; 0x601c <HID_Device_ProcessControlRequest+0x226>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    5e28:	f4 01       	movw	r30, r8
    5e2a:	80 81       	ld	r24, Z
    5e2c:	90 e0       	ldi	r25, 0x00	; 0
    5e2e:	20 91 7b 06 	lds	r18, 0x067B
    5e32:	30 91 7c 06 	lds	r19, 0x067C
    5e36:	28 17       	cp	r18, r24
    5e38:	39 07       	cpc	r19, r25
    5e3a:	09 f0       	breq	.+2      	; 0x5e3e <HID_Device_ProcessControlRequest+0x48>
    5e3c:	ef c0       	rjmp	.+478    	; 0x601c <HID_Device_ProcessControlRequest+0x226>
	  return;

	switch (USB_ControlRequest.bRequest)
    5e3e:	80 91 78 06 	lds	r24, 0x0678
    5e42:	83 30       	cpi	r24, 0x03	; 3
    5e44:	09 f4       	brne	.+2      	; 0x5e48 <HID_Device_ProcessControlRequest+0x52>
    5e46:	9a c0       	rjmp	.+308    	; 0x5f7c <HID_Device_ProcessControlRequest+0x186>
    5e48:	84 30       	cpi	r24, 0x04	; 4
    5e4a:	30 f4       	brcc	.+12     	; 0x5e58 <HID_Device_ProcessControlRequest+0x62>
    5e4c:	81 30       	cpi	r24, 0x01	; 1
    5e4e:	71 f0       	breq	.+28     	; 0x5e6c <HID_Device_ProcessControlRequest+0x76>
    5e50:	82 30       	cpi	r24, 0x02	; 2
    5e52:	09 f0       	breq	.+2      	; 0x5e56 <HID_Device_ProcessControlRequest+0x60>
    5e54:	e3 c0       	rjmp	.+454    	; 0x601c <HID_Device_ProcessControlRequest+0x226>
    5e56:	ca c0       	rjmp	.+404    	; 0x5fec <HID_Device_ProcessControlRequest+0x1f6>
    5e58:	8a 30       	cpi	r24, 0x0A	; 10
    5e5a:	09 f4       	brne	.+2      	; 0x5e5e <HID_Device_ProcessControlRequest+0x68>
    5e5c:	af c0       	rjmp	.+350    	; 0x5fbc <HID_Device_ProcessControlRequest+0x1c6>
    5e5e:	8b 30       	cpi	r24, 0x0B	; 11
    5e60:	09 f4       	brne	.+2      	; 0x5e64 <HID_Device_ProcessControlRequest+0x6e>
    5e62:	99 c0       	rjmp	.+306    	; 0x5f96 <HID_Device_ProcessControlRequest+0x1a0>
    5e64:	89 30       	cpi	r24, 0x09	; 9
    5e66:	09 f0       	breq	.+2      	; 0x5e6a <HID_Device_ProcessControlRequest+0x74>
    5e68:	d9 c0       	rjmp	.+434    	; 0x601c <HID_Device_ProcessControlRequest+0x226>
    5e6a:	50 c0       	rjmp	.+160    	; 0x5f0c <HID_Device_ProcessControlRequest+0x116>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    5e6c:	80 91 77 06 	lds	r24, 0x0677
    5e70:	81 3a       	cpi	r24, 0xA1	; 161
    5e72:	09 f0       	breq	.+2      	; 0x5e76 <HID_Device_ProcessControlRequest+0x80>
    5e74:	d3 c0       	rjmp	.+422    	; 0x601c <HID_Device_ProcessControlRequest+0x226>
    5e76:	ad b6       	in	r10, 0x3d	; 61
    5e78:	fe b6       	in	r15, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    5e7a:	1b 82       	std	Y+3, r1	; 0x03
    5e7c:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    5e7e:	80 91 79 06 	lds	r24, 0x0679
    5e82:	10 91 7a 06 	lds	r17, 0x067A
    5e86:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    5e88:	f4 01       	movw	r30, r8
    5e8a:	47 81       	ldd	r20, Z+7	; 0x07
    5e8c:	8d b7       	in	r24, 0x3d	; 61
    5e8e:	9e b7       	in	r25, 0x3e	; 62
    5e90:	84 1b       	sub	r24, r20
    5e92:	91 09       	sbc	r25, r1
    5e94:	0f b6       	in	r0, 0x3f	; 63
    5e96:	f8 94       	cli
    5e98:	9e bf       	out	0x3e, r25	; 62
    5e9a:	0f be       	out	0x3f, r0	; 63
    5e9c:	8d bf       	out	0x3d, r24	; 61
    5e9e:	cd b6       	in	r12, 0x3d	; 61
    5ea0:	de b6       	in	r13, 0x3e	; 62
    5ea2:	08 94       	sec
    5ea4:	c1 1c       	adc	r12, r1
    5ea6:	d1 1c       	adc	r13, r1

				memset(ReportData, 0, sizeof(ReportData));
    5ea8:	ec 2c       	mov	r14, r12
    5eaa:	bd 2c       	mov	r11, r13
    5eac:	c6 01       	movw	r24, r12
    5eae:	60 e0       	ldi	r22, 0x00	; 0
    5eb0:	70 e0       	ldi	r23, 0x00	; 0
    5eb2:	50 e0       	ldi	r21, 0x00	; 0
    5eb4:	3d d3       	rcall	.+1658   	; 0x6530 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    5eb6:	11 50       	subi	r17, 0x01	; 1
    5eb8:	c4 01       	movw	r24, r8
    5eba:	be 01       	movw	r22, r28
    5ebc:	6f 5f       	subi	r22, 0xFF	; 255
    5ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    5ec0:	41 2f       	mov	r20, r17
    5ec2:	96 01       	movw	r18, r12
    5ec4:	8e 01       	movw	r16, r28
    5ec6:	0e 5f       	subi	r16, 0xFE	; 254
    5ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    5eca:	0e 94 84 01 	call	0x308	; 0x308 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    5ece:	f4 01       	movw	r30, r8
    5ed0:	25 81       	ldd	r18, Z+5	; 0x05
    5ed2:	36 81       	ldd	r19, Z+6	; 0x06
    5ed4:	21 15       	cp	r18, r1
    5ed6:	31 05       	cpc	r19, r1
    5ed8:	29 f0       	breq	.+10     	; 0x5ee4 <HID_Device_ProcessControlRequest+0xee>
				  memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    5eda:	47 81       	ldd	r20, Z+7	; 0x07
    5edc:	c9 01       	movw	r24, r18
    5ede:	b6 01       	movw	r22, r12
    5ee0:	50 e0       	ldi	r21, 0x00	; 0
    5ee2:	1d d3       	rcall	.+1594   	; 0x651e <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    5ee4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    5ee8:	80 91 e8 00 	lds	r24, 0x00E8
    5eec:	87 7f       	andi	r24, 0xF7	; 247
    5eee:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    5ef2:	6a 81       	ldd	r22, Y+2	; 0x02
    5ef4:	7b 81       	ldd	r23, Y+3	; 0x03
    5ef6:	8e 2d       	mov	r24, r14
    5ef8:	9b 2d       	mov	r25, r11
    5efa:	c7 dc       	rcall	.-1650   	; 0x588a <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    5efc:	80 91 e8 00 	lds	r24, 0x00E8
    5f00:	8b 77       	andi	r24, 0x7B	; 123
    5f02:	80 93 e8 00 	sts	0x00E8, r24
    5f06:	2a 2d       	mov	r18, r10
    5f08:	3f 2d       	mov	r19, r15
    5f0a:	32 c0       	rjmp	.+100    	; 0x5f70 <HID_Device_ProcessControlRequest+0x17a>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    5f0c:	80 91 77 06 	lds	r24, 0x0677
    5f10:	81 32       	cpi	r24, 0x21	; 33
    5f12:	09 f0       	breq	.+2      	; 0x5f16 <HID_Device_ProcessControlRequest+0x120>
    5f14:	83 c0       	rjmp	.+262    	; 0x601c <HID_Device_ProcessControlRequest+0x226>
    5f16:	ae b6       	in	r10, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    5f18:	00 91 7d 06 	lds	r16, 0x067D
    5f1c:	10 91 7e 06 	lds	r17, 0x067E
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    5f20:	c0 90 79 06 	lds	r12, 0x0679
    5f24:	d0 90 7a 06 	lds	r13, 0x067A
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    5f28:	8d b7       	in	r24, 0x3d	; 61
    5f2a:	9e b7       	in	r25, 0x3e	; 62
    5f2c:	80 1b       	sub	r24, r16
    5f2e:	91 0b       	sbc	r25, r17
    5f30:	0f b6       	in	r0, 0x3f	; 63
    5f32:	f8 94       	cli
    5f34:	9e bf       	out	0x3e, r25	; 62
    5f36:	0f be       	out	0x3f, r0	; 63
    5f38:	8d bf       	out	0x3d, r24	; 61
    5f3a:	ed b6       	in	r14, 0x3d	; 61
    5f3c:	fe b6       	in	r15, 0x3e	; 62
    5f3e:	08 94       	sec
    5f40:	e1 1c       	adc	r14, r1
    5f42:	f1 1c       	adc	r15, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    5f44:	80 91 e8 00 	lds	r24, 0x00E8
    5f48:	87 7f       	andi	r24, 0xF7	; 247
    5f4a:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    5f4e:	c7 01       	movw	r24, r14
    5f50:	b8 01       	movw	r22, r16
    5f52:	59 dd       	rcall	.-1358   	; 0x5a06 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5f54:	80 91 e8 00 	lds	r24, 0x00E8
    5f58:	8e 77       	andi	r24, 0x7E	; 126
    5f5a:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType, ReportData, ReportSize);
    5f5e:	da 94       	dec	r13
    5f60:	c4 01       	movw	r24, r8
    5f62:	6c 2d       	mov	r22, r12
    5f64:	4d 2d       	mov	r20, r13
    5f66:	97 01       	movw	r18, r14
    5f68:	0e 94 c8 00 	call	0x190	; 0x190 <CALLBACK_HID_Device_ProcessHIDReport>
    5f6c:	26 2d       	mov	r18, r6
    5f6e:	3a 2d       	mov	r19, r10
    5f70:	0f b6       	in	r0, 0x3f	; 63
    5f72:	f8 94       	cli
    5f74:	3e bf       	out	0x3e, r19	; 62
    5f76:	0f be       	out	0x3f, r0	; 63
    5f78:	2d bf       	out	0x3d, r18	; 61
    5f7a:	50 c0       	rjmp	.+160    	; 0x601c <HID_Device_ProcessControlRequest+0x226>
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    5f7c:	80 91 77 06 	lds	r24, 0x0677
    5f80:	81 3a       	cpi	r24, 0xA1	; 161
    5f82:	09 f0       	breq	.+2      	; 0x5f86 <HID_Device_ProcessControlRequest+0x190>
    5f84:	4b c0       	rjmp	.+150    	; 0x601c <HID_Device_ProcessControlRequest+0x226>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    5f86:	80 91 e8 00 	lds	r24, 0x00E8
    5f8a:	87 7f       	andi	r24, 0xF7	; 247
    5f8c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Byte(HIDInterfaceInfo->State.UsingReportProtocol);
    5f90:	f4 01       	movw	r30, r8
    5f92:	80 85       	ldd	r24, Z+8	; 0x08
    5f94:	3b c0       	rjmp	.+118    	; 0x600c <HID_Device_ProcessControlRequest+0x216>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    5f96:	80 91 77 06 	lds	r24, 0x0677
    5f9a:	81 32       	cpi	r24, 0x21	; 33
    5f9c:	09 f0       	breq	.+2      	; 0x5fa0 <HID_Device_ProcessControlRequest+0x1aa>
    5f9e:	3e c0       	rjmp	.+124    	; 0x601c <HID_Device_ProcessControlRequest+0x226>
    5fa0:	80 91 e8 00 	lds	r24, 0x00E8
    5fa4:	87 7f       	andi	r24, 0xF7	; 247
    5fa6:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    5faa:	45 d9       	rcall	.-3446   	; 0x5236 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    5fac:	90 e0       	ldi	r25, 0x00	; 0
    5fae:	80 91 79 06 	lds	r24, 0x0679
    5fb2:	81 11       	cpse	r24, r1
    5fb4:	91 e0       	ldi	r25, 0x01	; 1
    5fb6:	f4 01       	movw	r30, r8
    5fb8:	90 87       	std	Z+8, r25	; 0x08
    5fba:	30 c0       	rjmp	.+96     	; 0x601c <HID_Device_ProcessControlRequest+0x226>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    5fbc:	80 91 77 06 	lds	r24, 0x0677
    5fc0:	81 32       	cpi	r24, 0x21	; 33
    5fc2:	61 f5       	brne	.+88     	; 0x601c <HID_Device_ProcessControlRequest+0x226>
    5fc4:	80 91 e8 00 	lds	r24, 0x00E8
    5fc8:	87 7f       	andi	r24, 0xF7	; 247
    5fca:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    5fce:	33 d9       	rcall	.-3482   	; 0x5236 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    5fd0:	80 91 79 06 	lds	r24, 0x0679
    5fd4:	90 91 7a 06 	lds	r25, 0x067A
    5fd8:	80 70       	andi	r24, 0x00	; 0
    5fda:	76 e0       	ldi	r23, 0x06	; 6
    5fdc:	96 95       	lsr	r25
    5fde:	87 95       	ror	r24
    5fe0:	7a 95       	dec	r23
    5fe2:	e1 f7       	brne	.-8      	; 0x5fdc <HID_Device_ProcessControlRequest+0x1e6>
    5fe4:	f4 01       	movw	r30, r8
    5fe6:	92 87       	std	Z+10, r25	; 0x0a
    5fe8:	81 87       	std	Z+9, r24	; 0x09
    5fea:	18 c0       	rjmp	.+48     	; 0x601c <HID_Device_ProcessControlRequest+0x226>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    5fec:	80 91 77 06 	lds	r24, 0x0677
    5ff0:	81 3a       	cpi	r24, 0xA1	; 161
    5ff2:	a1 f4       	brne	.+40     	; 0x601c <HID_Device_ProcessControlRequest+0x226>
    5ff4:	80 91 e8 00 	lds	r24, 0x00E8
    5ff8:	87 7f       	andi	r24, 0xF7	; 247
    5ffa:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Byte(HIDInterfaceInfo->State.IdleCount >> 2);
    5ffe:	f4 01       	movw	r30, r8
    6000:	81 85       	ldd	r24, Z+9	; 0x09
    6002:	92 85       	ldd	r25, Z+10	; 0x0a
    6004:	96 95       	lsr	r25
    6006:	87 95       	ror	r24
    6008:	96 95       	lsr	r25
    600a:	87 95       	ror	r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    600c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    6010:	80 91 e8 00 	lds	r24, 0x00E8
    6014:	8e 77       	andi	r24, 0x7E	; 126
    6016:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    601a:	0d d9       	rcall	.-3558   	; 0x5236 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    601c:	0f b6       	in	r0, 0x3f	; 63
    601e:	f8 94       	cli
    6020:	7e be       	out	0x3e, r7	; 62
    6022:	0f be       	out	0x3f, r0	; 63
    6024:	6d be       	out	0x3d, r6	; 61
    6026:	0f 90       	pop	r0
    6028:	0f 90       	pop	r0
    602a:	0f 90       	pop	r0
    602c:	cf 91       	pop	r28
    602e:	df 91       	pop	r29
    6030:	1f 91       	pop	r17
    6032:	0f 91       	pop	r16
    6034:	ff 90       	pop	r15
    6036:	ef 90       	pop	r14
    6038:	df 90       	pop	r13
    603a:	cf 90       	pop	r12
    603c:	bf 90       	pop	r11
    603e:	af 90       	pop	r10
    6040:	9f 90       	pop	r9
    6042:	8f 90       	pop	r8
    6044:	7f 90       	pop	r7
    6046:	6f 90       	pop	r6
    6048:	08 95       	ret

0000604a <StreamCallback_MS_Device_AbortOnMassStoreReset>:
{
	#if !defined(INTERRUPT_CONTROL_ENDPOINT)
	USB_USBTask();
	#endif

	if (*CallbackIsResetSource)
    604a:	e0 91 aa 03 	lds	r30, 0x03AA
    604e:	f0 91 ab 03 	lds	r31, 0x03AB
    6052:	80 81       	ld	r24, Z
	  return STREAMCALLBACK_Abort;
	else
	  return STREAMCALLBACK_Continue;
}
    6054:	08 95       	ret

00006056 <MS_Device_USBTask>:

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    6056:	0f 93       	push	r16
    6058:	1f 93       	push	r17
    605a:	cf 93       	push	r28
    605c:	df 93       	push	r29
    605e:	ec 01       	movw	r28, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    6060:	80 91 76 06 	lds	r24, 0x0676
    6064:	84 30       	cpi	r24, 0x04	; 4
    6066:	09 f0       	breq	.+2      	; 0x606a <MS_Device_USBTask+0x14>
    6068:	e1 c0       	rjmp	.+450    	; 0x622c <MS_Device_USBTask+0x1d6>
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    606a:	9d 81       	ldd	r25, Y+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    606c:	90 93 e9 00 	sts	0x00E9, r25
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    6070:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsReadWriteAllowed())
    6074:	85 ff       	sbrs	r24, 5
    6076:	a5 c0       	rjmp	.+330    	; 0x61c2 <MS_Device_USBTask+0x16c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    6078:	90 93 e9 00 	sts	0x00E9, r25

static bool MS_Device_ReadInCommandBlock(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);

	CallbackIsResetSource = &MSInterfaceInfo->State.IsMassStoreReset;
    607c:	8e 01       	movw	r16, r28
    607e:	0a 5c       	subi	r16, 0xCA	; 202
    6080:	1f 4f       	sbci	r17, 0xFF	; 255
    6082:	10 93 ab 03 	sts	0x03AB, r17
    6086:	00 93 aa 03 	sts	0x03AA, r16
	if (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    608a:	ce 01       	movw	r24, r28
    608c:	0a 96       	adiw	r24, 0x0a	; 10
    608e:	6f e0       	ldi	r22, 0x0F	; 15
    6090:	70 e0       	ldi	r23, 0x00	; 0
    6092:	45 e2       	ldi	r20, 0x25	; 37
    6094:	50 e3       	ldi	r21, 0x30	; 48
    6096:	f8 dc       	rcall	.-1552   	; 0x5a88 <Endpoint_Read_Stream_LE>
    6098:	88 23       	and	r24, r24
    609a:	09 f0       	breq	.+2      	; 0x609e <MS_Device_USBTask+0x48>
    609c:	92 c0       	rjmp	.+292    	; 0x61c2 <MS_Device_USBTask+0x16c>
	                            StreamCallback_MS_Device_AbortOnMassStoreReset))
	{
		return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != MS_CBW_SIGNATURE)                  ||
    609e:	8a 85       	ldd	r24, Y+10	; 0x0a
    60a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    60a2:	ac 85       	ldd	r26, Y+12	; 0x0c
    60a4:	bd 85       	ldd	r27, Y+13	; 0x0d
    60a6:	85 55       	subi	r24, 0x55	; 85
    60a8:	93 45       	sbci	r25, 0x53	; 83
    60aa:	a2 44       	sbci	r26, 0x42	; 66
    60ac:	b3 44       	sbci	r27, 0x43	; 67
    60ae:	79 f4       	brne	.+30     	; 0x60ce <MS_Device_USBTask+0x78>
    60b0:	9f 89       	ldd	r25, Y+23	; 0x17
    60b2:	89 85       	ldd	r24, Y+9	; 0x09
    60b4:	98 17       	cp	r25, r24
    60b6:	58 f4       	brcc	.+22     	; 0x60ce <MS_Device_USBTask+0x78>
    60b8:	8e 89       	ldd	r24, Y+22	; 0x16
    60ba:	90 e0       	ldi	r25, 0x00	; 0
    60bc:	8f 71       	andi	r24, 0x1F	; 31
    60be:	90 70       	andi	r25, 0x00	; 0
    60c0:	89 2b       	or	r24, r25
    60c2:	29 f4       	brne	.+10     	; 0x60ce <MS_Device_USBTask+0x78>
    60c4:	68 8d       	ldd	r22, Y+24	; 0x18
    60c6:	66 23       	and	r22, r22
    60c8:	11 f0       	breq	.+4      	; 0x60ce <MS_Device_USBTask+0x78>
    60ca:	61 31       	cpi	r22, 0x11	; 17
    60cc:	70 f0       	brcs	.+28     	; 0x60ea <MS_Device_USBTask+0x94>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    60ce:	80 91 eb 00 	lds	r24, 0x00EB
    60d2:	80 62       	ori	r24, 0x20	; 32
    60d4:	80 93 eb 00 	sts	0x00EB, r24
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength == 0)                                 ||
		(MSInterfaceInfo->State.CommandBlock.SCSICommandLength >  16))
	{
		Endpoint_StallTransaction();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    60d8:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    60da:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    60de:	80 91 eb 00 	lds	r24, 0x00EB
    60e2:	80 62       	ori	r24, 0x20	; 32
    60e4:	80 93 eb 00 	sts	0x00EB, r24
    60e8:	6c c0       	rjmp	.+216    	; 0x61c2 <MS_Device_USBTask+0x16c>
		Endpoint_StallTransaction();

		return false;
	}

	CallbackIsResetSource = &MSInterfaceInfo->State.IsMassStoreReset;
    60ea:	10 93 ab 03 	sts	0x03AB, r17
    60ee:	00 93 aa 03 	sts	0x03AA, r16
	if (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    60f2:	ce 01       	movw	r24, r28
    60f4:	49 96       	adiw	r24, 0x19	; 25
    60f6:	70 e0       	ldi	r23, 0x00	; 0
    60f8:	45 e2       	ldi	r20, 0x25	; 37
    60fa:	50 e3       	ldi	r21, 0x30	; 48
    60fc:	c5 dc       	rcall	.-1654   	; 0x5a88 <Endpoint_Read_Stream_LE>
    60fe:	88 23       	and	r24, r24
    6100:	09 f0       	breq	.+2      	; 0x6104 <MS_Device_USBTask+0xae>
    6102:	5f c0       	rjmp	.+190    	; 0x61c2 <MS_Device_USBTask+0x16c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    6104:	80 91 e8 00 	lds	r24, 0x00E8
    6108:	8b 77       	andi	r24, 0x7B	; 123
    610a:	80 93 e8 00 	sts	0x00E8, r24

	if (Endpoint_IsReadWriteAllowed())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    610e:	8e 89       	ldd	r24, Y+22	; 0x16
    6110:	87 ff       	sbrs	r24, 7
    6112:	03 c0       	rjmp	.+6      	; 0x611a <MS_Device_USBTask+0xc4>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    6114:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    6116:	80 93 e9 00 	sts	0x00E9, r24

			MSInterfaceInfo->State.CommandStatus.Status = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo) ?
    611a:	ce 01       	movw	r24, r28
    611c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <CALLBACK_MS_Device_SCSICommandReceived>
    6120:	91 e0       	ldi	r25, 0x01	; 1
    6122:	98 27       	eor	r25, r24
    6124:	9d ab       	std	Y+53, r25	; 0x35
			                                               MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
			MSInterfaceInfo->State.CommandStatus.Signature           = MS_CSW_SIGNATURE;
    6126:	25 e5       	ldi	r18, 0x55	; 85
    6128:	33 e5       	ldi	r19, 0x53	; 83
    612a:	42 e4       	ldi	r20, 0x42	; 66
    612c:	53 e5       	ldi	r21, 0x53	; 83
    612e:	29 a7       	std	Y+41, r18	; 0x29
    6130:	3a a7       	std	Y+42, r19	; 0x2a
    6132:	4b a7       	std	Y+43, r20	; 0x2b
    6134:	5c a7       	std	Y+44, r21	; 0x2c
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    6136:	2e 85       	ldd	r18, Y+14	; 0x0e
    6138:	3f 85       	ldd	r19, Y+15	; 0x0f
    613a:	48 89       	ldd	r20, Y+16	; 0x10
    613c:	59 89       	ldd	r21, Y+17	; 0x11
    613e:	2d a7       	std	Y+45, r18	; 0x2d
    6140:	3e a7       	std	Y+46, r19	; 0x2e
    6142:	4f a7       	std	Y+47, r20	; 0x2f
    6144:	58 ab       	std	Y+48, r21	; 0x30
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    6146:	2a 89       	ldd	r18, Y+18	; 0x12
    6148:	3b 89       	ldd	r19, Y+19	; 0x13
    614a:	4c 89       	ldd	r20, Y+20	; 0x14
    614c:	5d 89       	ldd	r21, Y+21	; 0x15
    614e:	29 ab       	std	Y+49, r18	; 0x31
    6150:	3a ab       	std	Y+50, r19	; 0x32
    6152:	4b ab       	std	Y+51, r20	; 0x33
    6154:	5c ab       	std	Y+52, r21	; 0x34

			if ((MSInterfaceInfo->State.CommandStatus.Status == MS_SCSI_COMMAND_Fail) &&
    6156:	91 30       	cpi	r25, 0x01	; 1
    6158:	51 f4       	brne	.+20     	; 0x616e <MS_Device_USBTask+0x118>
    615a:	21 15       	cp	r18, r1
    615c:	31 05       	cpc	r19, r1
    615e:	41 05       	cpc	r20, r1
    6160:	51 05       	cpc	r21, r1
    6162:	29 f0       	breq	.+10     	; 0x616e <MS_Device_USBTask+0x118>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    6164:	80 91 eb 00 	lds	r24, 0x00EB
    6168:	80 62       	ori	r24, 0x20	; 32
    616a:	80 93 eb 00 	sts	0x00EB, r24
	return true;
}

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    616e:	8d 81       	ldd	r24, Y+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    6170:	80 93 e9 00 	sts	0x00E9, r24
    6174:	03 c0       	rjmp	.+6      	; 0x617c <MS_Device_USBTask+0x126>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    6176:	8e a9       	ldd	r24, Y+54	; 0x36
    6178:	88 23       	and	r24, r24
    617a:	19 f5       	brne	.+70     	; 0x61c2 <MS_Device_USBTask+0x16c>
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    617c:	80 91 eb 00 	lds	r24, 0x00EB

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpointNumber);

	while (Endpoint_IsStalled())
    6180:	85 fd       	sbrc	r24, 5
    6182:	f9 cf       	rjmp	.-14     	; 0x6176 <MS_Device_USBTask+0x120>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
    6184:	89 81       	ldd	r24, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    6186:	80 93 e9 00 	sts	0x00E9, r24
    618a:	03 c0       	rjmp	.+6      	; 0x6192 <MS_Device_USBTask+0x13c>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    618c:	8e a9       	ldd	r24, Y+54	; 0x36
    618e:	88 23       	and	r24, r24
    6190:	c1 f4       	brne	.+48     	; 0x61c2 <MS_Device_USBTask+0x16c>
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    6192:	80 91 eb 00 	lds	r24, 0x00EB
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);

	while (Endpoint_IsStalled())
    6196:	85 fd       	sbrc	r24, 5
    6198:	f9 cf       	rjmp	.-14     	; 0x618c <MS_Device_USBTask+0x136>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	CallbackIsResetSource = &MSInterfaceInfo->State.IsMassStoreReset;
    619a:	e6 96       	adiw	r28, 0x36	; 54
    619c:	d0 93 ab 03 	sts	0x03AB, r29
    61a0:	c0 93 aa 03 	sts	0x03AA, r28
    61a4:	e6 97       	sbiw	r28, 0x36	; 54
	if (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus, sizeof(MS_CommandStatusWrapper_t),
    61a6:	ce 01       	movw	r24, r28
    61a8:	89 96       	adiw	r24, 0x29	; 41
    61aa:	6d e0       	ldi	r22, 0x0D	; 13
    61ac:	70 e0       	ldi	r23, 0x00	; 0
    61ae:	45 e2       	ldi	r20, 0x25	; 37
    61b0:	50 e3       	ldi	r21, 0x30	; 48
    61b2:	e0 dc       	rcall	.-1600   	; 0x5b74 <Endpoint_Write_Stream_LE>
    61b4:	88 23       	and	r24, r24
    61b6:	29 f4       	brne	.+10     	; 0x61c2 <MS_Device_USBTask+0x16c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    61b8:	80 91 e8 00 	lds	r24, 0x00E8
    61bc:	8e 77       	andi	r24, 0x7E	; 126
    61be:	80 93 e8 00 	sts	0x00E8, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    61c2:	8e a9       	ldd	r24, Y+54	; 0x36
    61c4:	88 23       	and	r24, r24
    61c6:	91 f1       	breq	.+100    	; 0x622c <MS_Device_USBTask+0x1d6>
	{
		Endpoint_ResetFIFO(MSInterfaceInfo->Config.DataOUTEndpointNumber);
    61c8:	4d 81       	ldd	r20, Y+5	; 0x05
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    61ca:	21 e0       	ldi	r18, 0x01	; 1
    61cc:	30 e0       	ldi	r19, 0x00	; 0
    61ce:	c9 01       	movw	r24, r18
    61d0:	04 2e       	mov	r0, r20
    61d2:	02 c0       	rjmp	.+4      	; 0x61d8 <MS_Device_USBTask+0x182>
    61d4:	88 0f       	add	r24, r24
    61d6:	99 1f       	adc	r25, r25
    61d8:	0a 94       	dec	r0
    61da:	e2 f7       	brpl	.-8      	; 0x61d4 <MS_Device_USBTask+0x17e>
    61dc:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    61e0:	10 92 ea 00 	sts	0x00EA, r1
		Endpoint_ResetFIFO(MSInterfaceInfo->Config.DataINEndpointNumber);
    61e4:	99 81       	ldd	r25, Y+1	; 0x01
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    61e6:	09 2e       	mov	r0, r25
    61e8:	02 c0       	rjmp	.+4      	; 0x61ee <MS_Device_USBTask+0x198>
    61ea:	22 0f       	add	r18, r18
    61ec:	33 1f       	adc	r19, r19
    61ee:	0a 94       	dec	r0
    61f0:	e2 f7       	brpl	.-8      	; 0x61ea <MS_Device_USBTask+0x194>
    61f2:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    61f6:	10 92 ea 00 	sts	0x00EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    61fa:	40 93 e9 00 	sts	0x00E9, r20
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    61fe:	80 91 eb 00 	lds	r24, 0x00EB
    6202:	80 61       	ori	r24, 0x10	; 16
    6204:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    6208:	80 91 eb 00 	lds	r24, 0x00EB
    620c:	88 60       	ori	r24, 0x08	; 8
    620e:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    6212:	90 93 e9 00 	sts	0x00E9, r25
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    6216:	80 91 eb 00 	lds	r24, 0x00EB
    621a:	80 61       	ori	r24, 0x10	; 16
    621c:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    6220:	80 91 eb 00 	lds	r24, 0x00EB
    6224:	88 60       	ori	r24, 0x08	; 8
    6226:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpointNumber);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    622a:	1e aa       	std	Y+54, r1	; 0x36
	}
}
    622c:	df 91       	pop	r29
    622e:	cf 91       	pop	r28
    6230:	1f 91       	pop	r17
    6232:	0f 91       	pop	r16
    6234:	08 95       	ret

00006236 <MS_Device_ConfigureEndpoints>:
			break;
	}
}

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    6236:	1f 93       	push	r17
    6238:	cf 93       	push	r28
    623a:	df 93       	push	r29
    623c:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    623e:	0a 96       	adiw	r24, 0x0a	; 10
    6240:	fc 01       	movw	r30, r24
    6242:	8d e2       	ldi	r24, 0x2D	; 45
    6244:	df 01       	movw	r26, r30
    6246:	1d 92       	st	X+, r1
    6248:	8a 95       	dec	r24
    624a:	e9 f7       	brne	.-6      	; 0x6246 <MS_Device_ConfigureEndpoints+0x10>
    624c:	11 e0       	ldi	r17, 0x01	; 1
		uint16_t Size;
		uint8_t  Type;
		uint8_t  Direction;
		bool     DoubleBanked;

		if (EndpointNum == MSInterfaceInfo->Config.DataINEndpointNumber)
    624e:	89 81       	ldd	r24, Y+1	; 0x01
    6250:	18 17       	cp	r17, r24
    6252:	29 f4       	brne	.+10     	; 0x625e <MS_Device_ConfigureEndpoints+0x28>
		{
			Size         = MSInterfaceInfo->Config.DataINEndpointSize;
    6254:	ea 81       	ldd	r30, Y+2	; 0x02
    6256:	fb 81       	ldd	r31, Y+3	; 0x03
			Direction    = ENDPOINT_DIR_IN;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataINEndpointDoubleBank;
    6258:	8c 81       	ldd	r24, Y+4	; 0x04
    625a:	61 e0       	ldi	r22, 0x01	; 1
    625c:	07 c0       	rjmp	.+14     	; 0x626c <MS_Device_ConfigureEndpoints+0x36>
		}
		else if (EndpointNum == MSInterfaceInfo->Config.DataOUTEndpointNumber)
    625e:	8d 81       	ldd	r24, Y+5	; 0x05
    6260:	18 17       	cp	r17, r24
    6262:	e9 f4       	brne	.+58     	; 0x629e <MS_Device_ConfigureEndpoints+0x68>
		{
			Size         = MSInterfaceInfo->Config.DataOUTEndpointSize;
    6264:	ee 81       	ldd	r30, Y+6	; 0x06
    6266:	ff 81       	ldd	r31, Y+7	; 0x07
			Direction    = ENDPOINT_DIR_OUT;
			Type         = EP_TYPE_BULK;
			DoubleBanked = MSInterfaceInfo->Config.DataOUTEndpointDoubleBank;
    6268:	88 85       	ldd	r24, Y+8	; 0x08
    626a:	60 e0       	ldi	r22, 0x00	; 0
		else
		{
			continue;
		}

		if (!(Endpoint_ConfigureEndpoint(EndpointNum, Type, Direction, Size,
    626c:	88 23       	and	r24, r24
    626e:	11 f4       	brne	.+4      	; 0x6274 <MS_Device_ConfigureEndpoints+0x3e>
    6270:	40 e0       	ldi	r20, 0x00	; 0
    6272:	01 c0       	rjmp	.+2      	; 0x6276 <MS_Device_ConfigureEndpoints+0x40>
    6274:	44 e0       	ldi	r20, 0x04	; 4
    6276:	20 e0       	ldi	r18, 0x00	; 0
    6278:	88 e0       	ldi	r24, 0x08	; 8
    627a:	90 e0       	ldi	r25, 0x00	; 0
    627c:	03 c0       	rjmp	.+6      	; 0x6284 <MS_Device_ConfigureEndpoints+0x4e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    627e:	2f 5f       	subi	r18, 0xFF	; 255
					CheckBytes <<= 1;
    6280:	88 0f       	add	r24, r24
    6282:	99 1f       	adc	r25, r25
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    6284:	8e 17       	cp	r24, r30
    6286:	9f 07       	cpc	r25, r31
    6288:	d0 f3       	brcs	.-12     	; 0x627e <MS_Device_ConfigureEndpoints+0x48>
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
    628a:	60 68       	ori	r22, 0x80	; 128
    628c:	42 60       	ori	r20, 0x02	; 2
    628e:	22 95       	swap	r18
    6290:	20 7f       	andi	r18, 0xF0	; 240
    6292:	42 2b       	or	r20, r18
    6294:	81 2f       	mov	r24, r17
    6296:	0e 94 08 29 	call	0x5210	; 0x5210 <Endpoint_ConfigureEndpoint_Prv>
    629a:	88 23       	and	r24, r24
    629c:	21 f0       	breq	.+8      	; 0x62a6 <MS_Device_ConfigureEndpoints+0x70>

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));

	for (uint8_t EndpointNum = 1; EndpointNum < ENDPOINT_TOTAL_ENDPOINTS; EndpointNum++)
    629e:	1f 5f       	subi	r17, 0xFF	; 255
    62a0:	17 30       	cpi	r17, 0x07	; 7
    62a2:	a9 f6       	brne	.-86     	; 0x624e <MS_Device_ConfigureEndpoints+0x18>
    62a4:	81 e0       	ldi	r24, 0x01	; 1
			return false;
		}
	}

	return true;
}
    62a6:	df 91       	pop	r29
    62a8:	cf 91       	pop	r28
    62aa:	1f 91       	pop	r17
    62ac:	08 95       	ret

000062ae <MS_Device_ProcessControlRequest>:
#include "MassStorage.h"

static volatile bool* CallbackIsResetSource;

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    62ae:	cf 93       	push	r28
    62b0:	df 93       	push	r29
    62b2:	ec 01       	movw	r28, r24
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    62b4:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    62b8:	83 ff       	sbrs	r24, 3
    62ba:	31 c0       	rjmp	.+98     	; 0x631e <MS_Device_ProcessControlRequest+0x70>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    62bc:	88 81       	ld	r24, Y
    62be:	90 e0       	ldi	r25, 0x00	; 0
    62c0:	20 91 7b 06 	lds	r18, 0x067B
    62c4:	30 91 7c 06 	lds	r19, 0x067C
    62c8:	28 17       	cp	r18, r24
    62ca:	39 07       	cpc	r19, r25
    62cc:	41 f5       	brne	.+80     	; 0x631e <MS_Device_ProcessControlRequest+0x70>
	  return;

	switch (USB_ControlRequest.bRequest)
    62ce:	80 91 78 06 	lds	r24, 0x0678
    62d2:	8e 3f       	cpi	r24, 0xFE	; 254
    62d4:	81 f0       	breq	.+32     	; 0x62f6 <MS_Device_ProcessControlRequest+0x48>
    62d6:	8f 3f       	cpi	r24, 0xFF	; 255
    62d8:	11 f5       	brne	.+68     	; 0x631e <MS_Device_ProcessControlRequest+0x70>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    62da:	80 91 77 06 	lds	r24, 0x0677
    62de:	81 32       	cpi	r24, 0x21	; 33
    62e0:	f1 f4       	brne	.+60     	; 0x631e <MS_Device_ProcessControlRequest+0x70>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    62e2:	80 91 e8 00 	lds	r24, 0x00E8
    62e6:	87 7f       	andi	r24, 0xF7	; 247
    62e8:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    62ec:	0e 94 1b 29 	call	0x5236	; 0x5236 <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    62f0:	81 e0       	ldi	r24, 0x01	; 1
    62f2:	8e ab       	std	Y+54, r24	; 0x36
    62f4:	14 c0       	rjmp	.+40     	; 0x631e <MS_Device_ProcessControlRequest+0x70>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    62f6:	80 91 77 06 	lds	r24, 0x0677
    62fa:	81 3a       	cpi	r24, 0xA1	; 161
    62fc:	81 f4       	brne	.+32     	; 0x631e <MS_Device_ProcessControlRequest+0x70>
    62fe:	80 91 e8 00 	lds	r24, 0x00E8
    6302:	87 7f       	andi	r24, 0xF7	; 247
    6304:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Byte(MSInterfaceInfo->Config.TotalLUNs - 1);
    6308:	89 85       	ldd	r24, Y+9	; 0x09
    630a:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    630c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    6310:	80 91 e8 00 	lds	r24, 0x00E8
    6314:	8e 77       	andi	r24, 0x7E	; 126
    6316:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    631a:	0e 94 1b 29 	call	0x5236	; 0x5236 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    631e:	df 91       	pop	r29
    6320:	cf 91       	pop	r28
    6322:	08 95       	ret

00006324 <TWI_StartTransmission>:

#include "TWI.h"

bool TWI_StartTransmission(const uint8_t SlaveAddress,
                           const uint8_t TimeoutMS)
{
    6324:	78 2f       	mov	r23, r24
	for (;;)
	{
		bool     BusCaptured = false;
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    6326:	84 ea       	ldi	r24, 0xA4	; 164
    6328:	80 93 bc 00 	sts	0x00BC, r24

		TimeoutRemaining = (TimeoutMS * 100);
    632c:	84 e6       	ldi	r24, 0x64	; 100
    632e:	68 9f       	mul	r22, r24
    6330:	a0 01       	movw	r20, r0
    6332:	11 24       	eor	r1, r1
    6334:	9a 01       	movw	r18, r20
    6336:	60 e0       	ldi	r22, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    6338:	fa e1       	ldi	r31, 0x1A	; 26
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
						break;
					case TW_MT_ARB_LOST:
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    633a:	e4 ea       	ldi	r30, 0xA4	; 164
    633c:	1b c0       	rjmp	.+54     	; 0x6374 <TWI_StartTransmission+0x50>
		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining-- && !(BusCaptured))
		{
			if (TWCR & (1 << TWINT))
    633e:	80 91 bc 00 	lds	r24, 0x00BC
    6342:	87 ff       	sbrs	r24, 7
    6344:	12 c0       	rjmp	.+36     	; 0x636a <TWI_StartTransmission+0x46>
			{
				switch (TWSR & TW_STATUS_MASK)
    6346:	80 91 b9 00 	lds	r24, 0x00B9
    634a:	90 e0       	ldi	r25, 0x00	; 0
    634c:	88 7f       	andi	r24, 0xF8	; 248
    634e:	90 70       	andi	r25, 0x00	; 0
    6350:	80 31       	cpi	r24, 0x10	; 16
    6352:	91 05       	cpc	r25, r1
    6354:	49 f0       	breq	.+18     	; 0x6368 <TWI_StartTransmission+0x44>
    6356:	88 33       	cpi	r24, 0x38	; 56
    6358:	91 05       	cpc	r25, r1
    635a:	19 f0       	breq	.+6      	; 0x6362 <TWI_StartTransmission+0x3e>
    635c:	08 97       	sbiw	r24, 0x08	; 8
    635e:	91 f4       	brne	.+36     	; 0x6384 <TWI_StartTransmission+0x60>
    6360:	03 c0       	rjmp	.+6      	; 0x6368 <TWI_StartTransmission+0x44>
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
						break;
					case TW_MT_ARB_LOST:
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    6362:	e0 93 bc 00 	sts	0x00BC, r30
    6366:	04 c0       	rjmp	.+8      	; 0x6370 <TWI_StartTransmission+0x4c>
						continue;
					default:
						TWCR = (1 << TWEN);
						return false;
    6368:	61 e0       	ldi	r22, 0x01	; 1
    636a:	8f 2f       	mov	r24, r31
    636c:	8a 95       	dec	r24
    636e:	f1 f7       	brne	.-4      	; 0x636c <TWI_StartTransmission+0x48>
    6370:	21 50       	subi	r18, 0x01	; 1
    6372:	30 40       	sbci	r19, 0x00	; 0
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining-- && !(BusCaptured))
    6374:	21 15       	cp	r18, r1
    6376:	31 05       	cpc	r19, r1
    6378:	19 f0       	breq	.+6      	; 0x6380 <TWI_StartTransmission+0x5c>
    637a:	66 23       	and	r22, r22
    637c:	01 f3       	breq	.-64     	; 0x633e <TWI_StartTransmission+0x1a>
    637e:	06 c0       	rjmp	.+12     	; 0x638c <TWI_StartTransmission+0x68>
			}

			_delay_us(10);
		}

		if (!(BusCaptured))
    6380:	66 23       	and	r22, r22
    6382:	21 f4       	brne	.+8      	; 0x638c <TWI_StartTransmission+0x68>
		{
			TWCR = (1 << TWEN);
    6384:	84 e0       	ldi	r24, 0x04	; 4
    6386:	80 93 bc 00 	sts	0x00BC, r24
    638a:	16 c0       	rjmp	.+44     	; 0x63b8 <TWI_StartTransmission+0x94>
			return false;
		}

		TWDR = SlaveAddress;
    638c:	70 93 bb 00 	sts	0x00BB, r23
		TWCR = ((1 << TWINT) | (1 << TWEN));
    6390:	84 e8       	ldi	r24, 0x84	; 132
    6392:	80 93 bc 00 	sts	0x00BC, r24
    6396:	9a e1       	ldi	r25, 0x1A	; 26
    6398:	07 c0       	rjmp	.+14     	; 0x63a8 <TWI_StartTransmission+0x84>

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining--)
		{
			if (TWCR & (1 << TWINT))
    639a:	80 91 bc 00 	lds	r24, 0x00BC
    639e:	87 fd       	sbrc	r24, 7
    63a0:	09 c0       	rjmp	.+18     	; 0x63b4 <TWI_StartTransmission+0x90>
    63a2:	89 2f       	mov	r24, r25
    63a4:	8a 95       	dec	r24
    63a6:	f1 f7       	brne	.-4      	; 0x63a4 <TWI_StartTransmission+0x80>

		TWDR = SlaveAddress;
		TWCR = ((1 << TWINT) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining--)
    63a8:	41 50       	subi	r20, 0x01	; 1
    63aa:	50 40       	sbci	r21, 0x00	; 0
    63ac:	8f ef       	ldi	r24, 0xFF	; 255
    63ae:	4f 3f       	cpi	r20, 0xFF	; 255
    63b0:	58 07       	cpc	r21, r24
    63b2:	99 f7       	brne	.-26     	; 0x639a <TWI_StartTransmission+0x76>
			  break;

			_delay_us(10);
		}

		if (!(TimeoutRemaining))
    63b4:	45 2b       	or	r20, r21
    63b6:	11 f4       	brne	.+4      	; 0x63bc <TWI_StartTransmission+0x98>
    63b8:	80 e0       	ldi	r24, 0x00	; 0
    63ba:	08 95       	ret
		  return false;

		switch (TWSR & TW_STATUS_MASK)
    63bc:	80 91 b9 00 	lds	r24, 0x00B9
    63c0:	90 e0       	ldi	r25, 0x00	; 0
    63c2:	88 7f       	andi	r24, 0xF8	; 248
    63c4:	90 70       	andi	r25, 0x00	; 0
    63c6:	88 31       	cpi	r24, 0x18	; 24
    63c8:	91 05       	cpc	r25, r1
    63ca:	19 f0       	breq	.+6      	; 0x63d2 <TWI_StartTransmission+0xae>
    63cc:	80 34       	cpi	r24, 0x40	; 64
    63ce:	91 05       	cpc	r25, r1
    63d0:	11 f4       	brne	.+4      	; 0x63d6 <TWI_StartTransmission+0xb2>
    63d2:	81 e0       	ldi	r24, 0x01	; 1
    63d4:	08 95       	ret
		{
			case TW_MT_SLA_ACK:
			case TW_MR_SLA_ACK:
				return true;
			default:
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    63d6:	84 e9       	ldi	r24, 0x94	; 148
    63d8:	80 93 bc 00 	sts	0x00BC, r24
    63dc:	80 e0       	ldi	r24, 0x00	; 0
				return false;
		}
	}
}
    63de:	08 95       	ret

000063e0 <Serial_TxString>:

void Serial_TxString(const char* StringPtr)
{
    63e0:	fc 01       	movw	r30, r24
    63e2:	07 c0       	rjmp	.+14     	; 0x63f2 <Serial_TxString+0x12>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    63e4:	80 91 c8 00 	lds	r24, 0x00C8
    63e8:	85 ff       	sbrs	r24, 5
    63ea:	fc cf       	rjmp	.-8      	; 0x63e4 <Serial_TxString+0x4>
				UDR1 = DataByte;
    63ec:	90 93 ce 00 	sts	0x00CE, r25
	uint8_t CurrByte;

	while ((CurrByte = *StringPtr) != 0x00)
	{
		Serial_TxByte(CurrByte);
		StringPtr++;
    63f0:	31 96       	adiw	r30, 0x01	; 1

void Serial_TxString(const char* StringPtr)
{
	uint8_t CurrByte;

	while ((CurrByte = *StringPtr) != 0x00)
    63f2:	90 81       	ld	r25, Z
    63f4:	99 23       	and	r25, r25
    63f6:	b1 f7       	brne	.-20     	; 0x63e4 <Serial_TxString+0x4>
	{
		Serial_TxByte(CurrByte);
		StringPtr++;
	}
}
    63f8:	08 95       	ret

000063fa <__mulsi3>:
    63fa:	62 9f       	mul	r22, r18
    63fc:	d0 01       	movw	r26, r0
    63fe:	73 9f       	mul	r23, r19
    6400:	f0 01       	movw	r30, r0
    6402:	82 9f       	mul	r24, r18
    6404:	e0 0d       	add	r30, r0
    6406:	f1 1d       	adc	r31, r1
    6408:	64 9f       	mul	r22, r20
    640a:	e0 0d       	add	r30, r0
    640c:	f1 1d       	adc	r31, r1
    640e:	92 9f       	mul	r25, r18
    6410:	f0 0d       	add	r31, r0
    6412:	83 9f       	mul	r24, r19
    6414:	f0 0d       	add	r31, r0
    6416:	74 9f       	mul	r23, r20
    6418:	f0 0d       	add	r31, r0
    641a:	65 9f       	mul	r22, r21
    641c:	f0 0d       	add	r31, r0
    641e:	99 27       	eor	r25, r25
    6420:	72 9f       	mul	r23, r18
    6422:	b0 0d       	add	r27, r0
    6424:	e1 1d       	adc	r30, r1
    6426:	f9 1f       	adc	r31, r25
    6428:	63 9f       	mul	r22, r19
    642a:	b0 0d       	add	r27, r0
    642c:	e1 1d       	adc	r30, r1
    642e:	f9 1f       	adc	r31, r25
    6430:	bd 01       	movw	r22, r26
    6432:	cf 01       	movw	r24, r30
    6434:	11 24       	eor	r1, r1
    6436:	08 95       	ret

00006438 <__udivmodqi4>:
    6438:	99 1b       	sub	r25, r25
    643a:	79 e0       	ldi	r23, 0x09	; 9
    643c:	04 c0       	rjmp	.+8      	; 0x6446 <__udivmodqi4_ep>

0000643e <__udivmodqi4_loop>:
    643e:	99 1f       	adc	r25, r25
    6440:	96 17       	cp	r25, r22
    6442:	08 f0       	brcs	.+2      	; 0x6446 <__udivmodqi4_ep>
    6444:	96 1b       	sub	r25, r22

00006446 <__udivmodqi4_ep>:
    6446:	88 1f       	adc	r24, r24
    6448:	7a 95       	dec	r23
    644a:	c9 f7       	brne	.-14     	; 0x643e <__udivmodqi4_loop>
    644c:	80 95       	com	r24
    644e:	08 95       	ret

00006450 <__udivmodsi4>:
    6450:	a1 e2       	ldi	r26, 0x21	; 33
    6452:	1a 2e       	mov	r1, r26
    6454:	aa 1b       	sub	r26, r26
    6456:	bb 1b       	sub	r27, r27
    6458:	fd 01       	movw	r30, r26
    645a:	0d c0       	rjmp	.+26     	; 0x6476 <__udivmodsi4_ep>

0000645c <__udivmodsi4_loop>:
    645c:	aa 1f       	adc	r26, r26
    645e:	bb 1f       	adc	r27, r27
    6460:	ee 1f       	adc	r30, r30
    6462:	ff 1f       	adc	r31, r31
    6464:	a2 17       	cp	r26, r18
    6466:	b3 07       	cpc	r27, r19
    6468:	e4 07       	cpc	r30, r20
    646a:	f5 07       	cpc	r31, r21
    646c:	20 f0       	brcs	.+8      	; 0x6476 <__udivmodsi4_ep>
    646e:	a2 1b       	sub	r26, r18
    6470:	b3 0b       	sbc	r27, r19
    6472:	e4 0b       	sbc	r30, r20
    6474:	f5 0b       	sbc	r31, r21

00006476 <__udivmodsi4_ep>:
    6476:	66 1f       	adc	r22, r22
    6478:	77 1f       	adc	r23, r23
    647a:	88 1f       	adc	r24, r24
    647c:	99 1f       	adc	r25, r25
    647e:	1a 94       	dec	r1
    6480:	69 f7       	brne	.-38     	; 0x645c <__udivmodsi4_loop>
    6482:	60 95       	com	r22
    6484:	70 95       	com	r23
    6486:	80 95       	com	r24
    6488:	90 95       	com	r25
    648a:	9b 01       	movw	r18, r22
    648c:	ac 01       	movw	r20, r24
    648e:	bd 01       	movw	r22, r26
    6490:	cf 01       	movw	r24, r30
    6492:	08 95       	ret

00006494 <__divmodsi4>:
    6494:	97 fb       	bst	r25, 7
    6496:	09 2e       	mov	r0, r25
    6498:	05 26       	eor	r0, r21
    649a:	0e d0       	rcall	.+28     	; 0x64b8 <__divmodsi4_neg1>
    649c:	57 fd       	sbrc	r21, 7
    649e:	04 d0       	rcall	.+8      	; 0x64a8 <__divmodsi4_neg2>
    64a0:	d7 df       	rcall	.-82     	; 0x6450 <__udivmodsi4>
    64a2:	0a d0       	rcall	.+20     	; 0x64b8 <__divmodsi4_neg1>
    64a4:	00 1c       	adc	r0, r0
    64a6:	38 f4       	brcc	.+14     	; 0x64b6 <__divmodsi4_exit>

000064a8 <__divmodsi4_neg2>:
    64a8:	50 95       	com	r21
    64aa:	40 95       	com	r20
    64ac:	30 95       	com	r19
    64ae:	21 95       	neg	r18
    64b0:	3f 4f       	sbci	r19, 0xFF	; 255
    64b2:	4f 4f       	sbci	r20, 0xFF	; 255
    64b4:	5f 4f       	sbci	r21, 0xFF	; 255

000064b6 <__divmodsi4_exit>:
    64b6:	08 95       	ret

000064b8 <__divmodsi4_neg1>:
    64b8:	f6 f7       	brtc	.-4      	; 0x64b6 <__divmodsi4_exit>
    64ba:	90 95       	com	r25
    64bc:	80 95       	com	r24
    64be:	70 95       	com	r23
    64c0:	61 95       	neg	r22
    64c2:	7f 4f       	sbci	r23, 0xFF	; 255
    64c4:	8f 4f       	sbci	r24, 0xFF	; 255
    64c6:	9f 4f       	sbci	r25, 0xFF	; 255
    64c8:	08 95       	ret

000064ca <atoi>:
    64ca:	fc 01       	movw	r30, r24
    64cc:	88 27       	eor	r24, r24
    64ce:	99 27       	eor	r25, r25
    64d0:	e8 94       	clt
    64d2:	21 91       	ld	r18, Z+
    64d4:	20 32       	cpi	r18, 0x20	; 32
    64d6:	e9 f3       	breq	.-6      	; 0x64d2 <atoi+0x8>
    64d8:	29 30       	cpi	r18, 0x09	; 9
    64da:	10 f0       	brcs	.+4      	; 0x64e0 <atoi+0x16>
    64dc:	2e 30       	cpi	r18, 0x0E	; 14
    64de:	c8 f3       	brcs	.-14     	; 0x64d2 <atoi+0x8>
    64e0:	2b 32       	cpi	r18, 0x2B	; 43
    64e2:	39 f0       	breq	.+14     	; 0x64f2 <atoi+0x28>
    64e4:	2d 32       	cpi	r18, 0x2D	; 45
    64e6:	31 f4       	brne	.+12     	; 0x64f4 <atoi+0x2a>
    64e8:	68 94       	set
    64ea:	03 c0       	rjmp	.+6      	; 0x64f2 <atoi+0x28>
    64ec:	2f d0       	rcall	.+94     	; 0x654c <__mulhi_const_10>
    64ee:	82 0f       	add	r24, r18
    64f0:	91 1d       	adc	r25, r1
    64f2:	21 91       	ld	r18, Z+
    64f4:	20 53       	subi	r18, 0x30	; 48
    64f6:	2a 30       	cpi	r18, 0x0A	; 10
    64f8:	c8 f3       	brcs	.-14     	; 0x64ec <atoi+0x22>
    64fa:	1e f4       	brtc	.+6      	; 0x6502 <atoi+0x38>
    64fc:	90 95       	com	r25
    64fe:	81 95       	neg	r24
    6500:	9f 4f       	sbci	r25, 0xFF	; 255
    6502:	08 95       	ret

00006504 <memcmp>:
    6504:	fb 01       	movw	r30, r22
    6506:	dc 01       	movw	r26, r24
    6508:	04 c0       	rjmp	.+8      	; 0x6512 <memcmp+0xe>
    650a:	8d 91       	ld	r24, X+
    650c:	01 90       	ld	r0, Z+
    650e:	80 19       	sub	r24, r0
    6510:	21 f4       	brne	.+8      	; 0x651a <memcmp+0x16>
    6512:	41 50       	subi	r20, 0x01	; 1
    6514:	50 40       	sbci	r21, 0x00	; 0
    6516:	c8 f7       	brcc	.-14     	; 0x650a <memcmp+0x6>
    6518:	88 1b       	sub	r24, r24
    651a:	99 0b       	sbc	r25, r25
    651c:	08 95       	ret

0000651e <memcpy>:
    651e:	fb 01       	movw	r30, r22
    6520:	dc 01       	movw	r26, r24
    6522:	02 c0       	rjmp	.+4      	; 0x6528 <memcpy+0xa>
    6524:	01 90       	ld	r0, Z+
    6526:	0d 92       	st	X+, r0
    6528:	41 50       	subi	r20, 0x01	; 1
    652a:	50 40       	sbci	r21, 0x00	; 0
    652c:	d8 f7       	brcc	.-10     	; 0x6524 <memcpy+0x6>
    652e:	08 95       	ret

00006530 <memset>:
    6530:	dc 01       	movw	r26, r24
    6532:	01 c0       	rjmp	.+2      	; 0x6536 <memset+0x6>
    6534:	6d 93       	st	X+, r22
    6536:	41 50       	subi	r20, 0x01	; 1
    6538:	50 40       	sbci	r21, 0x00	; 0
    653a:	e0 f7       	brcc	.-8      	; 0x6534 <memset+0x4>
    653c:	08 95       	ret

0000653e <strcpy>:
    653e:	fb 01       	movw	r30, r22
    6540:	dc 01       	movw	r26, r24
    6542:	01 90       	ld	r0, Z+
    6544:	0d 92       	st	X+, r0
    6546:	00 20       	and	r0, r0
    6548:	e1 f7       	brne	.-8      	; 0x6542 <strcpy+0x4>
    654a:	08 95       	ret

0000654c <__mulhi_const_10>:
    654c:	7a e0       	ldi	r23, 0x0A	; 10
    654e:	97 9f       	mul	r25, r23
    6550:	90 2d       	mov	r25, r0
    6552:	87 9f       	mul	r24, r23
    6554:	80 2d       	mov	r24, r0
    6556:	91 0d       	add	r25, r1
    6558:	11 24       	eor	r1, r1
    655a:	08 95       	ret

0000655c <sprintf>:
    655c:	0f 93       	push	r16
    655e:	1f 93       	push	r17
    6560:	df 93       	push	r29
    6562:	cf 93       	push	r28
    6564:	cd b7       	in	r28, 0x3d	; 61
    6566:	de b7       	in	r29, 0x3e	; 62
    6568:	2e 97       	sbiw	r28, 0x0e	; 14
    656a:	0f b6       	in	r0, 0x3f	; 63
    656c:	f8 94       	cli
    656e:	de bf       	out	0x3e, r29	; 62
    6570:	0f be       	out	0x3f, r0	; 63
    6572:	cd bf       	out	0x3d, r28	; 61
    6574:	0d 89       	ldd	r16, Y+21	; 0x15
    6576:	1e 89       	ldd	r17, Y+22	; 0x16
    6578:	86 e0       	ldi	r24, 0x06	; 6
    657a:	8c 83       	std	Y+4, r24	; 0x04
    657c:	1a 83       	std	Y+2, r17	; 0x02
    657e:	09 83       	std	Y+1, r16	; 0x01
    6580:	8f ef       	ldi	r24, 0xFF	; 255
    6582:	9f e7       	ldi	r25, 0x7F	; 127
    6584:	9e 83       	std	Y+6, r25	; 0x06
    6586:	8d 83       	std	Y+5, r24	; 0x05
    6588:	9e 01       	movw	r18, r28
    658a:	27 5e       	subi	r18, 0xE7	; 231
    658c:	3f 4f       	sbci	r19, 0xFF	; 255
    658e:	ce 01       	movw	r24, r28
    6590:	01 96       	adiw	r24, 0x01	; 1
    6592:	6f 89       	ldd	r22, Y+23	; 0x17
    6594:	78 8d       	ldd	r23, Y+24	; 0x18
    6596:	a9 01       	movw	r20, r18
    6598:	11 d0       	rcall	.+34     	; 0x65bc <vfprintf>
    659a:	2f 81       	ldd	r18, Y+7	; 0x07
    659c:	38 85       	ldd	r19, Y+8	; 0x08
    659e:	02 0f       	add	r16, r18
    65a0:	13 1f       	adc	r17, r19
    65a2:	f8 01       	movw	r30, r16
    65a4:	10 82       	st	Z, r1
    65a6:	2e 96       	adiw	r28, 0x0e	; 14
    65a8:	0f b6       	in	r0, 0x3f	; 63
    65aa:	f8 94       	cli
    65ac:	de bf       	out	0x3e, r29	; 62
    65ae:	0f be       	out	0x3f, r0	; 63
    65b0:	cd bf       	out	0x3d, r28	; 61
    65b2:	cf 91       	pop	r28
    65b4:	df 91       	pop	r29
    65b6:	1f 91       	pop	r17
    65b8:	0f 91       	pop	r16
    65ba:	08 95       	ret

000065bc <vfprintf>:
    65bc:	2f 92       	push	r2
    65be:	3f 92       	push	r3
    65c0:	4f 92       	push	r4
    65c2:	5f 92       	push	r5
    65c4:	6f 92       	push	r6
    65c6:	7f 92       	push	r7
    65c8:	8f 92       	push	r8
    65ca:	9f 92       	push	r9
    65cc:	af 92       	push	r10
    65ce:	bf 92       	push	r11
    65d0:	cf 92       	push	r12
    65d2:	df 92       	push	r13
    65d4:	ef 92       	push	r14
    65d6:	ff 92       	push	r15
    65d8:	0f 93       	push	r16
    65da:	1f 93       	push	r17
    65dc:	df 93       	push	r29
    65de:	cf 93       	push	r28
    65e0:	cd b7       	in	r28, 0x3d	; 61
    65e2:	de b7       	in	r29, 0x3e	; 62
    65e4:	2b 97       	sbiw	r28, 0x0b	; 11
    65e6:	0f b6       	in	r0, 0x3f	; 63
    65e8:	f8 94       	cli
    65ea:	de bf       	out	0x3e, r29	; 62
    65ec:	0f be       	out	0x3f, r0	; 63
    65ee:	cd bf       	out	0x3d, r28	; 61
    65f0:	3c 01       	movw	r6, r24
    65f2:	2b 01       	movw	r4, r22
    65f4:	5a 01       	movw	r10, r20
    65f6:	fc 01       	movw	r30, r24
    65f8:	17 82       	std	Z+7, r1	; 0x07
    65fa:	16 82       	std	Z+6, r1	; 0x06
    65fc:	83 81       	ldd	r24, Z+3	; 0x03
    65fe:	81 fd       	sbrc	r24, 1
    6600:	03 c0       	rjmp	.+6      	; 0x6608 <vfprintf+0x4c>
    6602:	6f ef       	ldi	r22, 0xFF	; 255
    6604:	7f ef       	ldi	r23, 0xFF	; 255
    6606:	b9 c1       	rjmp	.+882    	; 0x697a <vfprintf+0x3be>
    6608:	9a e0       	ldi	r25, 0x0A	; 10
    660a:	89 2e       	mov	r8, r25
    660c:	1e 01       	movw	r2, r28
    660e:	08 94       	sec
    6610:	21 1c       	adc	r2, r1
    6612:	31 1c       	adc	r3, r1
    6614:	f3 01       	movw	r30, r6
    6616:	23 81       	ldd	r18, Z+3	; 0x03
    6618:	f2 01       	movw	r30, r4
    661a:	23 fd       	sbrc	r18, 3
    661c:	85 91       	lpm	r24, Z+
    661e:	23 ff       	sbrs	r18, 3
    6620:	81 91       	ld	r24, Z+
    6622:	2f 01       	movw	r4, r30
    6624:	88 23       	and	r24, r24
    6626:	09 f4       	brne	.+2      	; 0x662a <vfprintf+0x6e>
    6628:	a5 c1       	rjmp	.+842    	; 0x6974 <vfprintf+0x3b8>
    662a:	85 32       	cpi	r24, 0x25	; 37
    662c:	39 f4       	brne	.+14     	; 0x663c <vfprintf+0x80>
    662e:	23 fd       	sbrc	r18, 3
    6630:	85 91       	lpm	r24, Z+
    6632:	23 ff       	sbrs	r18, 3
    6634:	81 91       	ld	r24, Z+
    6636:	2f 01       	movw	r4, r30
    6638:	85 32       	cpi	r24, 0x25	; 37
    663a:	21 f4       	brne	.+8      	; 0x6644 <vfprintf+0x88>
    663c:	90 e0       	ldi	r25, 0x00	; 0
    663e:	b3 01       	movw	r22, r6
    6640:	0e d2       	rcall	.+1052   	; 0x6a5e <fputc>
    6642:	e8 cf       	rjmp	.-48     	; 0x6614 <vfprintf+0x58>
    6644:	98 2f       	mov	r25, r24
    6646:	ff 24       	eor	r15, r15
    6648:	ee 24       	eor	r14, r14
    664a:	99 24       	eor	r9, r9
    664c:	ff e1       	ldi	r31, 0x1F	; 31
    664e:	ff 15       	cp	r31, r15
    6650:	d0 f0       	brcs	.+52     	; 0x6686 <vfprintf+0xca>
    6652:	9b 32       	cpi	r25, 0x2B	; 43
    6654:	69 f0       	breq	.+26     	; 0x6670 <vfprintf+0xb4>
    6656:	9c 32       	cpi	r25, 0x2C	; 44
    6658:	28 f4       	brcc	.+10     	; 0x6664 <vfprintf+0xa8>
    665a:	90 32       	cpi	r25, 0x20	; 32
    665c:	59 f0       	breq	.+22     	; 0x6674 <vfprintf+0xb8>
    665e:	93 32       	cpi	r25, 0x23	; 35
    6660:	91 f4       	brne	.+36     	; 0x6686 <vfprintf+0xca>
    6662:	0e c0       	rjmp	.+28     	; 0x6680 <vfprintf+0xc4>
    6664:	9d 32       	cpi	r25, 0x2D	; 45
    6666:	49 f0       	breq	.+18     	; 0x667a <vfprintf+0xbe>
    6668:	90 33       	cpi	r25, 0x30	; 48
    666a:	69 f4       	brne	.+26     	; 0x6686 <vfprintf+0xca>
    666c:	41 e0       	ldi	r20, 0x01	; 1
    666e:	24 c0       	rjmp	.+72     	; 0x66b8 <vfprintf+0xfc>
    6670:	52 e0       	ldi	r21, 0x02	; 2
    6672:	f5 2a       	or	r15, r21
    6674:	84 e0       	ldi	r24, 0x04	; 4
    6676:	f8 2a       	or	r15, r24
    6678:	28 c0       	rjmp	.+80     	; 0x66ca <vfprintf+0x10e>
    667a:	98 e0       	ldi	r25, 0x08	; 8
    667c:	f9 2a       	or	r15, r25
    667e:	25 c0       	rjmp	.+74     	; 0x66ca <vfprintf+0x10e>
    6680:	e0 e1       	ldi	r30, 0x10	; 16
    6682:	fe 2a       	or	r15, r30
    6684:	22 c0       	rjmp	.+68     	; 0x66ca <vfprintf+0x10e>
    6686:	f7 fc       	sbrc	r15, 7
    6688:	29 c0       	rjmp	.+82     	; 0x66dc <vfprintf+0x120>
    668a:	89 2f       	mov	r24, r25
    668c:	80 53       	subi	r24, 0x30	; 48
    668e:	8a 30       	cpi	r24, 0x0A	; 10
    6690:	70 f4       	brcc	.+28     	; 0x66ae <vfprintf+0xf2>
    6692:	f6 fe       	sbrs	r15, 6
    6694:	05 c0       	rjmp	.+10     	; 0x66a0 <vfprintf+0xe4>
    6696:	98 9c       	mul	r9, r8
    6698:	90 2c       	mov	r9, r0
    669a:	11 24       	eor	r1, r1
    669c:	98 0e       	add	r9, r24
    669e:	15 c0       	rjmp	.+42     	; 0x66ca <vfprintf+0x10e>
    66a0:	e8 9c       	mul	r14, r8
    66a2:	e0 2c       	mov	r14, r0
    66a4:	11 24       	eor	r1, r1
    66a6:	e8 0e       	add	r14, r24
    66a8:	f0 e2       	ldi	r31, 0x20	; 32
    66aa:	ff 2a       	or	r15, r31
    66ac:	0e c0       	rjmp	.+28     	; 0x66ca <vfprintf+0x10e>
    66ae:	9e 32       	cpi	r25, 0x2E	; 46
    66b0:	29 f4       	brne	.+10     	; 0x66bc <vfprintf+0x100>
    66b2:	f6 fc       	sbrc	r15, 6
    66b4:	5f c1       	rjmp	.+702    	; 0x6974 <vfprintf+0x3b8>
    66b6:	40 e4       	ldi	r20, 0x40	; 64
    66b8:	f4 2a       	or	r15, r20
    66ba:	07 c0       	rjmp	.+14     	; 0x66ca <vfprintf+0x10e>
    66bc:	9c 36       	cpi	r25, 0x6C	; 108
    66be:	19 f4       	brne	.+6      	; 0x66c6 <vfprintf+0x10a>
    66c0:	50 e8       	ldi	r21, 0x80	; 128
    66c2:	f5 2a       	or	r15, r21
    66c4:	02 c0       	rjmp	.+4      	; 0x66ca <vfprintf+0x10e>
    66c6:	98 36       	cpi	r25, 0x68	; 104
    66c8:	49 f4       	brne	.+18     	; 0x66dc <vfprintf+0x120>
    66ca:	f2 01       	movw	r30, r4
    66cc:	23 fd       	sbrc	r18, 3
    66ce:	95 91       	lpm	r25, Z+
    66d0:	23 ff       	sbrs	r18, 3
    66d2:	91 91       	ld	r25, Z+
    66d4:	2f 01       	movw	r4, r30
    66d6:	99 23       	and	r25, r25
    66d8:	09 f0       	breq	.+2      	; 0x66dc <vfprintf+0x120>
    66da:	b8 cf       	rjmp	.-144    	; 0x664c <vfprintf+0x90>
    66dc:	89 2f       	mov	r24, r25
    66de:	85 54       	subi	r24, 0x45	; 69
    66e0:	83 30       	cpi	r24, 0x03	; 3
    66e2:	18 f0       	brcs	.+6      	; 0x66ea <vfprintf+0x12e>
    66e4:	80 52       	subi	r24, 0x20	; 32
    66e6:	83 30       	cpi	r24, 0x03	; 3
    66e8:	38 f4       	brcc	.+14     	; 0x66f8 <vfprintf+0x13c>
    66ea:	44 e0       	ldi	r20, 0x04	; 4
    66ec:	50 e0       	ldi	r21, 0x00	; 0
    66ee:	a4 0e       	add	r10, r20
    66f0:	b5 1e       	adc	r11, r21
    66f2:	5f e3       	ldi	r21, 0x3F	; 63
    66f4:	59 83       	std	Y+1, r21	; 0x01
    66f6:	0f c0       	rjmp	.+30     	; 0x6716 <vfprintf+0x15a>
    66f8:	93 36       	cpi	r25, 0x63	; 99
    66fa:	31 f0       	breq	.+12     	; 0x6708 <vfprintf+0x14c>
    66fc:	93 37       	cpi	r25, 0x73	; 115
    66fe:	79 f0       	breq	.+30     	; 0x671e <vfprintf+0x162>
    6700:	93 35       	cpi	r25, 0x53	; 83
    6702:	09 f0       	breq	.+2      	; 0x6706 <vfprintf+0x14a>
    6704:	52 c0       	rjmp	.+164    	; 0x67aa <vfprintf+0x1ee>
    6706:	1f c0       	rjmp	.+62     	; 0x6746 <vfprintf+0x18a>
    6708:	f5 01       	movw	r30, r10
    670a:	80 81       	ld	r24, Z
    670c:	89 83       	std	Y+1, r24	; 0x01
    670e:	42 e0       	ldi	r20, 0x02	; 2
    6710:	50 e0       	ldi	r21, 0x00	; 0
    6712:	a4 0e       	add	r10, r20
    6714:	b5 1e       	adc	r11, r21
    6716:	61 01       	movw	r12, r2
    6718:	01 e0       	ldi	r16, 0x01	; 1
    671a:	10 e0       	ldi	r17, 0x00	; 0
    671c:	11 c0       	rjmp	.+34     	; 0x6740 <vfprintf+0x184>
    671e:	f5 01       	movw	r30, r10
    6720:	c0 80       	ld	r12, Z
    6722:	d1 80       	ldd	r13, Z+1	; 0x01
    6724:	f6 fc       	sbrc	r15, 6
    6726:	03 c0       	rjmp	.+6      	; 0x672e <vfprintf+0x172>
    6728:	6f ef       	ldi	r22, 0xFF	; 255
    672a:	7f ef       	ldi	r23, 0xFF	; 255
    672c:	02 c0       	rjmp	.+4      	; 0x6732 <vfprintf+0x176>
    672e:	69 2d       	mov	r22, r9
    6730:	70 e0       	ldi	r23, 0x00	; 0
    6732:	42 e0       	ldi	r20, 0x02	; 2
    6734:	50 e0       	ldi	r21, 0x00	; 0
    6736:	a4 0e       	add	r10, r20
    6738:	b5 1e       	adc	r11, r21
    673a:	c6 01       	movw	r24, r12
    673c:	85 d1       	rcall	.+778    	; 0x6a48 <strnlen>
    673e:	8c 01       	movw	r16, r24
    6740:	5f e7       	ldi	r21, 0x7F	; 127
    6742:	f5 22       	and	r15, r21
    6744:	13 c0       	rjmp	.+38     	; 0x676c <vfprintf+0x1b0>
    6746:	f5 01       	movw	r30, r10
    6748:	c0 80       	ld	r12, Z
    674a:	d1 80       	ldd	r13, Z+1	; 0x01
    674c:	f6 fc       	sbrc	r15, 6
    674e:	03 c0       	rjmp	.+6      	; 0x6756 <vfprintf+0x19a>
    6750:	6f ef       	ldi	r22, 0xFF	; 255
    6752:	7f ef       	ldi	r23, 0xFF	; 255
    6754:	02 c0       	rjmp	.+4      	; 0x675a <vfprintf+0x19e>
    6756:	69 2d       	mov	r22, r9
    6758:	70 e0       	ldi	r23, 0x00	; 0
    675a:	42 e0       	ldi	r20, 0x02	; 2
    675c:	50 e0       	ldi	r21, 0x00	; 0
    675e:	a4 0e       	add	r10, r20
    6760:	b5 1e       	adc	r11, r21
    6762:	c6 01       	movw	r24, r12
    6764:	66 d1       	rcall	.+716    	; 0x6a32 <strnlen_P>
    6766:	8c 01       	movw	r16, r24
    6768:	50 e8       	ldi	r21, 0x80	; 128
    676a:	f5 2a       	or	r15, r21
    676c:	f3 fe       	sbrs	r15, 3
    676e:	06 c0       	rjmp	.+12     	; 0x677c <vfprintf+0x1c0>
    6770:	18 c0       	rjmp	.+48     	; 0x67a2 <vfprintf+0x1e6>
    6772:	80 e2       	ldi	r24, 0x20	; 32
    6774:	90 e0       	ldi	r25, 0x00	; 0
    6776:	b3 01       	movw	r22, r6
    6778:	72 d1       	rcall	.+740    	; 0x6a5e <fputc>
    677a:	ea 94       	dec	r14
    677c:	8e 2d       	mov	r24, r14
    677e:	90 e0       	ldi	r25, 0x00	; 0
    6780:	08 17       	cp	r16, r24
    6782:	19 07       	cpc	r17, r25
    6784:	b0 f3       	brcs	.-20     	; 0x6772 <vfprintf+0x1b6>
    6786:	0d c0       	rjmp	.+26     	; 0x67a2 <vfprintf+0x1e6>
    6788:	f6 01       	movw	r30, r12
    678a:	f7 fc       	sbrc	r15, 7
    678c:	85 91       	lpm	r24, Z+
    678e:	f7 fe       	sbrs	r15, 7
    6790:	81 91       	ld	r24, Z+
    6792:	6f 01       	movw	r12, r30
    6794:	90 e0       	ldi	r25, 0x00	; 0
    6796:	b3 01       	movw	r22, r6
    6798:	62 d1       	rcall	.+708    	; 0x6a5e <fputc>
    679a:	e1 10       	cpse	r14, r1
    679c:	ea 94       	dec	r14
    679e:	01 50       	subi	r16, 0x01	; 1
    67a0:	10 40       	sbci	r17, 0x00	; 0
    67a2:	01 15       	cp	r16, r1
    67a4:	11 05       	cpc	r17, r1
    67a6:	81 f7       	brne	.-32     	; 0x6788 <vfprintf+0x1cc>
    67a8:	e2 c0       	rjmp	.+452    	; 0x696e <vfprintf+0x3b2>
    67aa:	94 36       	cpi	r25, 0x64	; 100
    67ac:	11 f0       	breq	.+4      	; 0x67b2 <vfprintf+0x1f6>
    67ae:	99 36       	cpi	r25, 0x69	; 105
    67b0:	61 f5       	brne	.+88     	; 0x680a <vfprintf+0x24e>
    67b2:	f7 fe       	sbrs	r15, 7
    67b4:	08 c0       	rjmp	.+16     	; 0x67c6 <vfprintf+0x20a>
    67b6:	f5 01       	movw	r30, r10
    67b8:	20 81       	ld	r18, Z
    67ba:	31 81       	ldd	r19, Z+1	; 0x01
    67bc:	42 81       	ldd	r20, Z+2	; 0x02
    67be:	53 81       	ldd	r21, Z+3	; 0x03
    67c0:	84 e0       	ldi	r24, 0x04	; 4
    67c2:	90 e0       	ldi	r25, 0x00	; 0
    67c4:	0a c0       	rjmp	.+20     	; 0x67da <vfprintf+0x21e>
    67c6:	f5 01       	movw	r30, r10
    67c8:	80 81       	ld	r24, Z
    67ca:	91 81       	ldd	r25, Z+1	; 0x01
    67cc:	9c 01       	movw	r18, r24
    67ce:	44 27       	eor	r20, r20
    67d0:	37 fd       	sbrc	r19, 7
    67d2:	40 95       	com	r20
    67d4:	54 2f       	mov	r21, r20
    67d6:	82 e0       	ldi	r24, 0x02	; 2
    67d8:	90 e0       	ldi	r25, 0x00	; 0
    67da:	a8 0e       	add	r10, r24
    67dc:	b9 1e       	adc	r11, r25
    67de:	9f e6       	ldi	r25, 0x6F	; 111
    67e0:	f9 22       	and	r15, r25
    67e2:	57 ff       	sbrs	r21, 7
    67e4:	09 c0       	rjmp	.+18     	; 0x67f8 <vfprintf+0x23c>
    67e6:	50 95       	com	r21
    67e8:	40 95       	com	r20
    67ea:	30 95       	com	r19
    67ec:	21 95       	neg	r18
    67ee:	3f 4f       	sbci	r19, 0xFF	; 255
    67f0:	4f 4f       	sbci	r20, 0xFF	; 255
    67f2:	5f 4f       	sbci	r21, 0xFF	; 255
    67f4:	e0 e8       	ldi	r30, 0x80	; 128
    67f6:	fe 2a       	or	r15, r30
    67f8:	ca 01       	movw	r24, r20
    67fa:	b9 01       	movw	r22, r18
    67fc:	a1 01       	movw	r20, r2
    67fe:	2a e0       	ldi	r18, 0x0A	; 10
    6800:	30 e0       	ldi	r19, 0x00	; 0
    6802:	59 d1       	rcall	.+690    	; 0x6ab6 <__ultoa_invert>
    6804:	d8 2e       	mov	r13, r24
    6806:	d2 18       	sub	r13, r2
    6808:	3f c0       	rjmp	.+126    	; 0x6888 <vfprintf+0x2cc>
    680a:	95 37       	cpi	r25, 0x75	; 117
    680c:	29 f4       	brne	.+10     	; 0x6818 <vfprintf+0x25c>
    680e:	1f 2d       	mov	r17, r15
    6810:	1f 7e       	andi	r17, 0xEF	; 239
    6812:	2a e0       	ldi	r18, 0x0A	; 10
    6814:	30 e0       	ldi	r19, 0x00	; 0
    6816:	1d c0       	rjmp	.+58     	; 0x6852 <vfprintf+0x296>
    6818:	1f 2d       	mov	r17, r15
    681a:	19 7f       	andi	r17, 0xF9	; 249
    681c:	9f 36       	cpi	r25, 0x6F	; 111
    681e:	61 f0       	breq	.+24     	; 0x6838 <vfprintf+0x27c>
    6820:	90 37       	cpi	r25, 0x70	; 112
    6822:	20 f4       	brcc	.+8      	; 0x682c <vfprintf+0x270>
    6824:	98 35       	cpi	r25, 0x58	; 88
    6826:	09 f0       	breq	.+2      	; 0x682a <vfprintf+0x26e>
    6828:	a5 c0       	rjmp	.+330    	; 0x6974 <vfprintf+0x3b8>
    682a:	0f c0       	rjmp	.+30     	; 0x684a <vfprintf+0x28e>
    682c:	90 37       	cpi	r25, 0x70	; 112
    682e:	39 f0       	breq	.+14     	; 0x683e <vfprintf+0x282>
    6830:	98 37       	cpi	r25, 0x78	; 120
    6832:	09 f0       	breq	.+2      	; 0x6836 <vfprintf+0x27a>
    6834:	9f c0       	rjmp	.+318    	; 0x6974 <vfprintf+0x3b8>
    6836:	04 c0       	rjmp	.+8      	; 0x6840 <vfprintf+0x284>
    6838:	28 e0       	ldi	r18, 0x08	; 8
    683a:	30 e0       	ldi	r19, 0x00	; 0
    683c:	0a c0       	rjmp	.+20     	; 0x6852 <vfprintf+0x296>
    683e:	10 61       	ori	r17, 0x10	; 16
    6840:	14 fd       	sbrc	r17, 4
    6842:	14 60       	ori	r17, 0x04	; 4
    6844:	20 e1       	ldi	r18, 0x10	; 16
    6846:	30 e0       	ldi	r19, 0x00	; 0
    6848:	04 c0       	rjmp	.+8      	; 0x6852 <vfprintf+0x296>
    684a:	14 fd       	sbrc	r17, 4
    684c:	16 60       	ori	r17, 0x06	; 6
    684e:	20 e1       	ldi	r18, 0x10	; 16
    6850:	32 e0       	ldi	r19, 0x02	; 2
    6852:	17 ff       	sbrs	r17, 7
    6854:	08 c0       	rjmp	.+16     	; 0x6866 <vfprintf+0x2aa>
    6856:	f5 01       	movw	r30, r10
    6858:	60 81       	ld	r22, Z
    685a:	71 81       	ldd	r23, Z+1	; 0x01
    685c:	82 81       	ldd	r24, Z+2	; 0x02
    685e:	93 81       	ldd	r25, Z+3	; 0x03
    6860:	44 e0       	ldi	r20, 0x04	; 4
    6862:	50 e0       	ldi	r21, 0x00	; 0
    6864:	08 c0       	rjmp	.+16     	; 0x6876 <vfprintf+0x2ba>
    6866:	f5 01       	movw	r30, r10
    6868:	80 81       	ld	r24, Z
    686a:	91 81       	ldd	r25, Z+1	; 0x01
    686c:	bc 01       	movw	r22, r24
    686e:	80 e0       	ldi	r24, 0x00	; 0
    6870:	90 e0       	ldi	r25, 0x00	; 0
    6872:	42 e0       	ldi	r20, 0x02	; 2
    6874:	50 e0       	ldi	r21, 0x00	; 0
    6876:	a4 0e       	add	r10, r20
    6878:	b5 1e       	adc	r11, r21
    687a:	a1 01       	movw	r20, r2
    687c:	1c d1       	rcall	.+568    	; 0x6ab6 <__ultoa_invert>
    687e:	d8 2e       	mov	r13, r24
    6880:	d2 18       	sub	r13, r2
    6882:	8f e7       	ldi	r24, 0x7F	; 127
    6884:	f8 2e       	mov	r15, r24
    6886:	f1 22       	and	r15, r17
    6888:	f6 fe       	sbrs	r15, 6
    688a:	0b c0       	rjmp	.+22     	; 0x68a2 <vfprintf+0x2e6>
    688c:	5e ef       	ldi	r21, 0xFE	; 254
    688e:	f5 22       	and	r15, r21
    6890:	d9 14       	cp	r13, r9
    6892:	38 f4       	brcc	.+14     	; 0x68a2 <vfprintf+0x2e6>
    6894:	f4 fe       	sbrs	r15, 4
    6896:	07 c0       	rjmp	.+14     	; 0x68a6 <vfprintf+0x2ea>
    6898:	f2 fc       	sbrc	r15, 2
    689a:	05 c0       	rjmp	.+10     	; 0x68a6 <vfprintf+0x2ea>
    689c:	8f ee       	ldi	r24, 0xEF	; 239
    689e:	f8 22       	and	r15, r24
    68a0:	02 c0       	rjmp	.+4      	; 0x68a6 <vfprintf+0x2ea>
    68a2:	1d 2d       	mov	r17, r13
    68a4:	01 c0       	rjmp	.+2      	; 0x68a8 <vfprintf+0x2ec>
    68a6:	19 2d       	mov	r17, r9
    68a8:	f4 fe       	sbrs	r15, 4
    68aa:	0d c0       	rjmp	.+26     	; 0x68c6 <vfprintf+0x30a>
    68ac:	fe 01       	movw	r30, r28
    68ae:	ed 0d       	add	r30, r13
    68b0:	f1 1d       	adc	r31, r1
    68b2:	80 81       	ld	r24, Z
    68b4:	80 33       	cpi	r24, 0x30	; 48
    68b6:	19 f4       	brne	.+6      	; 0x68be <vfprintf+0x302>
    68b8:	99 ee       	ldi	r25, 0xE9	; 233
    68ba:	f9 22       	and	r15, r25
    68bc:	08 c0       	rjmp	.+16     	; 0x68ce <vfprintf+0x312>
    68be:	1f 5f       	subi	r17, 0xFF	; 255
    68c0:	f2 fe       	sbrs	r15, 2
    68c2:	05 c0       	rjmp	.+10     	; 0x68ce <vfprintf+0x312>
    68c4:	03 c0       	rjmp	.+6      	; 0x68cc <vfprintf+0x310>
    68c6:	8f 2d       	mov	r24, r15
    68c8:	86 78       	andi	r24, 0x86	; 134
    68ca:	09 f0       	breq	.+2      	; 0x68ce <vfprintf+0x312>
    68cc:	1f 5f       	subi	r17, 0xFF	; 255
    68ce:	0f 2d       	mov	r16, r15
    68d0:	f3 fc       	sbrc	r15, 3
    68d2:	13 c0       	rjmp	.+38     	; 0x68fa <vfprintf+0x33e>
    68d4:	f0 fe       	sbrs	r15, 0
    68d6:	0e c0       	rjmp	.+28     	; 0x68f4 <vfprintf+0x338>
    68d8:	1e 15       	cp	r17, r14
    68da:	10 f0       	brcs	.+4      	; 0x68e0 <vfprintf+0x324>
    68dc:	9d 2c       	mov	r9, r13
    68de:	0a c0       	rjmp	.+20     	; 0x68f4 <vfprintf+0x338>
    68e0:	9d 2c       	mov	r9, r13
    68e2:	9e 0c       	add	r9, r14
    68e4:	91 1a       	sub	r9, r17
    68e6:	1e 2d       	mov	r17, r14
    68e8:	05 c0       	rjmp	.+10     	; 0x68f4 <vfprintf+0x338>
    68ea:	80 e2       	ldi	r24, 0x20	; 32
    68ec:	90 e0       	ldi	r25, 0x00	; 0
    68ee:	b3 01       	movw	r22, r6
    68f0:	b6 d0       	rcall	.+364    	; 0x6a5e <fputc>
    68f2:	1f 5f       	subi	r17, 0xFF	; 255
    68f4:	1e 15       	cp	r17, r14
    68f6:	c8 f3       	brcs	.-14     	; 0x68ea <vfprintf+0x32e>
    68f8:	04 c0       	rjmp	.+8      	; 0x6902 <vfprintf+0x346>
    68fa:	1e 15       	cp	r17, r14
    68fc:	10 f4       	brcc	.+4      	; 0x6902 <vfprintf+0x346>
    68fe:	e1 1a       	sub	r14, r17
    6900:	01 c0       	rjmp	.+2      	; 0x6904 <vfprintf+0x348>
    6902:	ee 24       	eor	r14, r14
    6904:	04 ff       	sbrs	r16, 4
    6906:	0e c0       	rjmp	.+28     	; 0x6924 <vfprintf+0x368>
    6908:	80 e3       	ldi	r24, 0x30	; 48
    690a:	90 e0       	ldi	r25, 0x00	; 0
    690c:	b3 01       	movw	r22, r6
    690e:	a7 d0       	rcall	.+334    	; 0x6a5e <fputc>
    6910:	02 ff       	sbrs	r16, 2
    6912:	1b c0       	rjmp	.+54     	; 0x694a <vfprintf+0x38e>
    6914:	01 fd       	sbrc	r16, 1
    6916:	03 c0       	rjmp	.+6      	; 0x691e <vfprintf+0x362>
    6918:	88 e7       	ldi	r24, 0x78	; 120
    691a:	90 e0       	ldi	r25, 0x00	; 0
    691c:	0e c0       	rjmp	.+28     	; 0x693a <vfprintf+0x37e>
    691e:	88 e5       	ldi	r24, 0x58	; 88
    6920:	90 e0       	ldi	r25, 0x00	; 0
    6922:	0b c0       	rjmp	.+22     	; 0x693a <vfprintf+0x37e>
    6924:	80 2f       	mov	r24, r16
    6926:	86 78       	andi	r24, 0x86	; 134
    6928:	81 f0       	breq	.+32     	; 0x694a <vfprintf+0x38e>
    692a:	01 ff       	sbrs	r16, 1
    692c:	02 c0       	rjmp	.+4      	; 0x6932 <vfprintf+0x376>
    692e:	8b e2       	ldi	r24, 0x2B	; 43
    6930:	01 c0       	rjmp	.+2      	; 0x6934 <vfprintf+0x378>
    6932:	80 e2       	ldi	r24, 0x20	; 32
    6934:	f7 fc       	sbrc	r15, 7
    6936:	8d e2       	ldi	r24, 0x2D	; 45
    6938:	90 e0       	ldi	r25, 0x00	; 0
    693a:	b3 01       	movw	r22, r6
    693c:	90 d0       	rcall	.+288    	; 0x6a5e <fputc>
    693e:	05 c0       	rjmp	.+10     	; 0x694a <vfprintf+0x38e>
    6940:	80 e3       	ldi	r24, 0x30	; 48
    6942:	90 e0       	ldi	r25, 0x00	; 0
    6944:	b3 01       	movw	r22, r6
    6946:	8b d0       	rcall	.+278    	; 0x6a5e <fputc>
    6948:	9a 94       	dec	r9
    694a:	d9 14       	cp	r13, r9
    694c:	c8 f3       	brcs	.-14     	; 0x6940 <vfprintf+0x384>
    694e:	da 94       	dec	r13
    6950:	f1 01       	movw	r30, r2
    6952:	ed 0d       	add	r30, r13
    6954:	f1 1d       	adc	r31, r1
    6956:	80 81       	ld	r24, Z
    6958:	90 e0       	ldi	r25, 0x00	; 0
    695a:	b3 01       	movw	r22, r6
    695c:	80 d0       	rcall	.+256    	; 0x6a5e <fputc>
    695e:	dd 20       	and	r13, r13
    6960:	b1 f7       	brne	.-20     	; 0x694e <vfprintf+0x392>
    6962:	05 c0       	rjmp	.+10     	; 0x696e <vfprintf+0x3b2>
    6964:	80 e2       	ldi	r24, 0x20	; 32
    6966:	90 e0       	ldi	r25, 0x00	; 0
    6968:	b3 01       	movw	r22, r6
    696a:	79 d0       	rcall	.+242    	; 0x6a5e <fputc>
    696c:	ea 94       	dec	r14
    696e:	ee 20       	and	r14, r14
    6970:	c9 f7       	brne	.-14     	; 0x6964 <vfprintf+0x3a8>
    6972:	50 ce       	rjmp	.-864    	; 0x6614 <vfprintf+0x58>
    6974:	f3 01       	movw	r30, r6
    6976:	66 81       	ldd	r22, Z+6	; 0x06
    6978:	77 81       	ldd	r23, Z+7	; 0x07
    697a:	cb 01       	movw	r24, r22
    697c:	2b 96       	adiw	r28, 0x0b	; 11
    697e:	0f b6       	in	r0, 0x3f	; 63
    6980:	f8 94       	cli
    6982:	de bf       	out	0x3e, r29	; 62
    6984:	0f be       	out	0x3f, r0	; 63
    6986:	cd bf       	out	0x3d, r28	; 61
    6988:	cf 91       	pop	r28
    698a:	df 91       	pop	r29
    698c:	1f 91       	pop	r17
    698e:	0f 91       	pop	r16
    6990:	ff 90       	pop	r15
    6992:	ef 90       	pop	r14
    6994:	df 90       	pop	r13
    6996:	cf 90       	pop	r12
    6998:	bf 90       	pop	r11
    699a:	af 90       	pop	r10
    699c:	9f 90       	pop	r9
    699e:	8f 90       	pop	r8
    69a0:	7f 90       	pop	r7
    69a2:	6f 90       	pop	r6
    69a4:	5f 90       	pop	r5
    69a6:	4f 90       	pop	r4
    69a8:	3f 90       	pop	r3
    69aa:	2f 90       	pop	r2
    69ac:	08 95       	ret

000069ae <__eerd_block_usb1287>:
    69ae:	dc 01       	movw	r26, r24
    69b0:	cb 01       	movw	r24, r22

000069b2 <__eerd_blraw_usb1287>:
    69b2:	fc 01       	movw	r30, r24
    69b4:	f9 99       	sbic	0x1f, 1	; 31
    69b6:	fe cf       	rjmp	.-4      	; 0x69b4 <__eerd_blraw_usb1287+0x2>
    69b8:	06 c0       	rjmp	.+12     	; 0x69c6 <__eerd_blraw_usb1287+0x14>
    69ba:	f2 bd       	out	0x22, r31	; 34
    69bc:	e1 bd       	out	0x21, r30	; 33
    69be:	f8 9a       	sbi	0x1f, 0	; 31
    69c0:	31 96       	adiw	r30, 0x01	; 1
    69c2:	00 b4       	in	r0, 0x20	; 32
    69c4:	0d 92       	st	X+, r0
    69c6:	41 50       	subi	r20, 0x01	; 1
    69c8:	50 40       	sbci	r21, 0x00	; 0
    69ca:	b8 f7       	brcc	.-18     	; 0x69ba <__eerd_blraw_usb1287+0x8>
    69cc:	08 95       	ret

000069ce <__eerd_byte_usb1287>:
    69ce:	f9 99       	sbic	0x1f, 1	; 31
    69d0:	fe cf       	rjmp	.-4      	; 0x69ce <__eerd_byte_usb1287>
    69d2:	92 bd       	out	0x22, r25	; 34
    69d4:	81 bd       	out	0x21, r24	; 33
    69d6:	f8 9a       	sbi	0x1f, 0	; 31
    69d8:	99 27       	eor	r25, r25
    69da:	80 b5       	in	r24, 0x20	; 32
    69dc:	08 95       	ret

000069de <__eerd_word_usb1287>:
    69de:	a8 e1       	ldi	r26, 0x18	; 24
    69e0:	b0 e0       	ldi	r27, 0x00	; 0
    69e2:	42 e0       	ldi	r20, 0x02	; 2
    69e4:	50 e0       	ldi	r21, 0x00	; 0
    69e6:	e5 cf       	rjmp	.-54     	; 0x69b2 <__eerd_blraw_usb1287>

000069e8 <__eeupd_block_usb1287>:
    69e8:	dc 01       	movw	r26, r24
    69ea:	a4 0f       	add	r26, r20
    69ec:	b5 1f       	adc	r27, r21
    69ee:	41 50       	subi	r20, 0x01	; 1
    69f0:	50 40       	sbci	r21, 0x00	; 0
    69f2:	40 f0       	brcs	.+16     	; 0x6a04 <__eeupd_block_usb1287+0x1c>
    69f4:	cb 01       	movw	r24, r22
    69f6:	84 0f       	add	r24, r20
    69f8:	95 1f       	adc	r25, r21
    69fa:	2e 91       	ld	r18, -X
    69fc:	05 d0       	rcall	.+10     	; 0x6a08 <__eeupd_r18_usb1287>
    69fe:	41 50       	subi	r20, 0x01	; 1
    6a00:	50 40       	sbci	r21, 0x00	; 0
    6a02:	d8 f7       	brcc	.-10     	; 0x69fa <__eeupd_block_usb1287+0x12>
    6a04:	08 95       	ret

00006a06 <__eeupd_byte_usb1287>:
    6a06:	26 2f       	mov	r18, r22

00006a08 <__eeupd_r18_usb1287>:
    6a08:	f9 99       	sbic	0x1f, 1	; 31
    6a0a:	fe cf       	rjmp	.-4      	; 0x6a08 <__eeupd_r18_usb1287>
    6a0c:	92 bd       	out	0x22, r25	; 34
    6a0e:	81 bd       	out	0x21, r24	; 33
    6a10:	f8 9a       	sbi	0x1f, 0	; 31
    6a12:	01 97       	sbiw	r24, 0x01	; 1
    6a14:	00 b4       	in	r0, 0x20	; 32
    6a16:	02 16       	cp	r0, r18
    6a18:	39 f0       	breq	.+14     	; 0x6a28 <__eeupd_r18_usb1287+0x20>
    6a1a:	1f ba       	out	0x1f, r1	; 31
    6a1c:	20 bd       	out	0x20, r18	; 32
    6a1e:	0f b6       	in	r0, 0x3f	; 63
    6a20:	f8 94       	cli
    6a22:	fa 9a       	sbi	0x1f, 2	; 31
    6a24:	f9 9a       	sbi	0x1f, 1	; 31
    6a26:	0f be       	out	0x3f, r0	; 63
    6a28:	08 95       	ret

00006a2a <__eeupd_word_usb1287>:
    6a2a:	01 96       	adiw	r24, 0x01	; 1
    6a2c:	27 2f       	mov	r18, r23
    6a2e:	ec df       	rcall	.-40     	; 0x6a08 <__eeupd_r18_usb1287>
    6a30:	ea cf       	rjmp	.-44     	; 0x6a06 <__eeupd_byte_usb1287>

00006a32 <strnlen_P>:
    6a32:	fc 01       	movw	r30, r24
    6a34:	05 90       	lpm	r0, Z+
    6a36:	61 50       	subi	r22, 0x01	; 1
    6a38:	70 40       	sbci	r23, 0x00	; 0
    6a3a:	01 10       	cpse	r0, r1
    6a3c:	d8 f7       	brcc	.-10     	; 0x6a34 <strnlen_P+0x2>
    6a3e:	80 95       	com	r24
    6a40:	90 95       	com	r25
    6a42:	8e 0f       	add	r24, r30
    6a44:	9f 1f       	adc	r25, r31
    6a46:	08 95       	ret

00006a48 <strnlen>:
    6a48:	fc 01       	movw	r30, r24
    6a4a:	61 50       	subi	r22, 0x01	; 1
    6a4c:	70 40       	sbci	r23, 0x00	; 0
    6a4e:	01 90       	ld	r0, Z+
    6a50:	01 10       	cpse	r0, r1
    6a52:	d8 f7       	brcc	.-10     	; 0x6a4a <strnlen+0x2>
    6a54:	80 95       	com	r24
    6a56:	90 95       	com	r25
    6a58:	8e 0f       	add	r24, r30
    6a5a:	9f 1f       	adc	r25, r31
    6a5c:	08 95       	ret

00006a5e <fputc>:
    6a5e:	0f 93       	push	r16
    6a60:	1f 93       	push	r17
    6a62:	cf 93       	push	r28
    6a64:	df 93       	push	r29
    6a66:	8c 01       	movw	r16, r24
    6a68:	eb 01       	movw	r28, r22
    6a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    6a6c:	81 ff       	sbrs	r24, 1
    6a6e:	1b c0       	rjmp	.+54     	; 0x6aa6 <fputc+0x48>
    6a70:	82 ff       	sbrs	r24, 2
    6a72:	0d c0       	rjmp	.+26     	; 0x6a8e <fputc+0x30>
    6a74:	2e 81       	ldd	r18, Y+6	; 0x06
    6a76:	3f 81       	ldd	r19, Y+7	; 0x07
    6a78:	8c 81       	ldd	r24, Y+4	; 0x04
    6a7a:	9d 81       	ldd	r25, Y+5	; 0x05
    6a7c:	28 17       	cp	r18, r24
    6a7e:	39 07       	cpc	r19, r25
    6a80:	64 f4       	brge	.+24     	; 0x6a9a <fputc+0x3c>
    6a82:	e8 81       	ld	r30, Y
    6a84:	f9 81       	ldd	r31, Y+1	; 0x01
    6a86:	01 93       	st	Z+, r16
    6a88:	f9 83       	std	Y+1, r31	; 0x01
    6a8a:	e8 83       	st	Y, r30
    6a8c:	06 c0       	rjmp	.+12     	; 0x6a9a <fputc+0x3c>
    6a8e:	e8 85       	ldd	r30, Y+8	; 0x08
    6a90:	f9 85       	ldd	r31, Y+9	; 0x09
    6a92:	80 2f       	mov	r24, r16
    6a94:	09 95       	icall
    6a96:	89 2b       	or	r24, r25
    6a98:	31 f4       	brne	.+12     	; 0x6aa6 <fputc+0x48>
    6a9a:	8e 81       	ldd	r24, Y+6	; 0x06
    6a9c:	9f 81       	ldd	r25, Y+7	; 0x07
    6a9e:	01 96       	adiw	r24, 0x01	; 1
    6aa0:	9f 83       	std	Y+7, r25	; 0x07
    6aa2:	8e 83       	std	Y+6, r24	; 0x06
    6aa4:	02 c0       	rjmp	.+4      	; 0x6aaa <fputc+0x4c>
    6aa6:	0f ef       	ldi	r16, 0xFF	; 255
    6aa8:	1f ef       	ldi	r17, 0xFF	; 255
    6aaa:	c8 01       	movw	r24, r16
    6aac:	df 91       	pop	r29
    6aae:	cf 91       	pop	r28
    6ab0:	1f 91       	pop	r17
    6ab2:	0f 91       	pop	r16
    6ab4:	08 95       	ret

00006ab6 <__ultoa_invert>:
    6ab6:	fa 01       	movw	r30, r20
    6ab8:	aa 27       	eor	r26, r26
    6aba:	28 30       	cpi	r18, 0x08	; 8
    6abc:	51 f1       	breq	.+84     	; 0x6b12 <__ultoa_invert+0x5c>
    6abe:	20 31       	cpi	r18, 0x10	; 16
    6ac0:	81 f1       	breq	.+96     	; 0x6b22 <__ultoa_invert+0x6c>
    6ac2:	e8 94       	clt
    6ac4:	6f 93       	push	r22
    6ac6:	6e 7f       	andi	r22, 0xFE	; 254
    6ac8:	6e 5f       	subi	r22, 0xFE	; 254
    6aca:	7f 4f       	sbci	r23, 0xFF	; 255
    6acc:	8f 4f       	sbci	r24, 0xFF	; 255
    6ace:	9f 4f       	sbci	r25, 0xFF	; 255
    6ad0:	af 4f       	sbci	r26, 0xFF	; 255
    6ad2:	b1 e0       	ldi	r27, 0x01	; 1
    6ad4:	3e d0       	rcall	.+124    	; 0x6b52 <__ultoa_invert+0x9c>
    6ad6:	b4 e0       	ldi	r27, 0x04	; 4
    6ad8:	3c d0       	rcall	.+120    	; 0x6b52 <__ultoa_invert+0x9c>
    6ada:	67 0f       	add	r22, r23
    6adc:	78 1f       	adc	r23, r24
    6ade:	89 1f       	adc	r24, r25
    6ae0:	9a 1f       	adc	r25, r26
    6ae2:	a1 1d       	adc	r26, r1
    6ae4:	68 0f       	add	r22, r24
    6ae6:	79 1f       	adc	r23, r25
    6ae8:	8a 1f       	adc	r24, r26
    6aea:	91 1d       	adc	r25, r1
    6aec:	a1 1d       	adc	r26, r1
    6aee:	6a 0f       	add	r22, r26
    6af0:	71 1d       	adc	r23, r1
    6af2:	81 1d       	adc	r24, r1
    6af4:	91 1d       	adc	r25, r1
    6af6:	a1 1d       	adc	r26, r1
    6af8:	20 d0       	rcall	.+64     	; 0x6b3a <__ultoa_invert+0x84>
    6afa:	09 f4       	brne	.+2      	; 0x6afe <__ultoa_invert+0x48>
    6afc:	68 94       	set
    6afe:	3f 91       	pop	r19
    6b00:	2a e0       	ldi	r18, 0x0A	; 10
    6b02:	26 9f       	mul	r18, r22
    6b04:	11 24       	eor	r1, r1
    6b06:	30 19       	sub	r19, r0
    6b08:	30 5d       	subi	r19, 0xD0	; 208
    6b0a:	31 93       	st	Z+, r19
    6b0c:	de f6       	brtc	.-74     	; 0x6ac4 <__ultoa_invert+0xe>
    6b0e:	cf 01       	movw	r24, r30
    6b10:	08 95       	ret
    6b12:	46 2f       	mov	r20, r22
    6b14:	47 70       	andi	r20, 0x07	; 7
    6b16:	40 5d       	subi	r20, 0xD0	; 208
    6b18:	41 93       	st	Z+, r20
    6b1a:	b3 e0       	ldi	r27, 0x03	; 3
    6b1c:	0f d0       	rcall	.+30     	; 0x6b3c <__ultoa_invert+0x86>
    6b1e:	c9 f7       	brne	.-14     	; 0x6b12 <__ultoa_invert+0x5c>
    6b20:	f6 cf       	rjmp	.-20     	; 0x6b0e <__ultoa_invert+0x58>
    6b22:	46 2f       	mov	r20, r22
    6b24:	4f 70       	andi	r20, 0x0F	; 15
    6b26:	40 5d       	subi	r20, 0xD0	; 208
    6b28:	4a 33       	cpi	r20, 0x3A	; 58
    6b2a:	18 f0       	brcs	.+6      	; 0x6b32 <__ultoa_invert+0x7c>
    6b2c:	49 5d       	subi	r20, 0xD9	; 217
    6b2e:	31 fd       	sbrc	r19, 1
    6b30:	40 52       	subi	r20, 0x20	; 32
    6b32:	41 93       	st	Z+, r20
    6b34:	02 d0       	rcall	.+4      	; 0x6b3a <__ultoa_invert+0x84>
    6b36:	a9 f7       	brne	.-22     	; 0x6b22 <__ultoa_invert+0x6c>
    6b38:	ea cf       	rjmp	.-44     	; 0x6b0e <__ultoa_invert+0x58>
    6b3a:	b4 e0       	ldi	r27, 0x04	; 4
    6b3c:	a6 95       	lsr	r26
    6b3e:	97 95       	ror	r25
    6b40:	87 95       	ror	r24
    6b42:	77 95       	ror	r23
    6b44:	67 95       	ror	r22
    6b46:	ba 95       	dec	r27
    6b48:	c9 f7       	brne	.-14     	; 0x6b3c <__ultoa_invert+0x86>
    6b4a:	00 97       	sbiw	r24, 0x00	; 0
    6b4c:	61 05       	cpc	r22, r1
    6b4e:	71 05       	cpc	r23, r1
    6b50:	08 95       	ret
    6b52:	9b 01       	movw	r18, r22
    6b54:	ac 01       	movw	r20, r24
    6b56:	0a 2e       	mov	r0, r26
    6b58:	06 94       	lsr	r0
    6b5a:	57 95       	ror	r21
    6b5c:	47 95       	ror	r20
    6b5e:	37 95       	ror	r19
    6b60:	27 95       	ror	r18
    6b62:	ba 95       	dec	r27
    6b64:	c9 f7       	brne	.-14     	; 0x6b58 <__ultoa_invert+0xa2>
    6b66:	62 0f       	add	r22, r18
    6b68:	73 1f       	adc	r23, r19
    6b6a:	84 1f       	adc	r24, r20
    6b6c:	95 1f       	adc	r25, r21
    6b6e:	a0 1d       	adc	r26, r0
    6b70:	08 95       	ret

00006b72 <_exit>:
    6b72:	f8 94       	cli

00006b74 <__stop_program>:
    6b74:	ff cf       	rjmp	.-2      	; 0x6b74 <__stop_program>
